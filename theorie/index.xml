<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Theorie on Informatica</title><link>https://emmauscollege.github.io/theorie/</link><description>Recent content in Theorie on Informatica</description><generator>Hugo -- gohugo.io</generator><language>en</language><atom:link href="https://emmauscollege.github.io/theorie/index.xml" rel="self" type="application/rss+xml"/><item><title>T1. Web Design met HTML en CSS</title><link>https://emmauscollege.github.io/theorie/webdesign/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/webdesign/</guid><description>&lt;p&gt;Je leert hoe je informatie op een website zet met de programmeertalen HTML en CSS.&lt;/p&gt;</description></item><item><title>T1a. Intellectueel eigendom</title><link>https://emmauscollege.github.io/theorie/webdesign_auteursrecht/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/webdesign_auteursrecht/</guid><description>&lt;h2 id="inleiding"&gt;Inleiding&lt;/h2&gt;
&lt;p&gt;Tijdens het maken van je website zul je ongetwijfeld gemerkt hebben hoe gemakkelijk het is om informatie van andere webpagina’s over te nemen in die van jezelf. Het was vooraf bekend dat je voor de opdracht geen tekst mocht kopiëren zonder te citeren, maar wellicht heb je wel gebruik gemaakt van afbeeldingen, muziek, of HTML / javascript code.&lt;/p&gt;
&lt;p&gt;Maar mag dit eigenlijk wel? Dat hangt er vanaf. Hieronder zullen we een aantal aspecten van intellectueel eigendom behandelen die je zullen helpen met het beantwoorden van de vraag of je de informatie op je website rechtmatig hebt gebruikt. Daarnaast krijg je ook informatie over het gebruiken van afbeeldingen van mensen en (software)licenties.&lt;/p&gt;</description></item><item><title>T2. Digitale informatie</title><link>https://emmauscollege.github.io/theorie/informatie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/informatie/</guid><description>&lt;p&gt;Je leert hoe een computer allerlei soorten informatie opslaat.&lt;/p&gt;</description></item><item><title>T3. Programmeren met Javascript</title><link>https://emmauscollege.github.io/theorie/programmeren/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/programmeren/</guid><description>&lt;p&gt;Je leert hoe je eenvoudige programma&amp;rsquo;s kunt maken met de programmeertaal Javascript en de p5js library.&lt;/p&gt;</description></item><item><title>T4. Algoritmen in Javascript</title><link>https://emmauscollege.github.io/theorie/algoritmen/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/algoritmen/</guid><description>&lt;p&gt;Je leert hoe je problemen kunt oplossen met algoritmen, je gebruikt daarbij stroomdiagrammen en de programmeertaal Javascript.&lt;/p&gt;</description></item><item><title>T5. Databases met SQL</title><link>https://emmauscollege.github.io/theorie/databases/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/databases/</guid><description>&lt;p&gt;Je leert hoe je heel veel informatie kunt bekijken en bewaren in databases met de programmeertaal SQL.&lt;/p&gt;</description></item><item><title>T6. Robotica met Arduino</title><link>https://emmauscollege.github.io/theorie/robotica/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/robotica/</guid><description>&lt;p&gt;Je leert hoe je met behulp van toestandsgrammen kunt programmeren. Je gebruikt daarbij het Arduino platform.&lt;/p&gt;</description></item><item><title>T7. Netwerken met IP</title><link>https://emmauscollege.github.io/theorie/netwerken/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/netwerken/</guid><description>&lt;p&gt;Je leert hoe het internet van binnen werkt.&lt;/p&gt;</description></item><item><title>T8 Epidemiesimulatoropdracht</title><link>https://emmauscollege.github.io/theorie/objectoriented_simulator_opdracht/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/objectoriented_simulator_opdracht/</guid><description>&lt;h3 id="inleiding"&gt;Inleiding&lt;/h3&gt;
&lt;p&gt;Om te leren hoe je objectgeoriënteerd programmeert, gaan we stap voor stap een objecgeoriënteerd programma maken. We maken hiervoor een &lt;strong&gt;epidemiesimulator&lt;/strong&gt; die visueel maakt hoe organismen elkaar kunnen besmetten met een ziekteverwekker. Tussen de opdrachten door vind je theorie over objectgeoriënteerd programmeren.&lt;/p&gt;
&lt;h3 id="opdracht-0---klaar-voor-de-start"&gt;Opdracht 0 - Klaar voor de start&lt;/h3&gt;
&lt;h4 id="begrijp-de-code"&gt;Begrijp de code:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Bekijk in je browser wat de simulator nu al doet. De simulator doet nog niet veel: het laat een vierkantje bewegen en stuiteren tegen de randen van het scherm.&lt;/li&gt;
&lt;li&gt;Bekijk de code van de simulator. In de code zie je &lt;em&gt;globale variabelen&lt;/em&gt; die de positie en de horizontale en verticale snelheid bevatten. Ook zie je de constante &lt;code&gt;BREEDTE&lt;/code&gt;, die de waarde van de grootte van het vierkantje bevat.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;speedX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;speedY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BREEDTE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;setup&lt;/code&gt; krijgen deze variabelen hun initiële waarde. De positie is in het midden van het canvas. (Het midden van het vierkant is overigens niet exact in het midden. De waarden &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;y&lt;/code&gt; worden gebruikt voor de linkerbovenhoek&amp;hellip;) De horizontale en verticale snelheid krijgen bij de start een random waarde tussen -5 en 5.&lt;/p&gt;</description></item><item><title>T8 Theorie objectgeoriënteerd programmeren</title><link>https://emmauscollege.github.io/theorie/objectoriented_theorie/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/objectoriented_theorie/</guid><description>&lt;h3 id="introductie"&gt;Introductie&lt;/h3&gt;
&lt;p&gt;In de vierde klas heb je in JavaScript met behulp van de &lt;em&gt;library&lt;/em&gt;
&lt;a href="http://p5js.org" target="_blank"&gt;p5.js&lt;/a&gt;
een spelletje gemaakt. Later leerde je de taal C++ om daarmee een microcontroller te programmeren. JavaScript en C++ zijn verschillende programmeertalen, toch lijken ze ook wat op elkaar: het programma dat je in deze talen maakt wordt stap voor stap uitgevoerd, commando na commando. Na ieder commando is de toestand waarin je programma zich bevindt weer een beetje anders.&lt;/p&gt;</description></item><item><title>T8 Theorie objectgeoriënteerd programmeren</title><link>https://emmauscollege.github.io/theorie/objectoriented_theorie_backup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/objectoriented_theorie_backup/</guid><description>&lt;h3 id="introductie"&gt;Introductie&lt;/h3&gt;
&lt;p&gt;In de vierde klas heb je in JavaScript met behulp van de &lt;em&gt;library&lt;/em&gt;
&lt;a href="http://p5js.org" target="_blank"&gt;p5.js&lt;/a&gt;
een spelletje gemaakt. Later leerde je de taal C++ om daarmee een microcontroller te programmeren. JavaScript en C++ zijn verschillende programmeertalen, toch lijken ze ook wat op elkaar: het programma dat je in deze talen maakt wordt stap voor stap uitgevoerd, commando na commando. Na ieder commando is de toestand waarin je programma zich bevindt weer een beetje anders.&lt;/p&gt;</description></item><item><title>T8 Theorie objectgeoriënteerd programmeren 2324</title><link>https://emmauscollege.github.io/theorie/objectoriented_theorie2324/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/objectoriented_theorie2324/</guid><description>&lt;h3 id="introductie"&gt;Introductie&lt;/h3&gt;
&lt;p&gt;In de vierde klas heb je in JavaScript met behulp van de &lt;em&gt;library&lt;/em&gt;
&lt;a href="http://p5js.org" target="_blank"&gt;p5.js&lt;/a&gt;
een spelletje gemaakt. Later leerde je de taal C++ om daarmee een microcontroller te programmeren. JavaScript en C++ zijn verschillende programmeertalen, toch lijken ze ook wat op elkaar: het programma dat je in deze talen maakt wordt stap voor stap uitgevoerd, commando na commando. Na ieder commando is de toestand waarin je programma zich bevindt weer een beetje anders.&lt;/p&gt;</description></item><item><title>T8 Verwerkingsopdrachten</title><link>https://emmauscollege.github.io/theorie/objectoriented_simulator_opdrachten-backup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/objectoriented_simulator_opdrachten-backup/</guid><description>&lt;h3 id="inleiding"&gt;Inleiding&lt;/h3&gt;
&lt;p&gt;Om te leren hoe je objectgeoriënteerd programmeert, gaan we stap voor stap een objecgeoriënteerd programma maken. We maken hiervoor een &lt;strong&gt;epidemiesimulator&lt;/strong&gt; die visueel maakt hoe organismen elkaar kunnen besmetten met een ziekteverwekker. Tussen de opdrachten door vind je theorie over objectgeoriënteerd programmeren.&lt;/p&gt;
&lt;h3 id="opdracht-0---klaar-voor-de-start"&gt;Opdracht 0 - Klaar voor de start&lt;/h3&gt;
&lt;h4 id="start-een-eigen-repo-en-begrijp-de-code"&gt;Start een eigen repo en begrijp de code:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Ga naar
&lt;a href="https://classroom.github.com" target="_blank"&gt;GitHub classroom&lt;/a&gt;
en schrijf je in voor de opdracht &amp;lsquo;Epidemiesimulator&amp;rsquo;&lt;/li&gt;
&lt;li&gt;Bekijk in je browser wat de simulator nu al doet. De simulator doet nog niet veel: het laat een vierkantje bewegen en stuiteren tegen de randen van het scherm.&lt;/li&gt;
&lt;li&gt;Bekijk de code van de simulator. In de code zie je &lt;em&gt;globale variabelen&lt;/em&gt; die de positie en de horizontale en verticale snelheid bevatten. Ook zie je de constante &lt;code&gt;BREEDTE&lt;/code&gt;, die de waarde van de grootte van het vierkantje bevat.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;speedX&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;speedY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="kr"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;BREEDTE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In &lt;code&gt;setup&lt;/code&gt; krijgen deze variabelen hun initiële waarde. De positie is in het midden van het canvas. (Het midden van het vierkant is overigens niet exact in het midden. De waarden &lt;code&gt;x&lt;/code&gt; en &lt;code&gt;y&lt;/code&gt; worden gebruikt voor de linkerbovenhoek&amp;hellip;) De horizontale en verticale snelheid krijgen bij de start een random waarde tussen -5 en 5.&lt;/p&gt;</description></item><item><title>T8 Verwerkingsopdrachten</title><link>https://emmauscollege.github.io/theorie/objectoriented_simulator_opdrachten2425/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/objectoriented_simulator_opdrachten2425/</guid><description>&lt;h3 id="inleiding"&gt;Inleiding&lt;/h3&gt;
&lt;p&gt;Om te leren hoe je objectgeoriënteerd programmeert, gaan we stap voor stap een objecgeoriënteerd programma maken. We maken hiervoor een &lt;strong&gt;epidemiesimulator&lt;/strong&gt; die visueel maakt hoe organismen elkaar kunnen besmetten met een ziekteverwekker. Tussen de opdrachten door vind je theorie over objectgeoriënteerd programmeren.&lt;/p&gt;
&lt;h3 id="opdracht-0---klaar-voor-de-start"&gt;Opdracht 0 - Klaar voor de start&lt;/h3&gt;
&lt;h4 id="begrijp-de-code"&gt;Begrijp de code:&lt;/h4&gt;
&lt;p&gt;Bekijk in je browser wat de simulator nu al doet. Je ziet 25 &amp;lsquo;mensen&amp;rsquo;, waarvan er één besmet is. Mensen kunnen elkaar nog niet besmetten.&lt;/p&gt;</description></item><item><title>T8 Verwerkingsopdrachten</title><link>https://emmauscollege.github.io/theorie/objectoriented_verwerkingsopdrachten-backup/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/objectoriented_verwerkingsopdrachten-backup/</guid><description>&lt;h3 id="inleiding"&gt;Inleiding&lt;/h3&gt;
&lt;p&gt;Om de overstap naar objectgeoriënteerd programmeren te maken, beginnen we met een puur imperatief programma en werken we dit stap voor stap uit naar een objectgeoriënteerd programma. We maken hiervoor een &lt;strong&gt;epidemiesimulator&lt;/strong&gt; die visueel maakt hoe organismen elkaar kunnen besmetten met een ziekteverwekker. Tussen de opdrachten door vind je theorie over objectgeoriënteerd programmeren.&lt;/p&gt;
&lt;p&gt;Is het programmeren een beetje weggezakt? Kijk dan eerst nog eens op
&lt;a href="http://khanacademy.org" target="_blank"&gt;Khan Academy&lt;/a&gt;
en gebruik gerust het
&lt;a href="https://emmauscollege.github.io/syntaxblad.pfd"&gt;syntaxblad&lt;/a&gt;
.&lt;/p&gt;</description></item><item><title>T8 Verwerkingsopdrachten</title><link>https://emmauscollege.github.io/theorie/objectoriented_verwerkingsopdrachten/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/objectoriented_verwerkingsopdrachten/</guid><description>&lt;h2 id="opdracht-1-en-2"&gt;Opdracht 1 en 2&lt;/h2&gt;
&lt;p&gt;Ga naar
&lt;a href="https://classroom.github.com" target="_blank"&gt;GitHub Classroom&lt;/a&gt;
en kies daar de betreffende opdracht (over boeken)&lt;/p&gt;
&lt;h2 id="opdracht-3-en-4"&gt;Opdracht 3 en 4&lt;/h2&gt;
&lt;p&gt;Ga naar
&lt;a href="https://classroom.github.com" target="_blank"&gt;GitHub Classroom&lt;/a&gt;
en kies daar de betreffende opdracht (over dieren)&lt;/p&gt;
&lt;h2 id="opdracht-5-en-6"&gt;Opdracht 5 en 6&lt;/h2&gt;
&lt;p&gt;Ga naar
&lt;a href="https://classroom.github.com" target="_blank"&gt;GitHub Classroom&lt;/a&gt;
en kies daar de betreffende opdracht (over inkapseling en associatie)&lt;/p&gt;
&lt;h2 id="opdracht-7"&gt;Opdracht 7&lt;/h2&gt;
&lt;p&gt;Pak papier of je iPad erbij.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;a. Teken een UML diagram van een klasse &amp;lsquo;Auto&amp;rsquo;, met de volgende eigenschappen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Iedere auto heeft een merk, type en snelheid.&lt;/li&gt;
&lt;li&gt;Iedere auto kan claxoneren (door &amp;ldquo;tuut&amp;rdquo; in de console te printen)&lt;/li&gt;
&lt;li&gt;Iedere auto kan de snelheid verhogen. Als dat wordt gedaan, wordt de snelheid 10 hoger.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;b. Teken een diagram met drie zelf verzonnen Auto-objecten.&lt;/p&gt;</description></item><item><title>T8. Objectgeoriënteerd Programmeren</title><link>https://emmauscollege.github.io/theorie/objectoriented/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/objectoriented/</guid><description>&lt;p&gt;Je leert objectgeoriënteerd programmeren. Dat is een manier van programmeren waarbij data en logica gebundeld zijn in objecten.&lt;/p&gt;</description></item><item><title>T9. Security</title><link>https://emmauscollege.github.io/theorie/security/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/security/</guid><description>&lt;p&gt;Over de beveiliging van computers en data.&lt;/p&gt;</description></item><item><title>Extra: OOP voor 6vin2</title><link>https://emmauscollege.github.io/theorie/object_oriented_programming/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://emmauscollege.github.io/theorie/object_oriented_programming/</guid><description>&lt;script type="module"&gt;
import { initializeApp } from "https://www.gstatic.com/firebasejs/10.3.1/firebase-app.js";
import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.3.1/firebase-analytics.js";
import { getAuth, signInWithRedirect, GoogleAuthProvider } from "https://www.gstatic.com/firebasejs/10.3.1/firebase-auth.js";
import { getFirestore, collection, getDocs, addDoc, doc, setDoc } from "https://www.gstatic.com/firebasejs/10.3.1/firebase-firestore.js";
const firebaseConfig = {
apiKey: "AIzaSyCMTwFixLtLnfTDOw28ElzwsJ6zTt2K_Hw",
authDomain: "informatica-emmauscollege.firebaseapp.com",
projectId: "informatica-emmauscollege",
storageBucket: "informatica-emmauscollege.appspot.com",
messagingSenderId: "152162579128",
appId: "1:152162579128:web:0024ec120bcff58af43a4d",
measurementId: "G-P1R1XZ77VK"
};
const app = initializeApp(firebaseConfig);
const analytics = getAnalytics(app);
const provider = new GoogleAuthProvider();
const auth = getAuth();
const signIn = () =&gt;{
signInWithRedirect(auth, provider)
.then((result) =&gt; {
const credential = GoogleAuthProvider.credentialFromResult(result);
const token = credential.accessToken;
const user = result.user;
console.log(user)
}).catch((error) =&gt; {
const errorCode = error.code;
const errorMessage = error.message;
const email = error.customData.email;
const credential = GoogleAuthProvider.credentialFromError(error);
});
}
auth.onAuthStateChanged((user) =&gt; {
if (user) {
const uid = user.uid;
console.log("logged in")
document.getElementById("userWelcome").innerHTML = "Welkom terug " + user.displayName
document.getElementById("login").style.display = "none"
window.user = user
getExercises()
} else {
console.log("logged out")
}
});
window.signIn = signIn
const db = getFirestore(app);
const getExercises = async () =&gt; {
if(!window.user) return console.log("Not logged in")
const querySnapshot = await getDocs(collection(db, "users", window.user.uid, "exercises"));
querySnapshot.forEach((doc) =&gt; {
console.log(`${doc.id} =&gt; ${doc.data()}`);
document.getElementById("exercise_checkbox_" + doc.id).checked = doc.data().done
if(doc.data().done){
document.getElementsByClassName("exercise_" + doc.id)[0].classList.add("done");
}
});
}
const saveExercise = async (exercise, done) =&gt; {
console.log(done)
if(!window.user) return console.log("Not logged in")
try {
const docRef = doc(db, "users", window.user.uid, "exercises", exercise);
setDoc(docRef, {
done: done
});
console.log("Not working")
console.log("Document written with ID: ", docRef.id);
} catch (e) {
console.error("Error adding document: ", e);
}
}
window.saveExercise = saveExercise
&lt;/script&gt;
&lt;p&gt;&lt;button id="login" onclick="signIn()"&gt;Inloggen met Google&lt;/button&gt;&lt;/p&gt;</description></item></channel></rss>