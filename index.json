[{"content":"Hier vind je de lesplanner, geplande toetsen en inlevermomenten voor 4 havo.\nLesplanner Het is vandaag .\nWeek Theorie (enkel uur) Praktijk (blokuur) 34 intro 35 T1 Web Design Uitleg: HTML tags T1 Web Design Oefening: Khan 1 Intro to HTML + 2 Intro to CSS 36 T1 Web Design Uitleg: CSS selectors en properties T1 Web Design Oefening: Khan 3 More HTML tags + 4 CSS text properties 37 T1 Web Design Uitleg: boxmodel T1 Web Design Oefening: Khan 6 CSS layout 38 T1 Web Design Uitleg: floats T1 Web Design Oefening: Khan 7 More CSS selectors 39 T1 Web Design Uitleg: eye catchers T1 Web Design Oefentoets in Woots maken 40 T2 Informatie Uitleg: bits O1 Website stap 1 eerste wijziging gemaakt 41 T2 Informatie Uitleg: BIN O1 Website stap 2 menu + lege pagina’s 42 T2 Informatie Uitleg: HEX O1 Website stap 3 layout hoofdpagina 43 Herfstvakantie 44 T2 Informatie Oefening: IA gestart O1 Website stap 4 inhoud en plaatjes hoofdpagina 45 T2 Informatie Oefening: IA t/m 3 O1 Website stap 5 layout subpagina’s 46 TW1: Toets 4H-IN-S01 over T1 Web Design 47 TW1 48 T2 Informatie Oefening: IA t/m 6 O1 Website stap 6 inhoud en plaatjes subpagina’s 49 T2 Informatie kleuren + plaatjes O1 Website stap 7 kleuren 50 T2 Informatie tekst + geluid + video + compressie O1 Website stap 8 perfectioneren 51 T2 Informatie Oefening: Beeldbewerking O1 Website stap 9 eyecathers 52 Kerstvakantie 1 Kerstvakantie 2 T2 Informatie Oefening: Beeldbewerking PO 4H-IN-S04 website inleveren 3 T3 Programmeren Uitleg: programmeertalen + P5JS T3 Oefening Khan t/m 5 Animation basics 4 T3 Programmeren Uitleg: variabelen T3 Oefening Khan t/m 10 Functions 5 T3 Programmeren Uitleg: functies T3 Oefening Khan t/m 11 Logic and if statements 6 T3 Programmeren Uitleg: logica en if T3 Oefening Khan t/m 13 Loopings 7 T3 Programmeren Uitleg: loops (les) arrays (thuis kijken) T3 Oefening Khan t/m 15 Arrays 8 uitloop uitloop 9 Voorjaarsvakantie 10 T4 Algoritmen Uitleg: stroomdiagrammen O2 Game eerste wijziging gemaakt 11 TW2: Toets 4H-IN-S02 over T2 Informatie 12 TW2 13 T4 Algoritmen Uitleg: lijsten O2 Game speler beweegt 14 T4 Algoritmen Uitleg: nesten O2 Game vijand 15 T4 Algoritmen Oefenen: eenvoudige algoritmen t/m 2 O2 Game botsingdetectie + afgaan 16 T4 Algoritmen Oefenen: eenvoudige algoritmen t/m 4 O2 Game punten + gameoverscherm 17 meivakantie 18 meivakantie 19 T4 Algoritmen Oefenen: eenvoudige algoritmen t/m 6 O2 Game uitlegscherm (je hebt nu een speelbaar spel) 20 T4 Algoritmen Oefenen: eenvoudige algoritmen t/m 8 O2 Game werk aan uitbreiding 1 21 T4 Algoritmen Oefenen: eenvoudige algoritmen t/m 10 O2 Game werk aan uitbreiding 1 22 T4 Algoritmen Uitleg: bubble sort (geen leerdoel) O2 Game uitbreiding 1 af 23 T4 Algoritmen Uitleg: kortste pad (geen leerdoel) PO 4H-IN-S05 game inleveren 24 extra: algoritme-vragen in Woots maken extra: algoritme-vragen in Woots maken 25 TW3: Toets 4H-IN-S03 over T3 Programmeren + T4 Algoritmen 26 TW3 27 Zomervakantie Toetsen en inlevermomenten Datum Code Toetsvorm Stof Toetsweek 1 4H-IN-S01 Digitale toets T1 Web Design Zondag 15 jan 23:59 4H-IN-S04 Praktische Opdracht O1 Website Toetsweek 2 4H-IN-S02 Digitale toets T2 Digitale Informatie Zondag 11 jun 23:59 4H-IN-S05 Praktische Opdracht O2 Game Toetsweek 3 4H-IN-S03 Digitale Toets T3 Programmeren + T4 Algoritmen Advies voor inleveren van Praktische Opdrachten: Lever een bijna af concept in vóór de laatste les voor de deadline, als er dan iets misgaat dan kun je nog een vraag stellen in de laatste les!\n","description":"","tags":null,"title":"4 havo","uri":"/planning/4h/"},{"content":"Khan Academy is internationale online lesmethode met cursussen voor diverse onderwerpen. Wij gebruiken enkele cursussen uit de sectie Computer Programming.\nDe eerste keer inloggen op Khan Academy Start je browser (Chrome werkt het best) en ga naar https://www.khanacademy.org/ Als je inlogt op khanacademy, dan onthoudt de website wat je al bekeken en gemaakt hebt. Inloggen kan als volgt:\nKlik op “login” kies de knop “continue with google” type je school-email van google en bijbehorende wachtwoord in De eerste keer dat je inlogt krijg je een aantal vragen\n“What grade are you in?” -\u003e kies “Grade 12 / Year 12” “What courses can we help you learn?” -\u003e scroll omlaag en kies “Computer Programming” Je kunt nu naar je cursus gaan:\nKlik linksboven op courses. Kies computer programming. Kies de juiste cursus. Bekijk de video’s en maak de opdrachten. De volgende keer inloggen op Khan Academy Start je browser (Chrome werkt het best) en ga naar https://www.khanacademy.org/ Klik op “login” kies de knop “continue with google” type je school-email van google en bijbehorende wachtwoord in Klik linksboven op courses. Kies computer programming. Kies de juiste cursus. Bekijk de video’s en maak de opdrachten. Je kunt ook de links gebruiken op diverse plaatsen op de informatica-website. Die brengen je gelijk naar de goede plek.\nVeelgestelde vragen Ik kan de cursus niet vinden Kijk of je op de Engelstalige site zit. Als je zoekt via google, dan kom je vaak op de Nederlandstalige site, daar staat niet de cursus die wij gebruiken. De Engelstalige site vind je op https://khanacademy.org/ De juiste cursus vind je door linksboven op de knop “courses” te klikken. Vervolgen kies je “Computer Programming”. Nu kom je op een pagina waar alle cursussen staan die we gebruiken.\nIk krijg steeds de Nederlandse in plaats van de Engelse site De Engelstalige site vind je op https://khanacademy.org/ . Als je daar steeds teruggezet wordt op de Nederlandse site, dan moet je in je profiel aangeven dat je voorkeur hebt voor de Engelse taal. Dit doe je als volgt: klik rechtsboven op je inlognaam, klik in het menu dat verschijnt op setting, verander Primary Language in “English”\n","description":"","tags":null,"title":"Khan Academy","uri":"/tools/khan/"},{"content":"Je gaat je eigen website maken!\nOpdrachtbeschrijving De opdracht in het kort is: Maak je eigen informatieve website over een zelfgekozen onderwerp. Je gebruikt de startcode met HTML en CSS.\nInschrijven Je schrijft je in via het onderstaande formulier dat de docent aanlevert (login met je google account van school voor toegang).\n4hin1 22/23 4hin2 22/23 4vin1 22/23 4vin2 22/23 Onderwerp kiezen Je bent vrij om zelf een onderwerp voor je website te bedenken. Je docent moet het onderwerp goedkeuren. Je kunt denken aan een hobby, sport, jouw favoriete lifestyle enzovoort. Misschien is het wel mogelijk om de website te gebruiken voor een schrijfopdracht voor een ander vak.\nWerkwijze Je maakt deze opdracht in je eentje. Je krijgt van de docent startcode voor deze opdracht. Deze staat klaar in een repo op GitHub. Je maakt code in Replit (havo) of Gitpod (vwo). Elke week (liefst vaker) sla je je tussentijdse werk op in de repo op GitHub. Zo zorg je ervoor dat de laatste werkende versie van je opdracht steeds op GitHub staat. Deze opdracht maak je alsof het een echt project is. De stappen uit README.md in de starterscode zijn de basis van je planning. De voortgang hou je wekelijks bij in README.md. Als het niet volgens je plan gaat, dan stuur je bij. In de les kun je hulp vragen, maar uiteindelijk moet jij zorgen dat je op tijd klaar bent en een goed project oplevert. Beoordeling Het cijfer dat je voor je PO krijgt wordt vanuit verschillende invalshoeken bepaald:\nminimale eisen uiterlijk techniek inzet en planning Minimale eisen\nVoordat je een cijfer krijgt voor je PO, wordt gekeken of je werk voldoet aan de minimale eisen. Werk dat niet voldoet aan de minimale eisen krijgt het cijfer 1,0. De minimale eisen zijn:\nDe inhoud van je webshop is moreel verantwoord: het is niet beledigend, visueel gewelddadig of op andere manieren onfatsoenlijk. Natuurlijk mag je overleggen met klasgenoten en mag je op internet kijken hoe je bepaalde dingen kunt maken. Let wel op dat je geen plagiaat pleegt. Je mag maximaal 5 regels code overnemen van andere leerlingen of internet en je schrijft in het commentaar erbij waar je het voorbeeld vandaan hebt. Dat geldt ook voor code die je zelf vertaalt naar het Nederlands. Overtypen van code uit een Youtube-video of een tutorial van internet volgen en dat resultaat inleveren is niet toegestaan. Je gebruikt de startcode die je krijgt. Je gebruikt het stappenplan dat bij deze opdracht gegeven is. Een download in zip-formaat van je opdracht mag maximaal 50 MB groot zijn. Vormgeving en inhoud Enkele punten waarop gelet kan worden bij de beoordeling van vormgeving en inhoud zijn\nDe website bestaat uit mimimaal 4 pagina’s. Uit de home-page (index.html) blijkt duidelijk wat er op je website te vinden is. De vormgeving ziet er aantrekkelijk uit en nodigt uit om verder te kijken op je website. De inhoud is compleet en informatief, de teksten heb je niet klakkeloos gekopieerd van een andere website. De website is goed te bekijken op gangbare browsers en computers met verschillende schermresoluties. Het is een pre als je website er op een telefoon ook goed uitziet. De uitlijning van de verschillende onderdelen op je website is netjes. Je respecteert auteursrecht, daar waar je voorbeelden of plaatjes van anderen gebruikt geef je tenminste in commentaar de bron aan. … Techniek Enkele punten waarop gelet kan worden bij de beoordeling van techniek zijn\nJe laat zien dat je de in de les aangereikte technieken begrijpt en op een nette manier kan toepassen, hierbij hoort zeker het gebruik van floats om een nette layout te maken. Je laat zien dat je in staat bent om zelf nieuwe dingen kunt toevoegen die voortbouwen op wat je al geleerd hebt. Alle code (HTML / CSS / JavaScript / …) is goed leesbaar en overzichtelijk. Je springt netjes in waar dat verwacht wordt. Je gebruikt duidelijk commentaar in HTML en CSS. CSS-klassen en ID’s hebben duidelijke en begrijpelijke namen. Er is geen ongebruikte code aanwezig. Je maakt gebruik van een nette mappen structuur, met logische bestandsnamen. Ongebruikte of oude bestanden zijn verwijderd. CSS bevindt zich niet in de HTML-pagina, maar in een los CSS-bestand. Je gebruikt één CSS-bestand voor je hele website. Met commentaar geef je aan welke delen eventueel paginaspecifiek zijn. Je linkt niet naar afbeeldingen op andere websites, alle afbeeldingen die je gebruikt heb je lokaal opgeslagen. Je afbeeldingen hebben een passende resolutie, zodat ze niet blokkerig zijn (te lage resolutie) of langzaam laden (te hoge resolutie). … Inzet en planning\nJe toont inzet tijdens de lessen De planning is vooraf gemaakt, gevolgd en als nodig bijgesteld. Het werk is verdeeld over de weken waarin aan de opdracht kon worden gewerkt, dit blijkt onder andere uit de commits in Github. Inleveren De deadline voor inleveren vind je in de lesplanner. Je kunt vragen stellen tot de laatste les voor de deadline. Je zorgt dat alle bestanden in die nodig zijn om je spel te spelen in GitHub staan, dit zijn ten minste: index.html, 3 .html bestanden voor de subpagina’s en style.css. Als je plaatjes gebruikt, dan staan die er ook bij. Uit de versie historie in GitHub blijkt wanneer je wat gedaan hebt. De laatste versie van je PO die op het moment van de deadline in GitHub staat, wordt gebruikt voor de beoordeling. Hulpmiddelen We gebruiken in deze opdracht de volgende tools:\nGitHub om je code op te slaan. Replit (havo) of Gitpod (vwo) om je code te bewerken en een voorbeeld van je website te bekijken. Startcode Als je van je docent je een kopie van de startcode hebt ontvangen, dan kun je aan de slag met de stappen uit het README.md bestand.\nStappenplan Werk de planning af van boven naar beneden.\nStap 1: Start Je hebt het onderwerp van je website gekozen en door je docent laten goedkeuren. Je hebt een account aangemaakt op www.github.com . Je hebt de voorbeeldwebsite van de docent gekopieerd naar je eigen github account. Je hebt het onderwerp in de kop op van je homepage gezet. Aan het einde van stap 1 heb je de voorbeeldwebsite van je docent waarin je zelf de kop hebt aangepast.\nStap 2: Menu en bestandsstructuur Je hebt bepaald wat je op de hoofdpagina en de subpagina’s (minimaal 3) wilt laten zien. Je past het menu in index.html aan, zodat het de keuzes biedt voor jouw subpagina’s Je maakt een html-bestand voor alle pagina’s. De titel en het menu staan erop, maar de inhoud nog niet. Je hebt een werkend menu waarmee je naar de verschillende pagina’s kunt gaan, de layout kun je later nog aanpassen en mooi maken. Aan het einde van stap 2 heb je een werkend menu met minimaal drie lege subpagina’s.\nStap 3: Indeling en opmaak hoofdpagina Let op: In deze stap ga je nog geen plaatjes zoeken en teksten maken, dat komt in de volgende stap.\nJe hebt de layout van je hoofdpagina bepaald. Leg de layout vast in een wireframe. Een wireframe is een tekening waarin elke box op je pagina als een rechthoek getekend is. Je hebt in html voor alle onderdelen uit de layout een tag opgenomen en aan de tags heb je classes toegevoegd. Je hebt met css ervoor gezorgd dat alle onderdelen op de juiste plaats op de pagina worden weergegeven. Je hebt opmaak zoals kleuren, lettertypen en kaders in css toegevoegd aan de onderdelen in je layout. Je kunt een wireframe bijvoorbeeld als volgt maken\nop https://draw.io in Powerpoint op papier en dan fotograferen (het is dan wel lastig om het netjes te doen) Aan het einde van stap 3 heb je een hoofdpagina met een goede indeling en opmaak. De tekst en de plaatjes zijn nog niet ingevuld, daarvoor gebruik je tijdelijk een willekeurige tekst of plaatjes zoals in de voorbeeldsite.\nStap 4: Plaatjes en tekst hoofdpagina Je hebt in html de tekst op je hoofdpagina gezet. Je hebt plaatjes bij je teksten gezocht, omgezet naar de juiste resolutie en op je website gezet. Alle plaatjes moet je opslaan, je linkt niet naar plaatjes op andere websites, die kunnen immers verwijderd worden. Aan het einde van stap 4 heb je een hoofdpagina met teksten en plaatjes.\nStap 5: Indeling en opmaak subpagina's Je hebt een layout en opmaak voor al je subpagina’s gemaakt. Het is handig om voor al je sub-pagina’s dezelfde lay-out en opmaak te gebruiken. Aan het einde van stap 5 heb je minimaal drie subpagina’s met een goede indeling en opmaak. De tekst en de plaatjes zijn nog niet ingevuld, daarvoor gebruik je tijdelijk een willekeurige tekst of plaatjes zoals in de voorbeeldsite.\nStap 6: Plaatjes en tekst subpagina's Je hebt de tekst en plaatjes voor al je subpagina’s gemaakt. Aan het einde van stap 6 heb je minimaal drie subpagina’s met teksten en plaatjes.\nStap 7: Perfectioneren Je hebt slordigheden in de lay-out, kleuren en inhoud gerepareerd. Je hebt gezorgd dat je HTML en CSS goed leesbaar zijn (geen herhaling, namen van classes die aangeven wat erin zit in plaats van hoe het eruit ziet, uit logische onderdelen opgebouwd, inclusief commentaar, …) Je hebt gecontroleerd of de lay-out werkt op een groter venster, een kleiner venster, een ander apparaat en andere browser. Aan het einde van stap 7 zijn alle kleine foutjes uit je website verdwenen.\nStap 8: Eye catchers Je hebt een aantal extra dingen toegevoegd die je website nog mooier maken. Denk bijvoorbeeld aan animaties met CSS, een responsive design (=website heeft een andere indeling op apparaten met een kleiner scherm), een fotogalerij, visuele effecten als je met je muis ergens overheen beweegt, vernieuwingen in het ontwerp van een gebruikte voorbeeldwebsite etc. Aan het einde van stap 8 heb je een perfecte website met één of enkele opvallende functies die je zelf hebt toegevoegd.\nStap 9: Uitbreidingen (niet verplicht) Kies de uitbreidingen die je leuk vindt en maak je website nog mooier\n… Uitlegvideo’s ","description":"","tags":null,"title":"O1. Website","uri":"/opdrachten/website/"},{"content":"Hier vind je de lesplanner, geplande toetsen en inlevermomenten, vakoverzicht en PTA’s per jaarlaag.\nLesplanner, toetsen en inlevermomenten 4 havo Hier vind je de lesplanner, geplande toetsen en inlevermomenten voor 4 havo.\n5 havo Hier vind je de lesplanner, geplande toetsen en inlevermomenten voor 5 havo.\n4 vwo Hier vind je de lesplanner, geplande toetsen en inlevermomenten voor 4 vwo.\n5 vwo Hier vind je de lesplanner, geplande toetsen en inlevermomenten voor 5 vwo.\n6 vwo Hier vind je de lesplanner, geplande toetsen en inlevermomenten voor 6 vwo.\nVakoverzicht PTA De leerlingen raden we aan om vooral te kijken naar het vakoverzicht en de toets- en inlevermomenten hierboven op deze web-pagina. Voor wie het echt wil weten, is hier een linkje naar ons PTA in Excel , zoals we dat jaarlijks aanleveren aan de school.\n","description":"","tags":null,"title":"Planning","uri":"/planning/"},{"content":"Je leert hoe je informatie op een website zet met de programmeertalen HTML en CSS.\nHulpmiddelen We gebruiken in deze module de volgende tools:\nKhan Academy Oefeningen Khanacademy, module Intro to HTML/CSS\nIntro to html Intro to css More html tags Css text properties Web development tools (geen toetsstof) CSS layout More css selectors Other ways to embed css (geen toetsstof) Further learning (geen toetsstof) Uitleg (havo) Uitleg (vwo) Leerdoelen voor de toets HTML\nJe kunt uitleggen wat een URL is en waarvoor een webbrowser deze gebruikt en je kent de volgende vier onderdelen van een URL: protocol, server, map, bestand Je kent het principe van tags zoals die in HTML gebruikt worden. Je kent de basisstructuur van een HTML-pagina. Je weet wat de begrippen parent, child en sibling betekenen en kunt de betekenis van deze begrippen toelichten. Je kunt deze begrippen toepassen op HTML. Je kent de volgende tags: \u003chtml\u003e, \u003chead\u003e, \u003cbody\u003e, \u003cp\u003e, \u003col\u003e, \u003cul\u003e, \u003cli\u003e, \u003ch1\u003e t/m \u003ch6\u003e, \u003cbr/\u003e, \u003cimg /\u003e, \u003cdiv\u003e. Je kunt uitleggen wat deze tags doen en hoe je kunt ze gebruiken. Je kunt eenvoudige stukken HTML interpreteren, dat wil zeggen dat je kunt uitleggen hoe een webbrowser omgaat met een eenvoudig stuk HTML. Je kunt wijzigingen aanbrengen in een eenvoudig stuk HTML, de syntax van de HTML tags die daarvoor nodig zijn wordt daarbij gegeven in de vraag. CSS\nJe kunt uitleggen wat er binnen de informatica met Separation of Concern wordt bedoeld en hoe dat op HTML en CSS van toepassing is. Je kunt uitleggen wat selectors, properties en values in CSS zijn en je kunt ermee werken. Dat wil zeggen dat je eenvoudige stukken CSS met selectors, properties en values kunt maken en de werking ervan kunt uitleggen. Je kunt CSS selectors maken die bestaan uit een tag, class of id of een combinatie daarvan. Je kent het verschil in selectiviteit tussen tags, classes en id’s, je kunt daarbij aangeven welke selectors meer of minder specifiek zijn. Je kent van de volgende properties de betekenis en kunt deze toepassen in CSS: font-size, width, height, color, background-color. Je kunt werken met kleuren en doorzichtigheid in CSS, door gebruik te maken van kleurnamen en rgba(). Je kunt de werking van boxen in CSS toelichten. Je kunt daarbij uitleggen wat de content, padding, border en margin van een box zijn. Je kunt eenvoudige stukken CSS interpreteren, dat wil zeggen dat je kunt uitleggen hoe een webbrowser omgaat met een eenvoudig stuk CSS en hoe het eruit ziet in een webbrowser. Je kunt wijzigingen aanbrengen in een eenvoudig stuk CSS, de properties die daarvoor nodig zijn worden beschreven in de vraag. Oefentoets Een oefentoets voor deze module staat in Woots .\n","description":"","tags":null,"title":"T1. Web Design met HTML en CSS","uri":"/theorie/webdesign/"},{"content":"Inleiding Tijdens het maken van je website zul je ongetwijfeld gemerkt hebben hoe gemakkelijk het is om informatie van andere webpagina’s over te nemen in die van jezelf. Het was vooraf bekend dat je voor de opdracht geen tekst mocht kopiëren zonder te citeren, maar wellicht heb je wel gebruik gemaakt van afbeeldingen, muziek, of HTML / javascript code.\nMaar mag dit eigenlijk wel? Dat hangt er vanaf. Hieronder zullen we een aantal aspecten van intellectueel eigendom behandelen die je zullen helpen met het beantwoorden van de vraag of je de informatie op je website rechtmatig hebt gebruikt. Daarnaast krijg je ook informatie over het gebruiken van afbeeldingen van mensen en (software)licenties.\nWat is intellectueel eigendom Intellectueel eigendom is eigenlijk iets vreemds. In de Nederlandse wet is eigendom beschermd. De spullen die jij in bezit hebt, mag een ander niet zomaar afnemen. Het is niet de bedoeling dat een medeleerling zomaar je mobiele telefoon uit je tas haalt omdat hij die wel kan gebruiken. Dan spreken we van diefstal. Maar hoe zit dit bij creatieve uitingen, of “voortbrengselen van de geest”? Mag iemand een leuk muzikaal thema uit een recent hiphop nummer gebruiken voor een eigen nummer? Mag iemand anders een werkstuk dat identiek is aan het jouwe uploaden op scholieren.com? De wetten voor de bescherming van intellectueel eigendom proberen ook dit te beschermen. Er zijn hiervoor talrijke nationale en internationale wetten.\nGeen auteursrecht voor dieren na uitspraak rechter VS in zaak selfie-aap “Dieren kunnen onder de Amerikaanse wet definitief geen aanspraak maken op het auteursrecht. Dat heeft een federale rechtbank van de Verenigde Staten bepaald in een uitspraak rond de ‘selfie-aap’.\nDe wilde kuifmakaak Naruto maakte in 2011 meerdere foto’s van zichzelf met een camera die was achtergelaten door fotograaf David Slater. Die beelden werden drie jaar later gepubliceerd in een boek, waarbij Slater zich het auteursrecht toe-eigende.\nDat leidde in 2015 tot een rechtszaak, die namens Naruto werd aangespannen door dierenrechtenorganisatie People for the Ethical Treatment of Animals (PETA). De organisatie beweerde dat de aap het auteursrecht op de selfies had. Een rechter ging daar echter niet in mee en stelde dat dieren geen auteursrecht kunnen bezitten. PETA ging vervolgens in beroep.”\nLees verder op nu.nl Auteursrecht In 1883 kwamen België, Duitsland, Frankrijk, Italië, Spanje, Tunesië, het Verenigd Koninkrijk en Zwitserland in Bern bij elkaar (Berner Conventie) om tot een eenduidig verdrag te komen om ook over grenzen heen het auteursrecht te beschermen. Tot dan toe waren er talloze verdragen tussen verschillende landen gesloten, maar dit werd onwerkbaar. Na verschillende conferenties kwam men in 1886 tot een verdrag dat op 5 december 1887 voor alle acht staten in werking zou treden. Deze landen vormden de Berner Unie. Een auteur uit de Berner Unie heeft in al deze landen automatisch het auteursrecht. Daar hoeven geen extra handelingen of claims voor worden gedaan. De verschillende landen zijn gebonden aan een minimum bescherming, maar mogen zelf hun wetgeving anders formuleren. Zo is in het verdrag opgenomen dat het auteursrecht pas na minimaal 50 jaare na de dood van de auteur (voor filmwerken na de publicatie) vervalt. In veel landen is dit echter langer. In Nederland wordt een periode van 70 jaar gehanteerd.\nOuders Nederlandse top-dj's willen dj-talenten beschermen “Managers die veel aan je verdienen en promotors die vooral zélf beter worden van succes van een ander: de dancewereld is een miljoenenbusiness en daar willen veel mensen een graantje van meepikken. Daar gaat het vaak mis, merken ouders van dj’s die op jonge leeftijd doorbraken.\nZij komen nu met de Dutch DJ Foundation (DDJF). Zo willen ze de belangen behartigen van Nederlandse dj’s en producers.”\nLees verder op nos.nl Steeds meer landen werden lid van deze Unie, waaronder Nederland in 1912. Opvallend is dat bijvoorbeeld de Verenigde Staten pas in 1989 lid werden. Dat verklaart ook (deels) waarom in de V.S. vaak zulke uitvoerige copyright claims in publicaties staan.\nHet auteursrecht is in Nederland zo geformuleerd:\n“Het auteursrecht is het uitsluitend recht van den maker van een werk van letterkunde, wetenschap of kunst, of van diens rechtverkrijgenden, om dit openbaar te maken en te verveelvoudigen, behoudens de beperkingen, bij de wet gesteld.”\nEr zijn echter situaties waarin anderen wel of gedeeltelijk zo’n werk mogen verveelvoudigen of publiceren. Zo mag berichtgeving van nieuws en actualiteiten door andere nieuwsmedia vrij worden gebruikt, mits men de bron vermeldt. Een ander geval is het citeren. Voor een citaat geldt dat het een ondergeschikte rol vervult in het werk waarin het geciteerd wordt en dat de bron vermeld moet worden. Interessant is de zogenaamde thuiskopie. Een kopie maken voor jezelf van een werk om te kunnen oefenen, studeren of gebruiken is in Nederland toegestaan. Nederlandse auteurs krijgen hiervoor een kleine compensatie via de zogenoemde thuiskopieheffing: een klein bedrag dat geheven wordt op gegevensdragers, zoals harddisks, lege DVD’s, USB sticks, etc. Zo’n kopie is uitsluitend voor eigen gebruik. Je mag deze niet aan anderen geven. Tot voor kort viel het illegaal downloaden van software, muziek, films, etc. onder dit artikel. Het uploaden (=verspreiden onder derden) was wel strafbaar, het downloaden (=maken van een kopie) echter niet. Sinds een uitspraak van het Europees Hof op 10 april 2014 is dit illegaal downloaden ook in Nederland strafbaar geworden. Het hof vond de thuiskopieheffing niet toereikend voor compensatie.\nHet is mogelijk om de auteursrechten over de dragen. Dit wordt vaak gedaan in de muziek- en boekenbranche. De auteurs verleent bijvoorbeeld aan de producer of uitgever de exclusieve rechten om het boek te verspreiden. De auteurs krijgen hiervoor een vergoeding. Ook dan mag een producer of uitgever niet met het werk doen wat men maar wil. Er blijft sprake van ‘persoonlijkheidsrechten’. Een auteur mag dan bijvoorbeeld bezwaar maken tegen een publicatie omdat zijn / haar naam niet wordt vermeld, het gebruikt wordt in een context waarvoor de auteur het niet heeft bedoeld of omdat er door de betreffende publicatie niet het nodige respect wordt getoond voor het werk.\nPortretrecht Naast auteursrecht kennen we ook het portretrecht. Dit portretrecht houdt in dat men niet zomaar beeldmateriaal mag verspreiden indien hierop anderen op te herkennen zijn. In bepaalde gevallen is hiervoor toestemming nodig van de geportretteerde(n).\nIn het portretrecht is een ‘portret’ breder dan wat men er in bijvoorbeeld de schilderkunst of fotografie mee bedoelt. Van een portret is sprake wanneer men iemand kan herkennen. Dit kan zijn door middel van het gezicht, maar ook gelaatstrekken, een specifieke lichaamshouding, attributen of de omgeving spelen hierbij mee. Als je de identiteit van iemand uit het afgebeelde kunt achterhalen, is er in de wetgeving sprake van een portret.\nHet maakt uit of een portret wel of niet in opdracht is gemaakt. Een fotograaf kan een reportage van iemand maken. Dan is er sprake van een opdracht. Een journalist kan een foto maken van een winkelstraat. Daarop staan mogelijk ook mensen afgebeeld die op dat moment in die straat liepen. In het portretrecht wordt verschil gemaakt voor deze twee verschillende redenen.\nEen portret in opdracht Als een portret in opdracht is gemaakt, geldt het volgende. De maker van het portret bezit het auteursrecht van zijn / haar creatie. Publicatie mag echter alleen indien de maker hiervoor toestemming van de geportretteerde heeft. Degene die afgebeeld is, mag voor zichzelf en vrienden / familie een aantal kopieën maken. Ook mag hij / zij het portret beperkt in publicaties opnemen (zoals een portfolio van een model), zolang er maar bij vermeld wordt wie de maker ervan is. Commerciële publicatie mag alleen als ook de auteur hiervoor toestemming geeft.\nSamengevat: de geportretteerde mag heel beperkt en onder voorwaarden kopieën maken of publiceren. Voor breder gebruik door de auteur, de geportretteerde of anderen is altijd toestemming van zowel de auteur als de geportretteerde nodig.\nEen portret niet in opdracht Een portret dat niet in opdracht is gemaakt, mag in principe vrij worden gepubliceerd. Het kan echter zo zijn dat een afgebeeld persoon een ‘redelijk belang’ heeft om dit niet gepubliceerd te willen hebben. Dit kan bijvoorbeeld gaan om schending van privacy of omdat het beeldmateriaal iets suggereert wat niet het geval is. Ook kan het gaan om een financieel belang. Een popster verdient vaak aan producten waar zijn of haar portret op staat. Je kunt je voorstellen dat het niet is toestaan om zelf tijdens een concert een mooie foto te maken en zelf bijvoorbeeld t-shirts mee laat bedrukken.\nHet wordt anders wanneer het niet om een incidentele foto of video in de openbare ruimte gaat, maar om een foto of video gemaakt met een ‘aangebrachte’ camera. Je mag dus niet zomaar videocamera’s in de openbare ruimte ophangen. In dat geval moet je dit duidelijk vooraf aankondigen. Evenzo is iedere vorm van filmen of fotograferen in huizen of andere niet-publieke ruimtes verboden, tenzij dit vooraf duidelijk is aangekondigd.\nSoftware licenties De rechten voor software vallen voor een deel samen met het auteursrecht. Je mag dit niet zomaar vermenigvuldigen, verspreiden of openbaar maken. Je moet hiervoor een vergunning hebben, een licentie. Je kunt software niet gebruiken zonder (stilzwijgend) akkoord te zijn met de licentie. Er zijn verschillende soorten licenties om software te mogen gebruiken. Hieronder worden de meest gebruikte kort behandeld:\nCommercieel Voor commerciële software moet vooraf worden betaald. Met deze betaling krijg je het recht om de software op een vooraf bepaald aantal apparaten te installeren. Soms geldt deze licentie voor een bepaalde tijd en zul je na het verstrijken van deze periode opnieuw een licentie moeten kopen. Voorbeelden van software met deze licenties zijn Microsoft Office en Adobe Creative Cloud. Ook de meeste betaalde apps uit de app stores van Apple en Google maken gebruik van deze licentie.\nShareware Shareware mag je kopiëren en verspreiden zonder dat je er zelf iets aan verdient. Je mag het programma proberen, vaak voor een vaststaande tijd. Gebruik je deze software echter vaker, dan dien je hiervoor te betalen. Vaak zie je dat bepaalde functies niet werken totdat er een licentie is aangeschaft. Vóór de jaren ’90 was shareware software een aparte categorie. Langzaamaan zijn de verschillen met commerciële software steeds verder vervaagd. Veel apps die je nu in de app stores tegenkomt, zouden vroeger waarschijnlijk shareware zijn geweest.\nFreeware Software waarvoor de auteur een licentie verleent voor gebruik en verspreiding, heet freeware. Het is wel belangrijk om te beseffen dat de software alleen ongewijzigd mag worden verspreid. Anderen mogen er dus geen aanpassingen aan doen en vervolgens verspreiden. Een voorbeeld van freeware is Skype.\nOpen Source Open Source software heeft een licentie die ook de mogelijkheid geeft om de software aan te passen. De broncode van open source software is vrij beschikbaar en voor iedereen aan te passen. Men mag bijvoorbeeld een eigen ‘versie’ of smaak maken (dit heet een fork) en publiek maken. Er zijn heel veel open source licenties. De grootste verschillen zijn: Sommige licenties vereisen dat de aangepaste software ook de broncode openbaar moet maken Sommige licenties vereisen dat aangepaste software exact dezelfde licentie moet hanteren als de broncode waar vanaf de fork gemaakt is. Sommige licenties staan toe dat er verdient mag worden met aangepast software, andere niet. Sommige licenties staan toe dat er een tweede andere licentie aan de fork wordt verbonden, andere niet.\nTegenbewegingen Open source software is in sommige gevallen ontstaan vanuit onvrede met de beperkingen uit het auteursrecht. In bepaalde gevallen kunnen deze vooruitgang hinderen, wat sommige mensen erg vervelend vinden.\nVoor andere werken, zoals tekst, muziek en afbeeldingen is er vanuit een Amerikaans project een aantal licenties geformuleerd om meer meer duidelijkheid te geven over waarvoor materiaal gebruikt mag worden. Dit project heet Creative Commons. Bij een foto die je publiceert kun je aangeven welke CC licentie hierop van toepassing is. Ook is het gemakkelijk om zo te weten te komen of je een foto met een bepaalde CC licentie kunt gebruiken voor je website.\nEen CC-licentie wordt opgebouwd uit vier bouwstenen. Dit zijn de voorwaarden waaronder anderen gebruik mogen maken van jouw werk. De bouwstenen zijn:\nNaamsvermelding - Je staat anderen toe om het werk waar jij auteursrecht op hebt te kopiëren, distribueren, vertonen, en op te voeren, en om afgeleid materiaal te maken dat op jouw werk gebaseerd is – maar uitsluitend als jij vermeld wordt als maker.\nNiet-commercieel - Anderen mogen je werk kopiëren, vertonen, distribueren en opvoeren, alsmede materiaal wat op jouw werk gebaseerd is, mits niet voor commerciële doeleinden.\nGeenAfgeleideWerken - Anderen mogen je werk kopiëren, distribueren, vertonen en opvoeren mits het werk in de originele staat blijft. Het is niet toegestaan dat anderen jouw werk gebruiken als basis voor nieuw materiaal.\nGelijkDelen - Je staat anderen toe om van jouw werk afgeleid materiaal te maken onder de voorwaarde dat zij het onder dezelfde licentie vrijgeven als het originele werk.\nMet deze vier bouwstenen heeft men zes verschillende licenties gemaakt, waarbij het uitgangspunt is dat je altijd de naam van de originele auteur vermeldt:\nNaamsvermelding Naamsvermelding-GelijkDelen Naamsvermelding-NietCommercieel Naamsvermelding-NietCommercieel-GelijkDelen Naamsvermelding-GeenAfgeleideWerken Naamsvermelding-NietCommercieel-GeenAfgeleideWerken En mijn website? Of je materiaal legaal hebt gebruikt op je website hangt dus van heel veel factoren af. Wil je andermans materiaal gebruiken, dan zul je moeten achterhalen op welke manier de auteur het beschikbaar stelt. Soms is dat via een voor iedereen te gebruiken licentie. Het kan ook zijn dat je een auteur expliciet om toestemming zult moeten vragen of een licentie moeten kopen. In een aantal gevallen is de wetgeving zo geregeld dat je materiaal mag publiceren, zoals bij een zelf genomen foto van een winkelstraat of shots van een fotoshoot waar jij op staat. Er zijn hiervoor ook meteen beperkingen geformuleerd, waardoor je goed moet beseffen of je binnen de regels handelt.\n","description":"","tags":null,"title":"T1a. Intellectueel eigendom","uri":"/theorie/webdesign_auteursrecht/"},{"content":"Hier vind je de lesplanner, geplande toetsen en inlevermomenten voor 5 havo.\nLesplanner Het is vandaag .\nWeek Theorie+Praktijk (les 1) Praktijk (les 2) 34 intro 35 T6 Arduinolessen gestart T6 Arduinolessen 1. Knipperende led + 2. Knipperende led op breadboard 36 T6 Uitleg breadboard, led, gedimd led T6 Arduinolessen 3. Fadende led op breadboard met PWM 37 T6 Uitleg microcontrollers potmeter, knop, samenvatting T6 Arduinolessen 4. Knippersnelheid regelen met potmeter 38 T6 Uitleg toestandsdiagrammen deel 1 T6 Arduinolessen 5. LED schakelen met drukknop 39 T6 Uitleg toestandsdiagrammen deel 2 T6 Toestandsdiagrammen Oefening 40 O4-Robot Stap 1 starten O4-Robot Stap 1 starten 41 O4-Robot Stap 2 toestandsdiagram O4-Robot Stap 2 toestandsdiagram 42 O4-Robot Stap 3 code O4-Robot Stap 3 code 43 Herfstvakantie 44 O4-Robot Stap 4 uitbreidingen O4-Robot Stap 4 uitbreidingen 45 O4-Robot Stap 5 video en inleveren PO 5H-IN-S08 robot inleveren Stap 5 video en inleveren 46 TW1: Toets 5H-IN-S06 over T6 Robotica 47 TW1 48 T5 Databases Uitleg: SELECT WHERE T5 Databases Oefening: Khan 1 SQL Basics 49 T5 Databases Uitleg: GROUP BY T5 Databases Oefening: Khan 2 More advanced SQL-queries 50 T5 Databases Uitleg: JOIN 1:N T5 Databases Oefening: Khan 1e helft van 3 Relational Queries 51 T5 Databases Uitleg: JOIN N:M T5 Databases Oefening: Khan 2e helft van 3 Relational Queries 52 Kerstvakantie 1 Kerstvakantie 2 T5 Oefentoets 1e helft T5 Oefentoets 2e helft 3 O3 Webshop Intekenen + uitleg hoofdlijnen O3 Webshop Repo ontvangen + Stap 1 4 O3 Webshop Stap 2 DB O3 Webshop Stap 2 DB 5 O3 Webshop Stap 2 DB O3 Webshop Stap 2 DB 6 O3 Webshop Stap 3 API O3 Webshop Stap 3 API 7 O3 Webshop Stap 4 Web PO 5H-IN-S08 webshop inleveren 8 herhaling: T5 Databases queries met 1 tabel herhaling: T5 Databases queries met 1 tabel 9 Voorjaarsvakantie 10 herhaling: T5 Databases queries met meerdere tabellen herhaling: T5 Databases queries met meerdere tabellen 11 TW2: Toets 5H-IN-S07 over T5 Databases 12 TW2 13 wel les, herhaling voor herkansing wel les, herhaling voor herkansing 14 wel les, herhaling voor herkansing informatica afgerond 15 wel les, herhaling voor andere vakken wel les, herhaling voor andere vakken 16 wel les, herhaling voor andere vakken wel les, herhaling voor andere vakken 17 meivakantie 18 meivakantie examencijfer informatica bekend 19 CE geen CE voor informatica Toetsen en inlevermomenten Datum Code Toetsvorm Stof Toetsweek 1 5H-IN-S06 Digitale toets T6 Robotica Zondag 13 nov 23:59 5H-IN-S08 Praktische Opdracht O4 Robot Zondag 19 feb 23:59 5H-IN-S09 Praktische Opdracht O3 Webshop Toetsweek 2 5H-IN-S07 Digitale toets T5 Databases Advies voor inleveren van Praktische Opdrachten: Lever een bijna af concept in vóór de laatste les voor de deadline, als er dan iets misgaat dan kun je nog een vraag stellen in de laatste les!\n","description":"","tags":null,"title":"5 havo","uri":"/planning/5h/"},{"content":"Informatica Actief is de lesmethode voor informatica die wij gebruiken. Wij gebruiken enkele modules uit de methode.\nDe eerste keer inloggen op Informatica Actief Start je browser (Chrome werkt het best) en ga naar https://www.informatica-actief.nl/ De volgende stappen zijn een grove beschrijving, die we later nog uitwerken:\nKlik op “login”. Klik op aanmelden via Entree. Je kunt je magister inloggegevens gebruiken om in te loggen. Als er gevraagd wordt om een mailadres, gebruik dan je schoolmail. Je krijgt een bevestingsmail met een link waar je op moet klikken. Log opnieuw in op de pagina waar de link je naartoe brengt. Klik linksboven op het IA icoontje, je komt dan terug op de home page van de site. Voer rechts de voucher code in, inclusief de streepjes. Deze code krijg je van je docent. Je moet die voucher code elk jaar vernieuwen, anders wordt de site afgesloten. Kies de module die we gebruiken. Letop: we doen niet alle onderdelen van een module, kijk in de lesstof welke onderdelen bij de stof horen. De volgende keer inloggen op Informatica Actief Start je browser (Chrome werkt het best) en ga naar https://www.informatica-actief.nl/ Klik op “login”. Klik op aanmelden via Entree. Je kunt je magister inloggegevens gebruiken om in te loggen. Kies de module die we gebruiken. Je kunt ook de links gebruiken op diverse plaatsen op de informatica-website. Die brengen je gelijk naar de goede plek.\nQ\u0026A Mijn voucher code werkt niet Let op het verschil tussen 0 (cijfer nul) en O (hoofdletter oo) en let op het verschil tussen l (kleine letter l) en 1 (cijfer één).\n","description":"","tags":null,"title":"Informatica Actief","uri":"/tools/ia/"},{"content":"Je gaat je eigen game programmeren!\nOpdrachtbeschrijving De opdracht in het kort is: Maak in groepjes van twee je eigen spel in JavaScript. Je gebruikt de startcode en maakt gebruik van de p5js-library.\nInschrijven Je schrijft je in via het onderstaande formulier dat de docent aanlevert (login met je schoolmail voor toegang).\n4Hin1 GEE woensdag 4e en 5e uur 22/23 4Hin2 GEE woensdag 8e en 9e uur 22/23 4Vin1 CAM 22/23 4Vin2 GEE 22/23 Game kiezen Je bent vrij om zelf te kiezen welke game je gaat maken. Je docent moet de game die je kiest goedkeuren. Enkele voorbeelden van een game die je kunt maken zijn: Tennis, Flappy Bird, Snake (voorganger van Slither.io), een Break Out Game (zoals Arkanoid), een race spelletje, een eenvoudige platform game (zoals pacman), een puzzelspel enzovoort.\nWerkwijze Je maakt deze opdracht in een team van twee personen. De docent geeft aan hoe de teams gemaakt worden. Je bepaalt zelf hoe je het werk binnen je team verdeelt, zolang iedereen een gelijkwaardige bijdrage levert. Je krijgt één cijfer per team, maar de docent kan hiervan afwijken als teamleden geen gelijkwaardige bijdrage hebben geleverd. Je krijgt van de docent startcode voor deze opdracht. Deze staat klaar in een repo op GitHub. Er is één repo per team. Je maakt code in Replit (havo) of Gitpod (vwo). Elk teamlid heeft zijn eigen Replit of Gitpod omgeving. Elke week (liefst vaker) slaan alle teamleden hun tussentijdse werk op in de repo op GitHub. Zo zorgen jullie ervoor dat de laatste werkende versie van jullie opdracht steeds op GitHub staat. Deze opdracht maak je alsof het een echt project is. Je maakt eerst een planning. Daarna kijk je wekelijks of je nog volgens plan loopt. Als je niet volgens plan loopt, dan stuur je bij. In de les word je hiermee geholpen, maar uiteindelijk moet jij zorgen dat je op tijd klaar bent en een goed resultaat oplevert. Beoordeling Het cijfer dat je voor je PO krijgt wordt vanuit verschillende invalshoeken bepaald:\nMinimale eisen\nVoordat je een cijfer krijgt voor je PO, wordt gekeken of je werk voldoet aan de minimale eisen. Werk dat niet voldoet aan de minimale eisen krijgt het cijfer 1,0. De minimale eisen zijn:\nDe inhoud is moreel verantwoord: het is niet beledigend, visueel gewelddadig of op andere manieren onfatsoenlijk. Natuurlijk mag je overleggen met klasgenoten en mag je op internet kijken hoe je bepaalde dingen kunt maken. Let wel op dat je geen plagiaat pleegt. Je mag maximaal 5 regels code overnemen van andere leerlingen of internet en je schrijft in het commentaar erbij waar je het voorbeeld vandaan hebt. Dat geldt ook voor code die je zelf vertaalt naar het Nederlands. Overtypen van code uit een Youtube-video of een tutorial van internet volgen en dat resultaat inleveren is niet toegestaan. Je gebruikt de startcode die je krijgt. Je gebruikt het stappenplan dat bij deze opdracht gegeven is. Een download in zip-formaat van je opdracht mag maximaal 50 MB groot zijn. Werking en aantrekkelijkheid\nSpel start op Het spel werkt (hoe klein ook) Behaalde punten zijn zichtbaar bij game-over Het doel en de bediening van het spel is duidelijk Aantrekkelijk uiterlijk Prettige bediening Eenvoudig om mee te beginnen en moeilijker als je verder komt Afwisselend Techniek\nDe code volgt de lijn van het template De code is netjes en duidelijk leesbaar De code bevat geen dubbele stukken code Je hebt de technieken gebruikt die in de programmeerlessen zijn aangeboden. Je hebt dingen toegevoegd waarvan je zelf hebt uitgezocht hoe ze werken Inzet, planning en samenwerking\nJe toont inzet tijdens de lessen De planning is vooraf gemaakt, gevolgd en als nodig bijgesteld. De taakverdeling is duidelijk en alle teamleden dragen in gelijke mate bij. Het werk is verdeeld over de weken waarin aan de opdracht kon worden gewerkt, dit blijkt onder andere uit de commits in Github. Inleveren De deadline voor inleveren vind je in de lesplanner. Je kunt vragen stellen tot de laatste les voor de deadline. Je zorgt dat alle bestanden in die nodig zijn om je spel te spelen in GitHub staan, dit zijn ten minste: index.html, style.css en script.js. Als je plaatjes gebruikt, dan staan die er ook bij. Uit de versie historie in GitHub blijkt wanneer je wat gedaan hebt. De laatste versie van je PO die op het moment van de deadline in GitHub staat, wordt gebruikt voor de beoordeling. Hulpmiddelen We gebruiken in deze opdracht de volgende tools:\nGitHub Replit (havo) Gitpod (vwo) Startcode Je krijgt van de docent een kopie van onderstaande startcode. Stappenplan Werk de planning af van boven naar beneden. Vul de planning aan en stel bij terwijl je aan de opdracht werkt.\nStap 1: uitleg, spelen, afgaan en punten maak index.html, style.css en script.js met canvas teken speler Zet je code in de functie tekenAlles() beweeg speler Zet je code in de functie beweegAlles() Kies de afmeting van speler Gebruik variabalen spelerX en spelerY als middelpunt van de speler teken je tegenspeler (vijanden of dingen die je moet pakken of doelen of …) beweeg je tegenspeler detecteer botsing zorg dat je af kunt gaan zorg dat je punten kunt halen een simpele manier om punten te geven is de tijd meten hoe lang je het volhoudt zet punten op het scherm maak uitlegscherm en game-overscherm Stap 2: bijvoorbeeld schieten of springen zelf uitwerken… zelf uitwerken… zelf uitwerken… Stap 3: bijvoorbeeld meer tegenstanders zelf uitwerken… zelf uitwerken… zelf uitwerken… Stap x: meer voorbeelden voor uitbreidingen Gebruik plaatjes voor de vijanden Animeer speler Laat badges vallen die extra’s aan speler geven Maak spel steeds moeilijker door toenemend aantal vijanden met tekenVijand Maak andere vijanden bij toenemen tekenVijand Laat vijanden bewegen in patronen Maak bediening met touch of bewegen van telefoon mogelijk (zorg dat toetsenbordbediening ook blijft werken) of bedenk zelf iets… Uitlegvideo’s ","description":"","tags":null,"title":"O2. Game","uri":"/opdrachten/game/"},{"content":"Je leert hoe een computer allerlei soorten informatie opslaat.\nHulpmiddelen We gebruiken in deze module de volgende tools:\nInformatica Actief Oefeningen Informatica Actief, module informatie digitaal\nDigitale afbeeldingen, pixels met kleur (alleen theorie 1 t/m 7) Bits en Bytes (alleen theorie 1 t/m 5) Talstelsels: decimale en binaire getallen (alleen theorie 1 t/m 9) Rekenen met binaire getallen (overslaan) Digitale tekst (alleen theorie 1 t/m 9) Verschillende soorten afbeeldingen (alleen theorie 1 t/m 12) Bewegend beeld en geluid (alleen theorie 1 t/m 7) Digitale informatie in bestanden (alleen theorie 1 t/m 5) Diagnostische toets (overslaan) Beeldbewerking\nBeeldbewerking oefeningen (powerpoint presentatie) met photopea.com Uitleg (havo) Uitleg (vwo) Leerdoelen voor de toets Informatie digitaal\nJe kunt binaire getallen omzet naar decimale getallen en andersom. Je kunt binaire getallen omzet naar hexadecimale getallen en andersom. Je kunt decimale getallen omzet naar hexadecimale getallen en andersom. Je kunt uitrekenen uit hoeveel bits of bytes een kilobyte, megabyte, gigabyte of terabyte bestaat. Je kunt uitleggen waarin de klassieke maten van kilo-, mega, gigabyte etc. afwijken van de SI-maten. Je weet wat het verschil is tussen ASCII en Unicode en kunt uitleggen hoe ze tekst digitaliseren. Je kunt uitleggen hoe het RGB-kleurenmodel en het CMYK-kleurenmodel werken, je kunt de verschillen tussen beide kleurenmodellen benoemen en je kunt de modellen gebruiken om kleuren te maken en kleuren te veranderen. Je kent de betekenis van het begrip resolutie Je kunt uitleggen hoe plaatjes worden opgeslagen door een computer Je kent verschillende bestandsformaten voor plaatjes, zoals bmp, gif, jpg en png en de eigenschappen waarin ze van elkaar verschillen Je kunt aangeven welk bestandformaat voor plaatjes het best geschikt is voor een beschreven situatie Je kunt uitleggen hoe muziek wordt opgeslagen door een computer Je kunt uitleggen hoe video wordt opgeslagen door een computer Je kunt uitleggen wat een extensie is en waar deze voor dient Je kunt uitleggen wat compressie is aan de hand van voorbeelden (tekst, geluid, plaatjes en video) en je kent het verschil tussen lossless en niet-lossless compressie. Alleen vwo: Je kunt op basis van een beschrijving van een compressie algortime een klein voorbeeld comprimeren en decomprimeren. Beeldbewerking\nJe kunt het aantal pixels van een plaatje aanpassen Je kunt een plaatje bijsnijden (Engels: crop) Je kunt een plaatje in diverse bestand-formaten omzetten (bijvoorbeeld .jpg, .png, .gif) Je kunt basisinstellingen van de kleuren in een plaatje aanpassen (bijvoorbeeld contrast) Je kunt de achtergrond van een plaatje transparant maken, een vast kleur maken, vervangen door een ander plaatje. Je begrijpt wat je kunt doen met lagen en je kunt dat uitleggen aan de hand van een gegeven situatie. Oefentoets Een oefentoets voor deze module staat in Woots .\n","description":"","tags":null,"title":"T2. Digitale informatie","uri":"/theorie/informatie/"},{"content":"Hier vind je alle theorie per module.\nTheorie modules T1. Web Design met HTML en CSS Je leert hoe je informatie op een website zet met de programmeertalen HTML en CSS.\nT2. Digitale informatie Je leert hoe een computer allerlei soorten informatie opslaat.\nT3. Programmeren met Javascript Je leert hoe je eenvoudige programma’s kunt maken met de programmeertaal Javascript en de p5js library.\nT4. Algoritmen in Javascript Je leert hoe je problemen kunt oplossen met algoritmen, je gebruikt daarbij stroomdiagrammen en de programmeertaal Javascript.\nT5. Databases met SQL Je leert hoe je heel veel informatie kunt bekijken en bewaren in databases met de programmeertaal SQL.\nT6. Robotica met Arduino Je leert hoe je met behulp van toestandsgrammen kunt programmeren. Je gebruikt daarbij het Arduino platform.\nT7. Netwerken met IP Je leert hoe het internet van binnen werkt.\nT8. Objectgeoriënteerd Programmeren Je leert objectgeoriënteerd programmeren. Dat is een manier van programmeren waarbij data en logica gebundeld zijn in objecten. We leren dit voor zowel JavaScript als C++.\nT9. Security Over de beveiliging van computers en data.\n","description":"","tags":null,"title":"Theorie","uri":"/theorie/"},{"content":"Hier vind je de lesplanner, geplande toetsen en inlevermomenten voor 4 vwo.\nLesplanner Het is vandaag .\nWeek Theorie (enkel uur) Praktijk (blokuur) Week Les 1 theorie Les 2+3 praktijk 34 intro 35 T1 Web Design Uitleg: HTML tags T1 Web Design Oefening: Khan 1 Intro to HTML + 2 Intro to CSS 36 T1 Web Design Uitleg: CSS selectors en properties T1 Web Design Oefening: Khan 3. More HTML tags + 4 CSS text properties 37 T1 Web Design Uitleg: boxmodel T1 Web Design Oefening: Khan 5 Web development tools + 6 CSS layout 38 T1 Web Design Uitleg: floats T1 Web Design Oefening: Khan 7 More CSS selectors + 8 Other ways to embed CSS + 9 Further learning 39 T1 Web Design Uitleg: eye catchers T1 Web Design Oefentoets in Woots maken 40 T2 Informatie Uitleg: bits BIN en HEX O1 Website stap 1 eerste wijziging gemaakt 41 T2 Informatie Uitleg: rekenen en tekst O1 Website stap 2 menu + lege pagina’s 42 T2 Informatie Uitleg: kleuren en plaatjes O1 Website stap 3 layout hoofdpagina 43 Herfstvakantie 44 T2 Informatie Oefening: IA gestart O1 Website stap 4 inhoud en plaatjes hoofdpagina 45 T2 Informatie Oefening: IA 1+2+3+4 O1 Website stap 5 layout subpagina’s 46 TW1: Toets 4V-IN-S01 over T1 Web Design 47 TW1 48 T2 Informatie Uitleg: geluid + video O1 Website stap 6 inhoud en plaatjes subpagina’s 49 T2 Informatie Uitleg: compressie + bestanden O1 Website stap 7 kleuren 50 T2 Informatie Oefening: IA 5+6+7+8 O1 Website stap 8 perfectioneren 51 T2 Informatie Oefening: Beeldbewerking O1 Website stap 9 eyecathers 52 Kerstvakantie 1 Kerstvakantie 2 T2 Informatie Oefening: Beeldbewerking PO 4V-IN-S04 website inleveren 3 T3 Programmeren Uitleg: programmeertalen + P5JS T3 Oefening Khan t/m 5 Animation basics 4 T3 Programmeren Uitleg: variabelen T3 Oefening Khan t/m 10 Functions 5 T3 Programmeren Uitleg: functies T3 Oefening Khan t/m 11 Logic and if statements 6 T3 Programmeren Uitleg: logica en if T3 Oefening Khan t/m 13 Loopings 7 T3 Programmeren Uitleg: loops (les) arrays (thuis kijken) T3 Oefening Khan t/m 15 Arrays 8 Uitloop Uitloop 9 Voorjaarsvakantie 10 T4 Algoritmen Uitleg: stroomdiagrammen O2 Game eerste wijziging gemaakt 11 TW2: Toets 4V-IN-S02 over T2 Informatie 12 TW2 13 T4 Algoritmen Uitleg: lijsten O2 Game speler beweegt 14 T4 Algoritmen Uitleg: nesten O2 Game vijand 15 T4 Algoritmen Oefenen: eenvoudige algoritmen t/m 2 O2 Game botsingdetectie + afgaan 16 T4 Algoritmen Oefenen: eenvoudige algoritmen t/m 4 O2 Game punten + gameoverscherm 17 meivakantie 18 meivakantie 19 T4 Algoritmen Oefenen: eenvoudige algoritmen t/m 6 O2 Game uitlegscherm (je hebt nu een speelbaar spel) 20 T4 Algoritmen Oefenen: eenvoudige algoritmen t/m 8 O2 Game werk aan uitbreiding 1 21 T4 Algoritmen Oefenen: eenvoudige algoritmen t/m 10 O2 Game werk aan uitbreiding 1 22 T4 Algoritmen Uitleg: bubble sort (geen leerdoel) O2 Game uitbreiding 1 af 23 T4 Algoritmen Uitleg: kortste pad (geen leerdoel) PO 4V-IN-S05 game inleveren 24 nog niet bepaald nog niet bepaald 25 TW3: Toets 4V-IN-S03 over T3 Programmeren + T4 Algoritmen 26 TW3 27 Zomervakantie Toetsen en inlevermomenten Datum Code Toetsvorm Stof Toetsweek 1 4V-IN-S01 Digitale toets T1 Web Design Zondag 15 jan 23:59 4V-IN-S04 Praktische Opdracht O1 Website Toetsweek 2 4V-IN-S02 Digitale toets T2 Digitale Informatie Zondag 11 jun 23:59 4V-IN-S05 Praktische Opdracht O2 Game Toetsweek 3 4V-IN-S03 Digitale Toets T3 Programmeren + T4 Algoritmen Advies voor inleveren van Praktische Opdrachten: Lever een bijna af concept in vóór de laatste les voor de deadline, als er dan iets misgaat dan kun je nog een vraag stellen in de laatste les!\n","description":"","tags":null,"title":"4 vwo","uri":"/planning/4v/"},{"content":"Je gaat je eigen webshop maken!\nOpdrachtbeschrijving De opdracht in het kort is: Maak in groepjes van twee of drie je eigen webshop. Je gebruikt de startcode en breidt de database uit met jouw producten. De api en het website deel pas je aan waar dat nodig is.\nInschrijven Je schrijft je in via het onderstaande formulier dat de docent aanlevert (login met je schoolmail voor toegang).\n5V GEE 22/23 5V CAM 22/23 5Hin1 GEE 22/23 5Hin2 GEE 22/23 Kies wat je gaat verkopen Je bent vrij om zelf te kiezen wat je in je webshop gaat verkopen. Je docent moet goedkeuren wat je verkoopt. Je kunt denken aan kleding, producten die te maken hebben met je idool, zelfgemaakte sieraden, tweedehandsspullen enzovoort. Het hoeven niet persé bestaande producten te zijn.\nWerkwijze Je maakt deze opdracht in een team van twee personen. De docent geeft aan hoe de teams gemaakt worden. Je bepaalt zelf hoe je het werk binnen je team verdeelt, zolang iedereen een gelijkwaardige bijdrage levert. Je krijgt één cijfer per team, maar de docent kan hiervan afwijken als teamleden geen gelijkwaardige bijdrage hebben geleverd. Je krijgt van de docent startcode voor deze opdracht. Deze staat klaar in een repo op GitHub. Er is één repo per team. Je maakt code in Replit (havo) of Gitpod (vwo). Elk teamlid heeft zijn eigen Replit of Gitpod omgeving. Elke week (liefst vaker) slaan alle teamleden hun tussentijdse werk op in de repo op GitHub. Zo zorgen jullie ervoor dat de laatste werkende versie van jullie opdracht steeds op GitHub staat. Deze opdracht maak je alsof het een echt project is. Je maakt eerst een planning. Daarna kijk je wekelijks of je nog volgens plan loopt. Als je niet volgens plan loopt, dan stuur je bij. In de les word je hiermee geholpen, maar uiteindelijk moet jij zorgen dat je op tijd klaar bent en een goed resultaat oplevert. Beoordeling Het cijfer dat je voor je PO krijgt wordt vanuit verschillende invalshoeken bepaald:\nDe technische kwaliteit van de database (vwo 40%, havo 60%) De technische kwaliteit van de aanpassingen in de api en het website-deel (vwo 20%, havo 10%) Uitbreidingen die je hebt toegevoegd (vwo 20%, havo 10%) Inzet, planning en samenwerking (20%) Minimale eisen\nVoordat je een cijfer krijgt voor je PO, wordt gekeken of je werk voldoet aan de minimale eisen. Werk dat niet voldoet aan de minimale eisen krijgt het cijfer 1,0. De minimale eisen zijn:\nDe inhoud van je webshop is moreel verantwoord: het is niet beledigend, visueel gewelddadig of op andere manieren onfatsoenlijk. Natuurlijk mag je overleggen met klasgenoten en mag je op internet kijken hoe je bepaalde dingen kunt maken. Let wel op dat je geen plagiaat pleegt. Je mag maximaal 5 regels code overnemen van andere leerlingen of internet en je schrijft in het commentaar erbij waar je het voorbeeld vandaan hebt. Dat geldt ook voor code die je zelf vertaalt naar het Nederlands. Overtypen van code uit een Youtube-video of een tutorial van internet volgen en dat resultaat inleveren is niet toegestaan. Je gebruikt de startcode die je krijgt. Je gebruikt het stappenplan dat bij deze opdracht gegeven is. Een download in zip-formaat van je opdracht mag maximaal 50 MB groot zijn. Database Enkele punten waarop gelet kan worden bij de beoordeling zijn\nJe database is genormaliseerd, dat betekent dat je redundante gegevens hebt voorkomen door het gebruik van meerdere tabellen. Je database bevat minimaal tien producten Je neemt ten minste vijf eigenschappen van producten op. Je database bevat minimaal vijf tabellen. Je database bevat minimaal één relatie van de vorm 1:n en minimaal één relatie van de vorm n:m. Je SQL-code is toegankelijk, dat wil zeggen niet complexer dan nodig, logisch georganiseerd en waar nodig voorzien van commentaar. API en web Enkele punten waarop gelet kan worden bij de beoordeling zijn.\nDe API is aangepast, zodat hij alle informatie uit de database kan doorgeven aan je website. De html en scripts in je website zijn aangepast, zodat ze alle data die de api levert netjes laten zien. Uitbreidingen Enkele punten waarop gelet kan worden bij de beoordeling zijn.\nJe hebt functies toegevoegd waaruit blijkt dat je heel goed begrijpt hoe de database, api en website samenwerken. Je kunt bijvoorbeeld denken aan het aanbrengen van filters waarmee je snel producten kunt zoeken, of een zoekfunctie. Je hebt substantiële (grote) toevoegingen gedaan aan de html/css van het web-site gedeelte, zowel wat betreft de layout als de functionaliteit. Je kunt bijvoorbeeld denken aan een uitbreiding van meerdere pagina’s met nuttige informatie voor kopers. … Inzet, planning en samenwerking\nJe toont inzet tijdens de lessen De planning is vooraf gemaakt, gevolgd en als nodig bijgesteld. De taakverdeling is duidelijk en alle teamleden dragen in gelijke mate bij. Het werk is verdeeld over de weken waarin aan de opdracht kon worden gewerkt, dit blijkt onder andere uit de commits in Github. Inleveren De deadline voor inleveren vind je in de lesplanner. Je kunt vragen stellen tot de laatste les voor de deadline. Je zorgt dat alle bestanden in die nodig zijn om je spel te spelen in GitHub staan, dit zijn ten minste: index.html, style.css en script.js. Als je plaatjes gebruikt, dan staan die er ook bij. Uit de versie historie in GitHub blijkt wanneer je wat gedaan hebt. De laatste versie van je PO die op het moment van de deadline in GitHub staat, wordt gebruikt voor de beoordeling. Hulpmiddelen We gebruiken in deze opdracht de volgende tools:\nGitHub Replit (havo) Gitpod (vwo) Startcode Stappenplan Werk de planning af van boven naar beneden. Vul de planning aan en stel bij terwijl je aan de opdracht werkt.\nStap 1: Start Pas de achtergrondkleur van de shop aan (zie mapje web) Pas de titel van het eerste product in de shop aan (zie mapje db) Pas de query aan zodat getoonde producten gesorteerd worden op naam (zie mapje api) Stap 2: Database opzetten Maak tabellen en velden (CREATE TABLE commando) in je database waarin alle informatie kan worden opgeslagen die je over je producten wilt tonen.\nTip: je kunt een multipliciteitendiagram gebruiken als tussenstap voor je database-ontwerp Vul de tabellen met informatie (INSERT commando) Voeg eventueel plaatjes toe (web/images map) Stap 3: API aanpassen Pas de API aan, zodat je alle informatie uit je database kunt opvragen via de API Stap 4: Website aanpassen Pas de website aan, zodat alle informatie getoond wordt. Stap 5: Webshop verder verbeteren Herhaal stap 2 t/m 4 om je webshop verder te verbeteren. Voor en goed cijfer is het belangrijk dat je laat zien dat je uitstekend begrepen hebt hoe je een webshop moet opzetten. Uitlegvideo’s (havo) Uitlegvideo’s (vwo) ","description":"","tags":null,"title":"O3. Webshop","uri":"/opdrachten/webshop/"},{"content":"Hier vind je de praktische opdrachten. Praktische opdrachten zijn meestal tussen de vier en acht weken werk. Je hebt veel vrijheid en kunt er echt iets moois van maken.\nVoorbeelden Voorbeelden van werkstukken die andere leerlingen hebben gemaakt.\nO1. Website Je gaat je eigen website maken!\nO2. Game Je gaat je eigen game programmeren!\nO3. Webshop Je gaat je eigen webshop maken!\nO4. Robot Je gaat je robot programmeren!\nO5. Marble Mania Knikkerbaan Je maakt een interactieve module voor een grotere knikkerbaan.\n","description":"","tags":null,"title":"Opdrachten","uri":"/opdrachten/"},{"content":"Je leert hoe je eenvoudige programma’s kunt maken met de programmeertaal Javascript en de p5js library.\nHulpmiddelen We gebruiken in deze module de volgende tools:\nKhan Academy Oefeningen Khanacademy, module Intro to JS Intro to programming Drawing basics Coloring Variables Animation basics Interactive programs Becoming a community coder (overslaan) Bonus: Resizing with variables Text and strings Functions (lang) Logic and if Statements (lang) Debugging programs (kort) Looping (lang) Writing clean code (kort) Arrays (lang) Objects (overslaan) Object-Oriented Design (overslaan) Becoming a better programmer (overslaan) Uitleg Naslagmateriaal Lespresentatie programmeren (havo) Collegesheets programmeren (vwo) (heel dik) Leerdoelen voor de toets Programmeertalen\nJe kunt uitleggen wat machinetaal is. Je kunt uitleggen wat een compiler is. Je kunt uitleggen wat een library is. Je kunt drie hogere programmeertalen opnoemen. Je kunt uitleggen wat er binnen de informatica bedoeld wordt met het begrip grammatica. Je kunt uitleggen wat een variabele is. Je kunt uitleggen wat declareren en definiëren van een variabele is. Je kunt uitleggen wat een datatype is Je kent de datatypen boolean, number en string en begrijpt welke waarden erin opgeslagen worden Je kunt uitleggen wat controlestructuren zijn en je kent de volgende voorbeelden: if-statement, for-loop, while-loop. Je kunt uitleggen waar abstractie voor dient. Je kunt uitleggen wat een functie is. Je kunt uitleggen wat declareren, definiëren en aanroepen van een functie is. Je kunt uitleggen wat een parameter van een functie is. Je kunt uitleggen wat het resultaat van een functie is. Je kunt uitleggen wat het verschil is tussen globale en lokale variabelen. Je kunt de leesbaarheid van code verbeteren door gebruik te maken van commentaar, lay-out en structuur. Javascript\nje kunt commentaarregels gebruiken. je kunt aangeven welke waarden bepaalde variabelen hebben aan het einde van een stukje computercode. je kunt op basis van een stukje code zelf de bijbehorende schermuitvoer tekenen. je kunt met behulp van naslagmateriaal zelf computercode schrijven om een vraag te beantwoorden. je weet hoe je in een tekening animatie aanbrengt. je begrijpt wat variabelen zijn en hoe je deze kunt gebruiken. je begrijpt wat een logische expressie is en hoe je deze kunt gebruiken. je begrijpt hoe de logische operatoren “en”, “of” en “niet” werken en je kunt deze gebruiken. je begrijpt hoe de vergelijkingsoperatoren “groter dan”, “kleiner dan”, “groter-gelijk dan”, “kleiner-gelijk dan”, “gelijk aan” en “ongelijk aan” werken en je kunt deze gebruiken. je weet wat de datatypen boolean, number en string zijn en kunt deze gebruiken. je begrijpt hoe een if-statement werkt en hoe je deze kunt gebruiken. je begrijpt hoe een while-loop en een for-loop werken en hoe je deze kunt gebruiken. je kunt een while-loop omzetten naar een for-loop en andersom. je begrijpt hoe een for-loop in een for-loop werkt en hoe je dit kunt gebruiken. je begrijpt wat arrays zijn en hoe je deze kunt gebruiken. je kunt een array doorlopen met een for-loop. Alleen vwo: je kunt een twee-dimensionale array doorlopen met een for-loop in een for-loop je begrijpt hoe een functie werkt en hoe je deze kunt gebruiken. je begrijpt wat parameters van een functie zijn en hoe je deze gebruikt. je begrijpt wat het resultaat van een functie is en hoe je dit gebruikt. je begrijpt wat er op het syntaxblad Javascript staat en dit kunt toelichten en gebruiken. Oefentoets Een oefentoets voor deze module staat in Woots .\n","description":"","tags":null,"title":"T3. Programmeren met Javascript","uri":"/theorie/programmeren/"},{"content":"Hier vind je de lesplanner, geplande toetsen en inlevermomenten voor 5 vwo.\nLesplanner Het is vandaag .\nWeek Theorie+Praktijk (les 1) Praktijk (les 2) 34 intro 35 T7 Netwerken Uitleg: lagen deel 1 T7 Netwerken Oefenen: 1. IA (met Filius) 36 T7 Netwerken Uitleg: lagen deel 2 T7 netwerken Oefenen: 2. IA (met Filius) 37 T7 Netwerken Uitleg: ethernet T7 netwerken Oefenen: 3. IA (met Filius) 38 T7 Netwerken Uitleg: IP T7 netwerken Oefenen: 4 + 5 IA (met Filius) 39 T7 Netwerken Uitleg: RFC’s T7 netwerken Oefentoets in Woots 40 T5 Databases Uitleg: SELECT WHERE T5 Databases Oefening: Khan 1 SQL Basics 41 T5 Databases Uitleg: GROUP BY T5 Databases Oefening: Khan 2 More advanced SQL-queries 42 T5 Databases Uitleg: JOIN T5 Databases Oefening: Khan 1e helft van Khan 3 Relational Queries 43 Herfstvakantie 44 T5 Databases Uitleg: multipliciteiten- en strokendiagram T5 Databases Oefening: Khan 2e helft van 3 Relational Queries 45 T5 Databases Uitleg: Ruimtedatabase voorbeeldopgave\nMaak vooraf: Ruimtedatabase vragen met meerdere tabellen in Woots T5 Databases Oefening: Khan 4 Modifying Databases 46 TW1: Toets 5V-IN-S06 over T7 Netwerken 47 TW1 48 O3 Webshop Intekenen O3 Webshop Voorbeeldcode ontvangen 49 O3 Webshop Uitleg stap 1 (hoofdlijnen) O3 Webshop Stap 1 50 O3 Webshop Stap 2 DB O3 Webshop Stap 2 DB 51 O3 Webshop uitloop ivm lesuitval O3 Webshop uitloop ivm lesuitval 52 Kerstvakantie 1 Kerstvakantie 2 O3 Webshop Stap 2 DB O3 Webshop Stap 2 DB 3 O3 Webshop Stap 3 API O3 Webshop Stap 3 API 4 O3 Webshop Stap 4 Web O3 Webshop Stap 4 Web 5 O3 Webshop Stap 5 verbeteren DB O3 Webshop Stap 5 verbeteren API 6 O3 Webshop Stap 5 verbeteren Web O3 Webshop Stap 5 opschonen code 7 O3 Webshop ** 5V-IN-S09 webshop inleveren ** 8 T6 Robotica Intro en Arduino uitdelen T6 Arduinolessen 1 + 2 9 Voorjaarsvakantie 10 T6 Robotica Uitleg: microcontrollers deel 1 T6 Arduinolessen 3 + 4 11 TW2: Toets 5V-IN-S07 over T5 Databases 12 TW2 13 T6 Robotica Uitleg: microcontrollers deel 2 T6 Arduinolessen 5 14 T6 Robotica Uitleg: toestandsdiagrammen deel 1 T6 Toestandsdiagrammen opdracht 1 15 T6 Robotica Uitleg: toestandsdiagrammen deel 2 T6 Toestandsdiagrammen opdracht 2 16 O4-Robot O4-Robot 17 meivakantie 18 meivakantie 19 O4-Robot O4-Robot 20 O4-Robot O4-Robot 21 O4-Robot O4-Robot 22 extra les O4-Robot ivm lesuitval extra les O4-Robot ivm lesuitval 23 O4-Robot ** 5V-IN-S10 robot inleveren ** 24 voorbereiding TW3 voorbereiding TW3 25 TW3: Toets 5V-IN-S08 over T6 Robotica 26 TW3 27 Zomervakantie Toetsen en inlevermomenten Datum Code Toetsvorm Stof Toetsweek 1 5V-IN-S06 Digitale toets T7 Netwerken Zondag 19 feb 23:59 5V-IN-S09 Praktische Opdracht O3 Webshop Toetsweek 2 5V-IN-S07 Digitale toets T5 Databases Zondag 11 juni 23:59 5V-IN-S10 Praktische Opdracht O4 Robot Toetsweek 3 5V-IN-S08 Digitale Toets T6 Robotica Advies voor inleveren van Praktische Opdrachten: Lever een bijna af concept in vóór de laatste les voor de deadline, als er dan iets misgaat dan kun je nog een vraag stellen in de laatste les!\n","description":"","tags":null,"title":"5 vwo","uri":"/planning/5v/"},{"content":"Hulpmiddelen zijn programma’s die we gebruiken om dingen te maken. Hulpmiddelen zijn dus gereedschap (Engels: tools) dat je gebruikt bij informatica.\nDe hulpmiddelen die we bij informatica gebruiken:\nKhan Academy Khan Academy is internationale online lesmethode met cursussen voor diverse onderwerpen. Wij gebruiken enkele cursussen uit de sectie Computer Programming.\nInformatica Actief Informatica Actief is de lesmethode voor informatica die wij gebruiken. Wij gebruiken enkele modules uit de methode.\nGitHub GitHub is een website waar je code kunt opslaan.\nReplit Replit is een online ontwikkelomgeving waarin je code kunt wijzigen en uitvoeren. We gebruiken dit op de havo.\nGitpod Gitpod is een online ontwikkelomgeving waarin je code kunt wijzigen en uitvoeren (en veel meer). We gebruiken dit op het vwo.\nArduino IDE Arduino IDE is een programma waarin je code kunt schrijven en downloaden in je Arduino.\nFilius Filius is een programma waarmee je netwerken kunt namaken en simuleren.\n","description":"","tags":null,"title":"Hulpmiddelen","uri":"/tools/"},{"content":"Je gaat je robot programmeren!\nOpdrachtbeschrijving De opdracht in het kort is: programmeer een apparaat naar keuze met behulp van een toestandsdiagram.\nInschrijven Je schrijft je in via het onderstaande formulier dat de docent aanlevert (login met je google account van school voor toegang).\ngsr 22/23 5hin1 22/23 5hin2 22/23 5V GEE 22/23 5V CAM 22/23 5vin1, link naar formulier volgt\n5vin2, link naar formulier volgt\ngsr, link naar formulier volgt\nApparaat kiezen Je bent vrij om zelf te kiezen voor welk van de aangeboden apparaten je een programma gaat maken. Je docent moet je keuze goedkeuren. De apparaten die je kunt programmeren zijn:\nStoplichtenplein (havo) De opdracht voor dit apparaat\nMaak een programma waarmee de stoplichten zo op groen, oranje en rood springen dat auto’s en voetgangers zo efficient mogelijk over de kruising kunnen.\nHet stoplichtenplein\nJe mag het plein uitbreiden met sensoren die auto’s waarnemen.\nArcade game box (havo en vwo) De opdracht voor dit apparaat\nMaak een game die zo boeiend mogelijk is. De arcade box\nJe mag gebruik maken van alle mogelijkheden die de hardware in de arcadebox biedt. Dit zijn 4 knoppen met dimbare verlichting, een speaker en een display met twee regels van zestien karakters en de mogelijkheid om zelf een beperkt aantal karakters te ontwerpen.\nAlphabot2 rijdende robot (havo en vwo)\nDe opdracht voor dit apparaat\nMaak een programma dat de alphabot zo snel mogelijk de uitgang van een doolhof laat vinden.\nDe alphabot\nJe moet mimimaal de beide motoren en één type afstandssensor van de alphabot2 gebruiken. De afstandssensoren waar je uit kunt kiezen zijn de ultrasone afstandssensor voorop, de twee infrarode aftandssensoren schuin links- en rechtsvoor en de lijnvolgsensoren onderop. Je kunt je oplossing uitbreiden door meerdere sensortypen te gebruiken. Je kunt je programma ook uitbreiden door het display, de speaker of de RGB-leds onderop te gebruiken om te laten merken wat de alphabot aan het doen is.\nHet doolhof\nHet doolhof bestaat uit en pad met doodlopende vertakkingen. In het doolhof zitten geen rondjes. De paden worden gevormd door vierkanten van ongeveer 30x30 cm. Aan de randen van de paden staan muren. De muren bestaan uit stukken van ongeveer 30 centimeter lang. De stukken muur sluiten recht op elkaar aan of maken een hoek van ongeveer 90 graden. In de midden van het pad is er een strook zwart tape op de vloer gemaakt. Dit tape bevat vertakkingen en is steeds ongeveer 15 cm van een muur verwijderd.\nDrone (experimenteel voor vwo in 22/23, vwo vanaf 23/24)\nDe opdracht voor dit apparaat\nLaat de drone zo snel mogelijk van de startplek naar de finish plek vliegen. Onderweg staan opstakels.\nDe drone\nJe gebruikt commando’s om de drone te laten opstijgen en landen en om de drone in een bepaalde richting te laten vliegen. Je gebruikt de afstandssensor voor op de drone om de afstand tot opstakels te meten.\nHet parcours\nHet parkcours wordt telkens opgebouwd en afgebroken in de gang. De drone mag niet buiten het parcours vliegen, geen obstakels of muren raken en tijdens het vliegen mogen er geen personen binnen de grenzen van het parcours aanwezig zijn. Er is een vast punt waar de drone start en een zone waar de drone eindigt. De drone vliegt op vaste afstand van de grond (ongeveer 1 meter). De obstakels bevinden zich op de hoogte waar de drone vliegt. Tijdens de opdracht werk je in overleg met de docent het parcours verder uit.\nIn overleg met je docent mag je ook een eigen apparaat kiezen of een bestaand apparaat uitbreiden.\nWerkwijze Je maakt deze opdracht in een team van twee personen. De docent geeft aan hoe de teams gemaakt worden. Je bepaalt zelf hoe je het werk binnen je team verdeelt, zolang iedereen een gelijkwaardige bijdrage levert. Je krijgt één cijfer per team, maar de docent kan hiervan afwijken als teamleden geen gelijkwaardige bijdrage hebben geleverd. Je krijgt van de docent startcode voor deze opdracht. Deze staat klaar in een repo op GitHub. Er is één repo per team. Je maakt code in de Arduino IDE. Je zorgt dat alle teamleden even veel coderen. Elke les sla je je tussentijdse werk op in de repo op GitHub. Dat doe je door de nieuwe versies van je bestanden met de hand te uploaden in de webpagina, want de Arduino IDE heeft geen automatische koppeling met GitHub. Deze opdracht maak je alsof het een echt project is. Je maakt eerst een planning. Daarna kijk je wekelijks of je nog volgens plan loopt. Als je niet volgens plan loopt, dan stuur je bij. In de les word je hiermee geholpen, maar uiteindelijk moet jij zorgen dat je op tijd klaar bent en een goed resultaat oplevert. Beoordeling Het cijfer dat je voor je PO krijgt wordt vanuit vier invalshoeken bepaald:\nminimale eisen uiterlijk techniek inzet, planning en samenwerking Minimale eisen\nVoordat je een cijfer krijgt voor je PO, wordt gekeken of je werk voldoet aan de minimale eisen. Werk dat niet voldoet aan de minimale eisen krijgt het cijfer 1,0. De minimale eisen zijn:\nDe inhoud van je opdracht is moreel verantwoord: het is niet beledigend, visueel gewelddadig of op andere manieren onfatsoenlijk. Natuurlijk mag je overleggen met klasgenoten en mag je op internet kijken hoe je bepaalde dingen kunt maken. Let wel op dat je geen plagiaat pleegt. Je mag maximaal 5 regels code overnemen van andere leerlingen of internet en je schrijft in het commentaar erbij waar je het voorbeeld vandaan hebt. Dat geldt ook voor code die je zelf vertaalt naar het Nederlands. Overtypen van code uit een Youtube-video of een tutorial van internet volgen en dat resultaat inleveren is niet toegestaan. Je gebruikt de startcode die je krijgt. Je gebruikt het stappenplan dat bij deze opdracht gegeven is. Een download in zip-formaat van je opdracht mag maximaal 50 MB groot zijn. Werking en aantrekkelijkheid\nJe apparaat start op Je apparaat reageert op de omgeving De bediening van je apparaat is eenvoudig en logisch Het nut/doel van je apparaat is duidelijk Het apparaat bevat diverse functionaliteiten / mogelijkheden Je hebt uitbreidingen op het apparaat gemaakt … Techniek\nDe code volgt de lijn van de startcode De code is netjes en duidelijk leesbaar De code bevat geen dubbele stukken code Je hebt de technieken gebruikt die in de lessen zijn aangeboden. Je hebt dingen toegevoegd waarvan je zelf hebt uitgezocht hoe ze werken … Inzet, planning en samenwerking\nJe toont inzet tijdens de lessen De planning is vooraf gemaakt, gevolgd en als nodig bijgesteld. De taakverdeling is duidelijk en alle teamleden dragen in gelijke mate bij. Het werk is verdeeld over de weken waarin aan de opdracht kon worden gewerkt. Inleveren De deadline voor inleveren vind je in de lesplanner. Je kunt vragen stellen tot de laatste les voor de deadline. Je zorgt dat alle bestanden in die nodig zijn om je spel te spelen in GitHub staan, dit zijn ten minste: het .ino bestand met de code, een bestand met het toestandsdiagram (.excalidraw, .drawio, .pptx, .jpeg, .png of .pdf) en een link naar de video op youtube (.txt) of de video zelf (.mp4 of .mov). Als je libraries gebruikt, dan staan die er ook bij. Uit de versie historie in GitHub blijkt wanneer je wat gedaan hebt. De laatste versie van je PO die op het moment van de deadline in GitHub staat, wordt gebruikt voor de beoordeling. Hulpmiddelen We gebruiken in deze opdracht de volgende tools:\nGitHub om je werk op te slaan. Arduino IDE om je code voor de arduino te bewerken en in je apparaat te laden. Er is geen automatische koppeling tussen Arduino IDE en GitHub. Dat betekent dat je je bestanden via de webinterface van GitHub moet downloaden en uploaden.\nStartcode Als je van je docent je een kopie van de startcode hebt ontvangen, dan kun je aan de slag met de stappen uit het README.md bestand.\nStappenplan Werk de planning af van boven naar beneden.\nStap 1: Starten Je hebt je GitHub-inlognaam aan de docent doorgegeven, zodat die een Github-repo kan aanmaken. Je hebt gekozen wat je gaat maken en dat aan de docent doorgegeven, bij een eigen idee moet de docent het goedkeuren. Je hebt thuis een computer of laptop (Arduino werkt niet op een iPad) waarop je de gratis Arduino software hebt geïnstalleerd, of je hebt er rekening mee gehouden dat je een paar uur per week op school op een computer kan werken. Je hebt de startcode voor je project uitgeprobeerd. Je vindt de startcode in het .ino bestand in de map die hoort bij wat je gaat maken. Stap 2: Toestandsdiagram Je hebt een toestandsdiagram gemaakt. Dit sla je op in GitHub. Je hebt je docent gevraagd om feedback over je toestandsdiagram. De feedback heb je verwerkt. Het uiteindelijke resultaat sla je weer op in GitHub. Je hebt aangegeven welke sensoren en actuatoren je gaat gebruiken, dit kan in een kort lijstje op hetzelfde blad als je toestandsdiagram. Je kunt een toestandsdiagram bijvoorbeeld als volgt maken\nop https://excalidraw.com/ (snel en eenvoudig) of op https://draw.io (meer mogelijkheden) in Powerpoint op papier en dan fotograferen (het is dan wel lastig om het netjes te doen) Stap 3: Code Je hebt het toestandsdiagram in code omgezet, zodat alle toestanden doorlopen kunnen worden met jouw circuit. Daarbij heb je het door de docent aangeleverde projectcode als startpunt gebruikt. Nog niet alle sensoren of actuatoren van je apparaat hoeven het te doen, zolang alle toestanden maar doorlopen kunnen worden. De laatste versie van je code sla je steeds op op GitHub. Je hebt de code van je toestandsdiagram uitgebreid, zodat alle sensoren en actuatoren van je project het doen. Je apparaat werkt nu volledig en zoals beschreven in het toestandsdiagram. De laatste versie van je code sla je steeds op op GitHub. Stap 4: Uitbreidingen Je hebt je ontwerp uitgebreid met extra ideeën en deze heb je verwerkt in je toestandsdiagram en in je code. De laatste versie van je toestandsdiagram en code sla je steeds op op GitHub. Stap 5: Video Maak een video die de werking van je project demonstreert. Het is een video met geluid (uitleg tijdens de demonstratie) in .mp4 of .mov formaat van maximaal 20MB of .txt bestand met link naar youtube. De video duurt maximaal 2 minuten.\nUitlegvideo’s Er zijn op dit moment (nog) geen uitlegvideo’s bij deze opdracht.\n","description":"","tags":null,"title":"O4. Robot","uri":"/opdrachten/robot/"},{"content":"Je leert hoe je problemen kunt oplossen met algoritmen, je gebruikt daarbij stroomdiagrammen en de programmeertaal Javascript.\nHulpmiddelen We gebruiken in deze module enkele online hulpmiddelen voor het tekenen van schema’s en het maken van oefeningen.\nOefeningen Eenvoudige algoritmen\nStroomdiagrammen lespresentatie, met codevoorbeelden in replit (wordt misschien herzien) Programmeeropdrachten in Github (tevens beschikbaar in Woots ) Uitleg Leerdoelen voor de toets Eenvoudige algoritmen\nje kunt uitleggen wat een algoritme is je kunt uitleggen wat een flowchart is en waarvoor je deze gebruikt je kunt flowcharts lezen, dat betekent dat je de output van een flowchart kunt bepalen als de input en de flowchart gegeven worden je kunt een flowchart maken van een eenvoudig algoritme waarvan je een korte beschrijving en een voorbeeld van de input en de output krijgt. Een eenvoudig algoritme is een algoritme waarbij een rij wordt doorlopen, zoals bijvoorbeeld: zoek het grootste getal in een rij, bereken het gemiddelde van alle getallen in een rij, tel het aantal keer dat een bepaalde letter voorkomt in een tekst. je kunt een flowcharts omzetten naar JavaScript code en JavaScript code kunnen omzetten naar een flowchart. Oefentoets Een oefentoets voor deze module staat in Woots .\n","description":"","tags":null,"title":"T4. Algoritmen in Javascript","uri":"/theorie/algoritmen/"},{"content":"Chapter 4 This could be yours Start your success story. Now!\n","description":"","tags":null,"title":"This could be yours","uri":"/yours/"},{"content":"Hier vind je de lesplanner, geplande toetsen en inlevermomenten voor 6 vwo.\nLesplanner Het is vandaag .\nWeek Les 1 Les 2 34 T8 - Objectgeoriënteerd programmeren introweek 35 T8 - Praktijkles maak vooraf opdracht 0 T8 - Praktijkles 36 T8 - Theorieles 1 maak vooraf opdracht 1 en opdracht 2 T8 - Praktijkles 37 T8 - Theorieles 2 maak vooraf opdracht 3 T8 - Praktijkles 38 T8 - Theorieles 3 maak vooraf opdracht 4 T8 - Praktijkles 39 T8 - Theorieles 4 maak vooraf opdracht 5 T8 - Praktijkles hierin maak je opdracht 6 af 41 Marble Mania / CanSat intro, repo, werkwijze Marble Mania / CanSat uitleg techniek achter knikkerbaan 42 Marble Mania / CanSat Start sprint 1: Basisfunctionaliteit Marble Mania / CanSat sprint 1 43 Herfstvakantie 44 Marble Mania / CanSat sprint 1 Marble Mania / CanSat Einde sprint 1: demo en evaluatie 45 Marble Mania / CanSat start sprint 2 Marble Mania / CanSat sprint 2 46 TW1: Toets 6V-IN-S11 over T8 Object Oriented Programming 47 TW1 48 Marble Mania / CanSat sprint 2 Marble Mania / CanSat Einde sprint 2: demo en evaluatie 49 Marble Mania / CanSat start sprint 3: Minimal Viable Product bespreken 6V-IN-S11 Marble Mania / CanSat sprint 3 50 Marble Mania / CanSat sprint 3 Marble Mania / CanSat Einde sprint 3: demo en evaluatie 51 Marble Mania / CanSat start sprint 4: Uitbreiding Marble Mania / CanSat sprint 4 52 Kerstvakantie 1 Kerstvakantie 2 Marble Mania / CanSat sprint 4 Marble Mania / CanSat Einde sprint 4: demo en evaluatie 3 Marble Mania / CanSat start sprint 5 : Perfectioneren Marble Mania / CanSat sprint 5 4 Marble Mania / CanSat sprint 5 Marble Mania / CanSat Einde sprint 5: demo eindproduct 5 Nieuw theorie-onderdeel: T9 Security – Theorieles T9 Security – Praktijkles 6 T9 Security – Theorieles T9 Security – Praktijkles 7 T9 Security – Theorieles T9 Security – Praktijkles 8 T9 Security – Theorieles T9 Security – Praktijkles 9 Voorjaarsvakantie 10 T9 Security – Theorieles T9 Security – Praktijkles 11 TW2: Toets 6V-IN-S12 over T9 Security 12 TW2 13 nader te bepalen nader te bepalen 14 Bespreken 6V-IN-S11 nader te bepalen 15 nader te bepalen nader te bepalen 16 nader te bepalen informatica afgerond 17 Meivakantie 18 Meivakantie examencijfer informatica bekend 19 Start CE geen CE voor informatica Toetsen en inlevermomenten Datum Code Toetsvorm Stof Toetsweek 1 6V-IN-S11 Digitale toets T8 Objectgeoriënteerd Programmeren week 4 - 2e les 6V-IN-S13 Praktische Opdracht O5 Marble Mania of CanSat Toetsweek 2 6V-IN-S12 Digitale toets T9 Security Advies voor inleveren van Praktische Opdrachten: Lever een bijna af concept in vóór de laatste les voor de deadline, als er dan iets misgaat dan kun je nog een vraag stellen in de laatste les!\n","description":"","tags":null,"title":"6 vwo","uri":"/planning/6v/"},{"content":"Hier vind je informatie voor docenten. Geen geheimen natuurlijk, want leerlingen kunnen deze pagina ook bekijken.\nOnze filosofie We zijn in juni 2022 begonnen met deze site, vanuit de behoefte om alle verschillende stukken lesmateriaal die we de afgelopen jaren verzameld hebben overzichtelijk en laagdrempelig voor leerlingen bij elkaar te brengen. Bij het maken van de site hebben we ons laten leiden door de volgende uitgangspunten:\ninformatica als praktisch vak (leuk voor leerlingen, relevantie van theorie door koppeling met praktijk) laagdrempelig voor leerlingen (zo min mogelijk drempels: weinig kliks, ook op mobiel, geen inlog, snel vinden wat je zoekt, eenvoudige structuur) modulair programma (eenvoudig te onderhouden, onderdelen eenvoudig te vernieuwen) we maken geen lesmethode, maar een programma. Dat betekent dat we zoveel mogelijk verwijzen naar bestaand (Nederlandstalig of Engelstalig) lesmateriaal. Gebruiken in je klas Geef de link aan je leerlingen en gebruik de delen die je aanstaan. Zolang je doel is om leerlingen te helpen met informatica, vinden wij het geweldig.\nZelf aanpassen Wil je aanpassingen doen? Dat doe je zo:\nFork onze repo op github Maak de juiste instellingen (vraag CAM@emmaus) Pas de site naar je eigen behoeften aan Probeer schoolspecifieke informatie zoveel mogelijk te scheiden van de rest, dat is handig als je updates van ons wilt overnemen Meer informatie over de gebruike technieken\nHugo Documentation Theme Relearn Documentation Veelgestelde vragen Hoe beoordelen jullie praktische opdrachten?\nZie onze rubrics voor P1 website , P2 game en P4 robot voor inspiratie. Bijdragen We vinden het tof als je het programma gebruikt en nog toffer als je mee wilt werken om het verder te verbeteren. Als we kennis delen dan wordt het voor iedereen beter en kost het ons met zijn allen minder tijd om een mooi programma te onderhouden. Bijdragen kan als volgt:\nVoor kleine wijzigingen (binnen 1 pagina) kun je klikken op het potlood rechtsboven elke pagina. De aanpassing kun je vervolgens in github maken. Na goedkeuring worden ze automatisch verwerkt. (@we moeten dit nog testen) Voor substantielere wijzigingen, zoals toevoegen van een nieuwe (keuze)module. Contact ons via mail. We staan altijd open voor het uitwisselen van ervaring, contact ons Contact Arie Pieter Cammeraat CAM@emmaus\nSander van Geest GEE@emmaus Beide docent informatica op het Emmauscollege Rotterdam (volledige mailadres niet opgenomen ter bescherming tegen spam, tip: het mailadres eindigt op emmauscollege.nl 😉)\nMeer inspiratie Kijk voor meer inspiratie ook eens op de informatica site van deze scholen:\nMetis Montessori Lyceum Amsterdam License This site is licensed under the MIT License .\nCredits Wil jij je naam hier? Help ons dan om de site beter te maken.\n","description":"","tags":null,"title":"Docentenpagina","uri":"/docenten/"},{"content":"Je maakt een interactieve module voor een grotere knikkerbaan.\nOpdrachtbeschrijving In het vakgebied van informatica wordt heel veel projectmatig gewerkt. Een van de manieren om dit te doen is Agile. Bij deze opdracht ga je in groepen van 4 (één leerling meer of minder mag ook) projectmatig werken aan een interactieve knikkerbaan die verbonden is met een zelfgemaakte webserver. Hierbij ga je de kennis en vaardigheden die bij het vak informatica hebt opgedaan toepassen en integreren. Je levert een eindproduct op maar je wordt ook beoordeeld op de wijze waarop dit project gemanaged wordt.\nInschrijven Je schrijft je in via het onderstaande formulier dat de docent aanlevert.\n6Vin1 6Vin2 Wat ga je precies maken? Een module voor een knikkerbaan. Het is de bedoeling dat je bovenaan knikkers kunt ontvangen en ze onderaan weer laat vallen, zodat een volgende module ze weer kan opvangen. Ook moet de knikkerbaan om kunnen gaan met verschillen in de snelheid waarmee nieuwe knikkers aangeleverd worden. Deze module is interactief: hij maakt gebruik van Arduino, heeft sensors en actuators en staat via WiFi in verbinding met een server. De basis van de opdracht wordt aan je gegeven met uitleg hoe je de basis van de knikkerbaan moet maken, inclusief een teller (onderbrekingssensor) en een poortje (servomotor -\u003e actuator). De knikkerbaanmodule moet uiteindelijk meer sensors en actuators krijgen. Je kunt natuurlijk meer tellers toevoegen en meer poortjes, maar je moet ook minimaal andere één sensor en één actuator van een andere soort toevoegen. Denk aan een kleurensensor, afstandssensor, snelheidsmeter, krachtsensor, gewichtsensor etc. Of als actuators: ledjes, een RGB-ledstrip, display, buzzer, bewegende onderdelen. Als je twijfelt of iets kan / mag, vraag even aan je docent. Een kleine webpagina – een widget – waarmee je de status van je knikkerbaanmodule kunt weergeven, maar ook je knikkerbaan kunt ‘besturen’. Je krijgt dus informatie van de knikkerbaan, maar geeft ook informatie terug waarop de knikkerbaan moet reageren. Je kunt dus informatie van de sensors zien en het functioneren van de actuators beïnvloeden. De widget zal later door de docent opgenomen worden in een grote webpagina waar een overzicht te zien is van alle modules van de uiteindelijke knikkerbaan. Een serverprogramma dat een brugfunctie heeft tussen de knikkerbaanmodule en de widget. Dit serverprogramma verwerkt alle informatie die opgevraagd of gegeven wordt. De informatie wordt door de server opgeslagen in een dataobject. Een verslag waarin je je code en het proces documenteert. Inleveren De demonstratie van de knikkerbaan is op een nog nader te bepalen moment in de week van 23 januari 2023. De deadline voor het inleveren van het GitHub repository zondag 29 januari 2022 23:59. De laatste versie van de main branch die op het moment van de deadline in GitHub staat, wordt gebruikt voor de beoordeling. Hulpmiddelen GitHub - zodat iedereen aan de code kan werken en alles wel netjes op één plek staat. Daarnaast maken we gebruik van extra functies van GitHub om goed projectmatig te kunnen werken. GitPod - voor het ontwerpen/ programmeren van de server-app en de website. Je programmeert deze onderdelen vooral in JavaScript. Arduino - voor het programmeren van de knikkerbaan. Video's Video’s over de communicatie met de server Beoordeling De opdracht wordt op de volgende aspecten beoordeeld, waarbij de vragen niet uitputtend beschreven zijn:\nKnikkerbaan - Hoeveel uitbreidingen zijn er aan de basis toegevoegd? Hoe functioneert de knikkerbaan? Hoe is de totale afwerking? Arduino - Hoe is de kwaliteit van de code? Zitten er nieuwe classes in? Hoe objectgeoriënteerd is het geheel van de code? Is de code een rommeltje of is het netjes? Werkt de knikkerbaan soepel? Server – Is de server in staat om nieuwe informatie aan te nemen, op te slaan in het data-object en opgevraagde informatie netjes terug te geven? Is de code netjes of is het een rommeltje? Widget - Doet de widget wat het moet doen? Hoeveel interactiviteit met de knikkerbaan wordt hierdoor mogelijk? Zitten er nieuwe classes in? Hoe objectgeoriënteerd is het geheel van de code? Is de code netjes? Is de widget mooi? Planning - Is het project onderverdeeld in features en taken (decompositie), weergegeven in issues? Is het scrumboard altijd goed bijgehouden? Zijn er tweewekelijks evaluaties aan het verslag toegevoegd? Is er gebruik gemaakt van bug reports of andere geavanceerde ondersteunende functies? Verslag - Bevat het verslag de aangegeven onderdelen? Hoe goed is de documentatie / uitleg van wat de knikkerbaan kan / doet? Inzet – Welke inzet heb je getoond bij het maken van deze opdracht en het samenwerken in de groep? Er wordt verwacht dat elk teamlid een gelijkwaardige bijdrage levert. Je mag taken verdelen, maar aan het einde van de opdracht wordt van alle teamleden verwacht dat zij dezelfde kennis hebben van alle onderdelen van de opdracht. Bij twijfel kan de docent dit toetsen in een kort gesprek met de teamleden en onderzoeken welke commits door teamleden zijn gedaan. Het staat de docent vrij om aan groepsleden verschillende cijfers toe te kennen op basis van hoe en wat zij controleerbaar aan het project hebben bijgedragen.\n","description":"","tags":null,"title":"O5. Marble Mania Knikkerbaan","uri":"/opdrachten/knikkerbaan/"},{"content":"Hier vind je informatie over het robotica programma op het Emmauscollege. Dit programma is ook te volgen voor leerlingen zonder informatica.\nRobot in a Week Bouwinstructie Robot in a Day Lespresentatie Rookie Challenge Spelregels Rookie Challenge ","description":"","tags":null,"title":"Robotica","uri":"/robotica/"},{"content":"Je leert hoe je heel veel informatie kunt bekijken en bewaren in databases met de programmeertaal SQL.\nHulpmiddelen We gebruiken in deze module de volgende tools:\nKhan Academy Oefeningen Khanacademy, module Intro to SQL\nSQL basics More advanced SQL queries Relational queries in SQL (lang) Modifying databases with SQL Further learning in SQL (overslaan) Ruimtedatabase (alleen vwo)\nOpgaven met antwoorden in Woots Uitlegvideo’s met antwoorden Uitleg Naslagmateriaal Lespresentatie (vwo) Leerdoelen voor de toets Databases theorie\nJe kunt uitleggen wat een relationele database is. alleen vwo: Je kunt gegevens analyseren en structureren en relaties vastleggen in een multipliciteitsdiagram. alleen vwo: Je kunt gegevens analyseren en structureren en vastleggen in een strokendiagram. Je kunt een database voorzien van een voorbeeldpopulatie (dit betekent dat je gegevens in velden kunt invullen). Je kunt het verschil tussen en 1:n, n:1 en n:m relatie uitleggen en je kunt in een gegeven voorbeeld aangeven van welke relatie sprake is. Je kunt uitleggen wat redundantie is. Je kunt uitleggen wat normaliseren is. Je kunt een gegeven, niet volledig genormaliseerde database omzetten naar een database in de 3e normaalvorm (dit betekent dat je de redundante informatie kunt verwijderen door de database te splitsen in meerdere aan elkaar gerelateerde tabellen). Je kunt voor een gegeven situatie een voorstel te doen voor een genormaliseerde database structuur. Je kunt aangegeven welke (combinaties van) velden uniek zijn / als sleutel kunnen dienen. Je weet waarvoor de primaire sleutel dient. Je weet wat een verwijzende sleutel is. Je weet hoe verwijzingen tussen verschillende tabellen met behulp van sleutels werken. Je weet hoe in een database wordt aangegeven dat een veld geen waarde bevat. Databases programmeren in khan:\nJe kunt met CREATE TABLE een gegevensmodel omzetten in een database. Je kunt met INSERT rijen aan een tabel toevoegen. alleen vwo: Je kunt met DELETE rijen verwijderen uit een tabel. Je kunt met SELECT gegevens uit een relationele database opvragen. Je kunt de opgevraagde gegevens uit een relationele database oplopend en aflopend sorteren. Je kunt voorwaarden stellen aan de op te vragen gegevens uit de database (WHERE) en gebruikmaken van operatoren (=, \u003c, \u003e, \u003e=, \u003c=, \u003c\u003e). Je kunt gebruikmaken van LIKE bij het stellen van voorwaarden in de query. alleen vwo: Je kunt gebruik maken van een subquery in combinatie met de voorwaarde IN. Je kunt gebruikmaken van samengestelde voorwaarden (AND, OR) bij het stellen van voorwaarden in de query. Je kunt gebruikmaken van omgedraaide voorwaarden (NOT) bij het stellen van voorwaarden in de query. Je kunt gebruikmaken van NULL bij het stellen van voorwaarden in de query. Je kunt gebruikmaken van aggregatiefuncties (COUNT, SUM, MAX, MIN, AVG) bij het opstellen van query. Je kunt gebruikmaken van GROUP BY bij het groeperen van de resultaten van een query. Je kunt voorwaarden stellen aan op te vragen gegroepeerde gegevens met HAVING alleen havo: Je kunt bij een query over 2 of 3 tabellen de JOIN toepassen alleen vwo: Je kunt bij een query over 2 of meer tabellen de JOIN toepassen Je kunt een query maken met JOIN van een 1-op-n relatie Je kunt een query maken met JOIN van een n-op-m relatie alleen vwo: Je kent het verschil tussen cross join (JOIN zonder ON), inner join (JOIN ON), left outer join (LEFT JOIN ON) en kunt beslissen welke van deze drie je nodig hebt in een query. Oefentoets Een oefentoets voor deze module staat in Woots .\n","description":"","tags":null,"title":"T5. Databases met SQL","uri":"/theorie/databases/"},{"content":"Chapter 5 Tests Some pages for internal testing of differnt styles\nCode Some testing for different styles used in syntax highlightning and preformatted blocks\nImages Some testing for different styles of image links\nLinks Some testing for different styles of links\n","description":"","tags":null,"title":"Tests","uri":"/tests/"},{"content":"Je leert hoe je met behulp van toestandsgrammen kunt programmeren. Je gebruikt daarbij het Arduino platform.\nHulpmiddelen We gebruiken in deze module de volgende tools:\nArduino IDE Oefeningen Arduino-lessen.nl, les 1 t/m 5\nKnipperende LED Knipperend LED op breadboard Fadende LED op breadboard met PWM Knippersnelheid regelen met potmeter LED schakelen met drukknop Afstand meten met ultrasoon sensor (geen toetsstof) Zonder arduino-lessen.nl\nGrove I2C LCD met tekst en symbolen (zie uitlegvideo op deze pagina met libary “Grove-LCD RGB Backlight”) (geen toetsstof) Meer lessen Arduino-lessen (geen toetsstof)\nToestandsdiagrammen\nLespresentatie toetstandsdiagrammen Uitleg Naslagwerken\nMicrocontroller reader (alleen de paragrafen 1.1, 2.1 t/m 2.9, 3.2, 4.1 t/m 4.3, 5.1 t/m 5.6 en 6.4) Leerdoelen voor de toets Arduino\nJe kunt uitleggen wat een microcontroller is. Je weet wat de setup() en loop() functies in een Arduino sketch zijn. Je weet hoe je digitale en analoge poorten aanstuurt of uitleest Je weet hoe je delay() gebruikt en wat de voor- en nadelen van deze functie zijn. Je begrijpt wat de functie millis() doet. Je kunt de functie millis() gebruiken als vervanging van delay(). Je weet hoe je een PWM signaal kunt creëren Je kunt uitleggen wat een PWM signaal is en kunt daarbij de term duty cycle correct gebruiken en uitleggen Je weet hoe een breadboard werkt Je weet hoe je een variabele weerstand aansluit op een analoge poort van Arduino Je weet hoe je een LED aansluit op een digitale poort van Arduino Je weet hoe je een knop aansluit op een digitale input poort van Arduino Je weet wat het verschil is tussen een sensor en een actuator. Je kunt een aansluitschema maken van een systeem dat beschreven is in een stuk tekst. Het aansluitschema bevat een Arduino, actuatoren en sensoren. Je kent de volgende datatypen: string, int, float Je kunt Arduino code aanpassen om tot een gevraagde oplossing te komen. Je kunt korte programma’s maken die een knipperende LED, gedimde LED, knop en potmeter gebruiken. Je hebt voorkennis van programmeren op het niveau van de vierde klas. Toestandsdiagrammen\nJe kunt aan de hand van een gegeven toetstandsdiagram aangeven hoe een systeem zich gedraagt. Je kunt een toestandsdiagram maken van een systeem dat beschreven is in een stuk tekst. Je kunt een toestandsdiagram omzetten in Pseudocode. Je kunt pseudocode omzetten in Arduino-code. Oefentoets Een oefentoets voor deze module staat in Woots .\n","description":"","tags":null,"title":"T6. Robotica met Arduino","uri":"/theorie/robotica/"},{"content":"Je leert hoe het internet van binnen werkt.\nDeze module wordt in de loop van 22/23 op onderdelen aangepast.\nHulpmiddelen We gebruiken in deze module de volgende tools:\nInformatica Actief Filius Oefeningen Informatica Actief, keuzemodule netwerken, versie netwerken nieuwe stijl\nInformatica Actief, keuzemodule netwerken (1.1, sla 1.2 over) In plaats van Filius te installeren, gebruik je Filius in Gitpod Informatica Actief, keuzemodule netwerken (2.1 t/m 2.17) Informatica Actief, keuzemodule netwerken (3.1 t/m 3.8) Informatica Actief, keuzemodule netwerken (4.1 t/m 4.3) Informatica Actief, keuzemodule netwerken (5.1 t/m 5.5) Uitleg Naslagmateriaal\nNetwerken lespresentatie (Powerpoint presentatie) How the internet works (video’s) Theorie netwerkprotocollen (alleen hoofdtstuk 5, dit is best pittig, aanvulling op uitleg in de les). Leerdoelen voor de toets Netwerken\nJe kunt met behulp van een berekening kunt aantonen wat de hoofdreden is om het IP versie 4 protocol te vervangen door IPv6 Je kunt het verschil uitleggen tussen een LAN en een WAN. Je kent de belangrijkste verschillen tussen communicatie over koperen verbindingen, glasvezelverbindingen en draadloze verbindingen Je weet wat bij computernetwerken de termen lag / latency / latentie en bandbreedte betekenen en hoe ze de snelheid van een netwerkverbinding beïnvloeden. Je kunt uitleggen waarvoor het het OSI-model is ontwikkeld Je begrijpt het OSI-model / IP-stack. Je kunt de applicatielaag, transportlaag, netwerklaag, datalinklaag en fysische laag uitleggen. Je kunt twee voordelen benoemen van het werken met een lagenmodel zoals het OSI-model of de IP-stack. Je weet wat een MAC-adres is, bij welke laag het hoort en waarvoor het wordt gebruikt. Je weet wat ARP is en waarvoor het dient. Je weet wat het MAC broadcast adres is en waarvoor het dient. Je weet wat een IP-adres is, bij welke laag het hoort en waarvoor het wordt gebruikt. Je kunt met behulp van routeringstabellen het gedrag van een router bij een inkomend bericht beschrijven. Je weet wat het IP broadcast adres is en waarvoor het dient. Je weet wat een subnetmasker is en waarvoor dit dient. Je kunt met behulp van het subnetmasker uitrekenen hoeveel apparaten er in een netwerk verbonden kunnen zijn. Je weet wat het nadeel is van een subnetwerk met heel veel apparaten. Je kunt de twee belangrijkste verschillen tussen TCP en UDP benoemen Je weet wat TCP-poorten zijn en waarvoor deze dienen Je kunt beschrijven hoe een pakketje van een apparaat in het ene subnet naar een apparaat in het andere subnet reist. Je kent de functie van de volgende netwerkapparaten: router, modem, switch, wireless access point, repeater, firewall Je kunt beredeneren tot op welk niveau van het OSI-model een netwerkapparaat werkzaam is. Je kunt bij schematische weergave van een netwerk de verschillende netwerkapparaten herkennen en benoemen en IP-adressen en subnetmaskers bepalen of toewijzen. Je weet wat de functie van een firewall is. Je begrijpt wat een DNS is en waarvoor deze dient Je kunt uitleggen wat de functie van een DHCP server is. Oefentoets Je kunt een deel van je kennis en vaardigheden testen met de volgende oefenopgaven:\nOefenopgave IP-adressen en subnetten Antwoorden oefenopgave IP-adressen en subnetten ","description":"","tags":null,"title":"T7. Netwerken met IP","uri":"/theorie/netwerken/"},{"content":"Introductie In de vierde klas heb je in JavaScript met behulp van de library p5.js een spelletje gemaakt. Later leerde je de taal C++ om daarmee een microcontroller te programmeren. JavaScript en C++ zijn verschillende programmeertalen, toch lijken ze ook wat op elkaar: het programma dat je in deze talen maakt wordt stap voor stap uitgevoerd, commando na commando. Na ieder commando is de toestand waarin je programma zich bevindt weer een beetje anders.\nDeze manier van programmeren heet imperatief programmeren. Een andere manier van programmeren is bijvoorbeeld declaratief programmeren . Zo’n manier van programmeren heet een programmeerparadigma. Vanuit imperatief programmeren is in de loop der tijd een aparte paradigma onstaan: objectgeoriënteerd programmeren. De Engelse term hiervoor is object oriented programming, ofwel OOP. Heel veel programma’s zijn gemaakt met behulp van dit paradigma. Zonder dat je het misschien hebt doorgehad, heb bij bij het werken met Arduino ook gebruik gemaakt van objectgeoriënteerd programmeren. In deze module gaan we leren dit paradigma bewust toe te passen.\nOnderstaande uitleg gaat samen op met de verwerkingsopdrachten die horen bij deze module.\nHoofdstuk 1 – objecten, attributen, methoden, this, klassen Attributen Je hebt in opdracht 2 van de verwerkingsopdrachten kennisgemaakt met objecten. Voor iedere mens maakte je een object aan met de eigenschappen x, y, speedX en speedY. Stel je maakt handmatig zo’n object en in plaats van deze in een array te plaatsen, ken je deze toe aan een variabele. Dat zou er dan zo uit kunnen zien:\nvar mensA = { x: 300, y: 600, speedX: 2, speedY: -3 } Bij objectgeoriënteerd programmeren heet een eigenschap van objecten een attribuut. Je krijgt toegang tot een attribuut met behulp van puntnotatie. Om de waarde van attribuut x van mensA uit te lezen, gebruik je mensA.x, bijv:\nconsole.log(mensA.x); Wil je de waarde van een attribuut aanpassen, dan gebruik je dezelfde schrijfwijze:\nmensA.x = mensA.x + mensA.speedX; Methoden De laatste regel code zul je in array-vorm vast ook in je simulatie-opdracht hebben staan. We hebben nu dus objecten die gegevens die bij elkaar hoort netjes in bij elkaar hebben staan. Maar hoort programmeercode die de positie van het object op basis van de snelheid aanpast eigenlijk ook niet bij datzelfde object? Dat klopt. En daarom is het ook mogelijk om een object acties / handelingen te laten uitvoeren. Je zou je het kunnen voorstellen als een functie die bij een bepaald object hoort. In objectgeoriënteerd programmeren heet zo’n ‘functie van een object’ een methode.\nAls mensA ook een methode update moet hebben die de positie van mensA updatet, moeten we de code herschrijven:\nvar mensA = { x: 300, y: 600, speedX: 2, speedY: -3, update() { this.x = this.x - this.speedX; this.y = this.y - this.speedY; } } Als we vervolgens mensA.update aanroepen, wordt de methode uitgevoerd.\nthis Maar wat doet het keyword this in de code van update? Je zou je het als volgt kunnen voorstellen: de code binnen update heeft ‘geen idee’ dat dat object uiteindelijk via de naam mensA toegankelijk is. Die toekenning aan de naam mensA is als het ware onzichtbaar voor de code binnen het object. Toch wil je in de code van methode vaak een attribuut of methode van datzelfde object aanroepen. Daarvoor gebruikt je this. De code this.x = 90 betekent zoveel als: geef het attrituut x van mijzelf de waarde 90.\nKlassen Stel dat we meerdere mensobjecten met dezelfde eigenschappen en functionaliteit willen maken. We zouden hiervoor deze code kunnen gebruiken:\nvar mensA = { x: 300, y: 600, speedX: 2, speedY: -3, update() { this.x = this.x - this.speedX; this.y = this.y - this.speedY; } } var mensB = { x: 50, y: 100, speedX: -2, speedY: -1, update() { this.x = this.x - this.speedX; this.y = this.y - this.speedY; } } var mensC = { x: 200, y: 350, speedX: 3, speedY: 1, update() { this.x = this.x - this.speedX; this.y = this.y - this.speedY; } } Als het goed is, krijg je als programmeur jeuk van deze code. De code voor de methode update is drie keer precies hetzelfde! Dit moet toch beter kunnen? En kunnen we er wel vanuit gaan dat mensA, mensB en mensC wel dezelfde attributen en methoden hebben? Het is handig dat ze bijna dezelfde namen hebben, maar zijn ze wel vergelijkbaar?\nOm deze twee problemen op te lossen, maken programmeurs gebruik van klassen. Een klasse is een soort blauwdruk van een groep objecten. We kunnen bijvoorbeeld een klasse Mens maken. Ieder object van de klasse mens heeft dan gegarandeert beschikking over alle attributen en methodes die in de klasse beschreven zijn.\nEen klasse Mens zou er in JavaScript zo uit kunnen zien:\nclass Mens { x; y; speedX; speedY; constructor(newX, newY, newSpeedX, newSpeedY) { this.x = newX; this.y = newY; this.speedX = newSpeedX; this.speedY = newSpeedY; } update() { this.x = this.x - this.speedX; this.y = this.y - this.speedY; } } Uitleg\nDe eerste 4 regels van de klasse Mens geven aan welke attributen deze klasse heeft. De eerste methode is de zogenaamde constructor. Dit is een speciale methode die als doel heeft een object te creëren van deze klasse. De code in een constructor doet alles wat hiervoor nodig is. Omdat een mens in onze simulatie minimaal de eigenschappen x, y, speedX en speedY moet hebben, is het het beste om deze vier waarden direct aan de constructor mee te geven. Zo krijg je altijd een object dat gelijk functioneel is.\nDe argumenten van de constructor heten hetzelfde als de attributen van de klasse. Dat is niet verplicht. Je zou de parameter x ook newX (of – doe eens gek – a) mogen noemen. Merk wel op dat in de constructor x slaat op het eerste argument van de constructor en this.x op het attribuut x van de klasse. Deze constructorcode doet precies hetzelfde als de constructorcode hierboven, maar is veel slechter te begrijpen:\nconstructor(a, b, c, d) { this.x = a; this.y = b; this.speedX = c; this.speedY = d; } De code van update herken je zo langzamerhand wel. Valt je op dat de code in een klasse zo algemeen mogelijk is? Het is zo geschreven dat het werkt voor waarden die je nu nog niet weet, maar er wel zijn als van deze klasse een object gemaakt wordt. Wanneer je een nieuw object van de klasse Mens wilt maken gebruik je het keyword new. Wanneer je new gebruikt, wordt automatisch de constructor aangeroepen. Voorbeeld: var mensA = new Mens(300, 600, 2 -3); Termen en afspraken Een klasse is een blauwdruk voor een bepaald object. Objecten van dezelfde klasse hebben dezelfde attributen en methoden. De waarden die in de attributen zijn opgeslagen, zijn mogelijk wel voor ieder object verschillend. Als object mensA een object van de klasse Mens is, zeggen we ook wel dat mensA een instantie (Engels: instance) is van de klasse Mens. Een nieuw object maken heet ook wel ‘instantiëren’ Afspraken over de schrijfwijze: de naam van een klasse begint altijd met een hoofdletter. De naam van een object begint altijd met een kleine letter. Voor beide gebruik je Camelcase . Hoofdstuk 2 – Overerving, super, polymorfie en abstracte klassen Een programmeur die objectgeoriënteerd programmeert, komt vroeg of laat tot de ontdekking dat er twee klassen zijn, die heel erg op elkaar lijken, zoals een mens en een kat in onze simulatie. Beide organismen hebben een positie en een snelheid en kunnen besmet raken. Als programmeur krijg je de rillingen van dubbele code, dus hier moet toch wel een oplossing voor zijn? Dat klopt! Deze oplossing heet overerving. Wat houdt overerving in? Overerving houdt in dat je kunt aangeven dat de ene klasse alle attributen en methoden van een andere klasse erft, overneemt. Alsof je alle code kopieert en plakt. Op basis van die geërfde attributen en methoden kun je dan je klasse verder specificeren. De klasse die de attributen en methodes doorgeeft heet de superklasse. De klasse die ze erft, heet de subklasse. Voordat we kijken naar de oplossing voor klassen als Mens en Kat, richten we ons eerst een andere actor. We gaan dit niet doorvoeren in onze simulatie maar houden een gedachte-experiment: Stel dat er in onze simulatie dokters bestaan die zieken in één keer kunnen genezen. Ze hebben zelf toegang tot een vaccin en zijn daarom immuun. Een dokter heeft alle eigenschappen van een mens, maar ziet er anders uit: hij heeft een rood kruis. Ook zouden we iets aan de code moeten veranderen die de besmetting ‘regelt’. Hieronder zie je de code die nodig is om een dokter in het spel op te nemen:\nclass Mens { x; y; speedX; speedY; breedte; isBesmet; constructor(newX, newY, newSpeedX, newSpeedY) { this.x = newX; this.y = newY; this.speedX = newSpeedX; this.speedY = newSpeedY; this.breedte = 20; this.isBesmet = false; } update() { // stuiteren tegen linker- of rechterkant if (this.x \u003c= 0 || this.x + this.breedte \u003e= width) { this.speedX = this.speedX * -1; } if (this.y \u003c= 0 || this.y + this.breedte \u003e= height) { speedY = this.speedY * -1; } // geef nieuwe positie this.x = this.x - this.speedX; this.y = this.y - this.speedY; } show() { noStroke(); // kleur op basis van besmetting if (this.isBesmet) { fill(255, 0, 0); } else { fill(255, 255, 255); } // teken vierkant rect(x, y, breedte, breedte); } isOverlappend(andereMens) { // zet teruggeefwaarde standaard op false var overlappend = false; // zet teruggeefwaarde op true als een hoekpunt overlapt met andereMens if ( (this.x \u003e= andereMens.x \u0026\u0026 this.x \u003c= andereMens.x + andereMens.breedte \u0026\u0026 this.y \u003e= andereMens.y \u0026\u0026 this.y \u003c= andereMens.y + andereMens.breedte) || (this.x + this.breedte \u003e= andereMens.x \u0026\u0026 this.x + this.breedte \u003c= andereMens.x + andereMens.breedte \u0026\u0026 this.y \u003e= andereMens.y \u0026\u0026 this.y \u003c= andereMens.y + andereMens.breedte) || (this.x \u003e= andereMens.x \u0026\u0026 this.x \u003c= andereMens.x + andereMens.breedte \u0026\u0026 this.y + this.breedte \u003e= andereMens.y \u0026\u0026 this.y + this.breedte \u003c= andereMens.y + andereMens.breedte) || (this.x + this.breedte \u003e= andereMens.x \u0026\u0026 this.x + this.breedte \u003c= andereMens.x + andereMens.breedte \u0026\u0026 this.y + this.breedte \u003e= andereMens.y \u0026\u0026 this.y + this.breedte \u003c= andereMens.y + andereMens.breedte) ) { overlappend = true; } // stuur de teruggeefwaarde terug return overlappend; } } class Dokter extends Mens { show() { // teken zoals de klasse Mens dat doet super.show(); // en daarna nog een rood kruis strokeWeight(5); stroke(255, 0, 0); // rood line(this.x + this.breedte / 2, this.y, this.x + this.breedte / 2, this.y + this.breedte); line(this.x, this.y + this.breedte / 2, this.x + this.breedte, this.y + this.breedte / 2); } } De code onder draw moeten we nu zo aanpassen, dat dokters niet besmet kunnen raken en juist zieke mensen genezen. Verander daarom deze code\n// check of er een besmetting optreedt if (mensA.isBesmet || mensB.isBesmet) { // als er één besmet is, wordt ze allebei besmet // als ze allebei besmet zijn, verandert deze code niets. mensA.isBesmet = true; mensB.isBesmet = true; } in:\n// check of er een besmetting optreedt if (mensA.isBesmet || mensB.isBesmet) { if (mensA instanceof Dokter || mensB instanceof Dokter) { // minimaal één van de mensen is dokter, // dus ze worden / blijven beide gezond mensA.isBesmet = false; mensB.isBesmet = false; } else { // geen van de mensen is dokter, dus // als er één besmet is, wordt ze allebei besmet // als ze allebei besmet zijn, verandert deze code niets. mensA.isBesmet = true; mensB.isBesmet = true; } } Bestudeer de code hierboven. Er vallen een paar dingen op.\nDe klasse Dokter geeft met het keyword extends aan dat het en subklasse van Mens is. De klasse Dokter bevat verder alleen de methode show. Wanneer op een dokterobject show wordt aangeroepen, wordt niet de methode show van de klasse Mens uitgevoerd, maar die van Dokter. Een methodes uit subklassen overschaduwen als het ware methodes met dezelfde naam uit de superklasse. Omdat we in dit geval wel gebruik willen maken van de fucntionaliteit van de methode show van Mens, zouden we die graag alsnog willen aanroepen. Dat doen we met super.show. Daardoor wordt bij het uitvoeren van show eerst getekend zoals de klasse Mens dat doet, en tekent de klasse Dokter daar nog wat bovenop. met de operator instanceof kun je controleren of een object een instantie is van een bepaalde klasse. Deze operator geeft true terug als het object een instantie van die specifieke klasse is, maar ook als het een subklasse daarvan is. Dus, stel dat mensA een dokterobject is, dan geeft mensA instanceof Mens ook true terug. Dubbele code van Kat We hebben zojuist gezien dat we met Dokter een actor hebben gemaakt die vrijwel identiek was aan Mens. Door Dokter een subklasse van Mens te laten zijn, hoeven we maar een klein beetje Dokter-specifieke code te schrijven. De rest neemt de klasse over van Mens. Maar hoe lossen we dit op voor de code die Mens en Kat hetzelfde hebben? Immers, Mens is niet een speciaal soort Kat of vice versa. Maar Mens en Kat zijn wel beide actors. Deze klasse bestaat nog niet, maar die kunnen we wel maken. Actor wordt dan de superklasse van zowel Mens als Kat en bevat alle attibuten en methodes die deze twee klassen gemeenschappelijk hebben. Je zou de klasse Actor dan kunnen zien als de basisklasse voor alle actoren in onze simulatie.\n@TODO: plaatje van klassen Welke onderdelen hebben Mens en Kat gemeenschappelijk?\nDe constructors hebben beide code die x, y, speedX en speedY van waarden voorziet. De ingestelde breedte is echter voor beide anders. De methode update is voor beide klassen gelijk. Deze werkt de positie bij op basis van de snelheid en de randen. De methode isOverlappend is voor beide identiek. De methode show verschilt enorm. Hierin kunnen we geen gemeenschappelijke code destileren. Dit geeft ons in ieder geval de volgende code voor klasse Actor:\nclass Actor { x; y; speedX; speedY; breedte; isBesmet; constructor(newX, newY, newSpeedX, newSpeedY) { this.x = newX; this.y = newY; this.speedX = newSpeedX; this.speedY = newSpeedY; this.isBesmet = false; } update() { // stuiteren tegen linker- of rechterkant if (this.x \u003c= 0 || this.x + this.breedte \u003e= width) { this.speedX = this.speedX * -1; } if (this.y \u003c= 0 || this.y + this.breedte \u003e= height) { speedY = this.speedY * -1; } // geef nieuwe positie this.x = this.x - this.speedX; this.y = this.y - this.speedY; } show() {} isOverlappend(andereActor) { // zet teruggeefwaarde standaard op false var overlappend = false; // zet teruggeefwaarde op true als een hoekpunt overlapt met andereActor if ( (this.x \u003e= andereActor.x \u0026\u0026 this.x \u003c= andereActor.x + andereActor.breedte \u0026\u0026 this.y \u003e= andereActor.y \u0026\u0026 this.y \u003c= andereActor.y + andereActor.breedte) || (this.x + this.breedte \u003e= andereActor.x \u0026\u0026 this.x + this.breedte \u003c= andereActor.x + andereActor.breedte \u0026\u0026 this.y \u003e= andereActor.y \u0026\u0026 this.y \u003c= andereActor.y + andereActor.breedte) || (this.x \u003e= andereActor.x \u0026\u0026 this.x \u003c= andereActor.x + andereActor.breedte \u0026\u0026 this.y + this.breedte \u003e= andereActor.y \u0026\u0026 this.y + this.breedte \u003c= andereActor.y + andereActor.breedte) || (this.x + this.breedte \u003e= andereActor.x \u0026\u0026 this.x + this.breedte \u003c= andereActor.x + andereActor.breedte \u0026\u0026 this.y + this.breedte \u003e= andereActor.y \u0026\u0026 this.y + this.breedte \u003c= andereActor.y + andereActor.breedte) ) { overlappend = true; } // stuur de teruggeefwaarde terug return overlappend; } } Merk het volgende op:\nDe code van update is exact de code zoals die in Mens en Kat staat. De code van isOverlappend is hetzelfde, maar voor de juistheid is andereMens veranderd in andereActor. We moeten echter ook een principiële keuze maken. Kijk daarom eens naar het volgende in de code:\nDe code in de constructor is hetzelfde, maar this.breedte krijgt geen waarde mee. De methode show is leeg. Deze code van Actor heeft tot gevolg dat we over een Actor weten dat deze in principe een breedte heeft en in pricipe met show zichzelf zou moeten kunnen tekenen. De klas Actor zelf bevat echter niet de code om getekend te worden. Hiermee bepalen we als programmeur dus dat je allerlei actors kunt maken en dat we de basisfunctionaliteit in Actor hebben gedefinieerd. We bepalen echter ook dat wij of andere programmeurs geen directe instanties van de klasse Actor in de simulatie mogen gebruiken. Zo’n superklasse die zelf niet bedoeld is om te instantiëren maar alleen gedeelde eigenschappen en functionaliteit definieert noemen we een abstracte klasse.\nLet op Je kunt goede redenen hebben om van Actor juist GEEN abstracte klasse te maken. Dit is niet verplicht als een klasse meerdere subklassen als Mens en Kat heeft. Om van Actor een concrete klasse te kunnen maken, moeten we ervoor zorgen dat deze invulling geeft aan alle gedeclareerde attributen en methoden:\nwe geven this.breedte een waarde in de constructor we definiëren show met code die een ‘actor in het algemeen’ tekent zoals wij dat willen. (Tip: wel vierkant, want onze code in ‘isOverlappend’ gaat uit van een vierkant). Wat vind jij het meest logisch? Actor als abstracte klasse of juist niet?\nHoofdstuk 3 - Privé attributen, getters en setters, inkapseling, klasse variabelen Je hebt op dit moment al echt een heel leuke simulator gebouwd! Wees blij met het resultaat dat je hebt bereikt. We gaan ontwikkelen ’m nog een kleine stukje verder en dan is het genoeg geweest.\nJe zou je kunnen voorstellen dat een andere programmeur (collega?) een half jaar later jouw simulator verder uitbouwt. Deze collega heeft misschien geen idee van de exacte logica achter de Dokterklasse. Het zou met de huidige code zomaar kunnen dat die andere programmeur het attribuut isBesmet bij een dokter toch (per ongeluk) op true zet. Terwijl wij hadden bedacht dat dit juist niet zou moeten kunnen. We zouden hiervoor het attribuut isBesmet een beetje willen afschermen. Niet alles mag hier zomaar mee gedaan worden. Het uitlezen moet echter wel mogelijk zijn.\nOp dezelfde manier kun je ook van x, y kunnen zeggen dat deze niet van buitenaf veranderd zouden moeten kunnen worden. De positie wordt helemaal autonoom door de klassen geregeld. En laten we speedX, speedY, breedte en besmettelijkheidsTeller dan ook maar helemaal voor rare programmeurs beschermen. We willen gewoonweg niet dat dit zomaar wordt aangepast. Als dit wordt aangepast, dan op onze voorwaarden. Je zou er toch niet aan moeten denken dat een juniorprogrammeur een de breedte van een mensobject verandert in een negatief getal 😱.\nDit kun je doen door een attribuut private te maken. Een attribuut waarvoor dat niet geldt, heet public. Hoe je precies een attribuut publiek of privé maakt, verschilt nogal per objectgeoriënteerde taal. Wel heeft bijna iedere objectgeoriënteerde taal hier mogelijkheden voor. In JavaScript werkt het niet het meest fraai van alle programmeertalen, maar het is wel heel duidelijk: een privéattribuut begin met een #. Dus wil je isBesmet een private maken, dan verander je door je hele code dit attribuut in #isBesmet.\nNu hebben we isBesmet mooi afgeschermd van onverantwoorde veranderingen, we hebben dit attribuut nu ook afgeschermd van uitlezen… Dat was niet de bedoeling want nu kunnen we onze statistieken niet meer maken. Om dat op te lossen maken we een nieuwe methode in Actor:\ngetIsBesmet() { return this.#isBesmet } Omdat deze code binnen de klasse Actor staat, heeft deze wel toegang tot isBesmet en dan deze zo teruggegeven worden. Wil je van mensA de waarde van isBesmet weten? Dan gebruik je mensA.getIsBesmet(). (Toegegeven: ‘getIsBesmet’ is geen mooie code, maar om het niet moeilijker te maken houdt ik het even zo voorspelbaar mogelijk). Een methode die de waarde van een attribuut teruggeeft, heet een getter. Dezelfde manier kun je nu gebruiken om van x, y, speedX, speedY en breedte een attribuut te maken dat read-only is.\nHet zou kunnen dat je wilt dat je de positie van een actor toch van buitenaf moet kunnen aanpassen, maar dat dit wil een positie moet zijn binnen de simulatie. Je legt het schrijven van x en y dus beperkingen op. Dat kan zo:\nsetX(x) { var validX = x; if (validX \u003c 0) { validX = 0; } if (validX \u003e width) { validX = width; } this.#x = validX; } setY(y) { // constrain zorgt er net zoals de code onder setX voor // dat een variabele binnen een bepaald bereik valt. this.#y = constrain(y, 0, height); } De code onder setX en setY werkt hetzelfde, maar bij setY wordt gebruik gemaakt van de p5js-functie constrain , wat heel veel regels code scheelt! Wil je een actorobject een andere x-waarde geven? Dan kan dat zo: mensA.setX(145)\nEen methode die schrijftoegang tot een attribuut regelt, heet een setter. De werkwijze waarbij je toegang tot de gegevens van een object beperkt en de toegang principieel bij het object zelf legt, heet inkapseling (Engels: encapsulation). Deze techniek is erg belangrijk bij objectgeoriënteerd programmeren voorkomt allerlei ongewenst gebruik van klassen.\nWanneer je de simulator runt, zul je erachter komen dat de besmettingen niet meer werken. Dit komt doordat de code in update die de besmettingen ‘regelt’, geen waarde in #isBesmet kan schrijven. We kunnen dit regelen door in Actor een setter setIsBesmet(besmet) te maken:\nsetIsBesmet(besmet) { this.#isBesmet = besmet; } Maar dan hebben we opnieuw het probleem dat ook een dokterobject op deze manier besmet kan raken! Dit is echter gemakkelijk op te lossen. We definiëren ook in de klasse Dokter de methode setIsBesmet(besmet), waardoor bij de aanroep hiervan op een dokterobject deze code wordt uitgevoerd:\nsetIsBesmet(besmet) { this.#isBesmet = false } Hoofdstuk 4 - C++, polymorfie, voordelen en nadelen Je hebt nu op een redelijk niveau objectgeoriënteerd leren programmeren in JavaScript. Zoals eerder gezegd heb je, misschien zonder dat je het wist, ook al in C++ object georiënteerd geprogrammeerd. Neem bijvoorbeeld het gebruik van de Seriële Communicatie tussen je Arduino en de computer. Een heel simpel Arduinoprogramma dat elke seconde een berichtje stuurt, ziet er zo uit:\nvoid setup() { Serial.begin(9600); } void loop() { Serial.println(\"Dit is een bericht\"); delay(1000); } Serial is een object dat de Arduinosoftware aanmaakt om ons, eenvoudige programmeurs, toegang te geven tot seriële communicatie. Dit object heeft onder andere de methodes begin en println. (Hoewel Arduino zelf de naam van enkele objecten met een hoofdletter begint, houden wij ons aan de afspraak dat klassennamen met een hoofdletter beginnen en objectnamen met een kleine letter.)\nEn als je al eens een servomotor hebt aangestuurd, herken je hieronder ook objectgeoriënteerde code:\n#include \u003cServo.h\u003e Servo mijnServo; void setup() { mijnServo.attach(9); } void loop() { mijnServo.write(0); delay(500); mijnServo.write(180); delay(500); } Nu je weet hoe je klassen en objecten in JavaScript maakt, is het gemakkelijk om te leren hoe dit in C++ werkt. Hierbij maken we één belangrijke versimpeling, wanneer je klassen in losse bestanden aanlevert, moet dit verdeeld worden in twee bestanden. Eén bestand is de header file, eindigend op .h, die beschrijft welke attributen en methodes de klasse heeft en of het een superklasse heeft. Het andere bestand, eindigend op .cpp, bevat de programmeercode. Wij stoppen de code van een klasse echter voor het gemak in één bestand.\n#include \u003cArduino.h\u003e class Stoplicht { private: int toestand; int pinRood; int pinOranje; int pinGroen; void update() { if (this-\u003etoestand == this-\u003eROOD) { digitalWrite(this-\u003epinRood, HIGH); } else { digitalWrite(this-\u003epinRood, LOW); } // je kunt het ook korter schrijven: digitalWrite(this-\u003epinOranje, this-\u003etoestand == this-\u003eORANJE); digitalWrite(this-\u003epinGroen, this-\u003etoestand == this-\u003eGROEN); } public: // constante klasse attributen static const int GROEN = 0; static const int ORANJE = 1; static const int ROOD = 2; Stoplicht(int newPinRood, int newPinOranje, int newPinGroen) { // neem de opgegeven pinNummers over this-\u003epinRood = newPinRood; this-\u003epinOranje = newPinOranje; this-\u003epinGroen = newPinGroen; // maak van de pinnen OUTPUTs pinMode(this-\u003epinRood, OUTPUT); pinMode(this-\u003epinOranje, OUTPUT); pinMode(this-\u003epinGroen, OUTPUT); this-\u003etoestand = GROEN; } void rood() { this-\u003etoestand = ROOD; } void oranje() { this-\u003etoestand = ORANJE; } void groen() { this-\u003etoestand = GROEN; } int getToestand() { return this-\u003etoestand; } }; Je hebt gezien dat C++ ook gebruik maakt van de . om attributen en methodes van objecten aan te spreken. Bij this wordt echter -\u003e gebruik. Het voert te ver om precies uit te leggen waarom dit is. Het gebruik van this is in C++ echter niet verplicht. Je zult daarom ook vaker code tegenkomen zoals hieronder, waarbij de gewoonte is dat men private attributen laat beginnen met een _:\n#include \u003cArduino.h\u003e class Stoplicht { private: int _toestand; int _pinRood; int _pinOranje; int _pinGroen; void update() { if (_toestand == ROOD) { digitalWrite(_pinRood, HIGH); } else { digitalWrite(_pinRood, LOW); } // je kunt het ook korter schrijven: digitalWrite(_pinOranje, _toestand == ORANJE); digitalWrite(_pinGroen, _toestand == GROEN); } public: // constante klasse attributen static const int GROEN = 0; static const int ORANJE = 1; static const int ROOD = 2; Stoplicht(int newPinRood, int newPinOranje, int newPinGroen) { // neem de opgegeven pinNummers over _pinRood = newPinRood; _pinOranje = newPinOranje; _pinGroen = newPinGroen; // maak van de pinnen OUTPUTs pinMode(_pinRood, OUTPUT); pinMode(_pinOranje, OUTPUT); pinMode(_pinGroen, OUTPUT); _toestand = GROEN; } void rood() { _toestand = ROOD; update(); } void oranje() { _toestand = ORANJE; update(); } void groen() { _toestand = GROEN; update(); } int getToestand() { return _toestand; } }; Je mag zelf kiezen welke stijl je het meest aanspreekt, als je maar consistent bent.\nHet aanmaken van een stoplichtobject gebeurt als volgt:\nStoplicht lichtA(9, 10, 11);\nDeze regel code roept de constructor van de klasse Stoplicht aan met 9, 10 en 11 als waarden voor de pinnen van resp. het rode, oranje en groene licht.\nEen aantal zaken valt op:\nDe toegang wordt geregeld met de gedeelten public en private. Niet alleen attributen, maar ook methoden kunnen private zijn. De enige publieke methoden zijn rood, oranje en groen en de getter van _toestand. De methode update is private. Het aanpassen van de status van de pinnen wordt gedaan naar aanleiding van het aanroepen van rood, oranje of groen, maar hoeft niet door ’een ander’ te gebeuren. De constructor draagt de naam van de klasse. C++ is een sterk getypeerde (Engels: strongly typed) taal, dus attributen hebben een type en de methoden hebben een teruggeefwaarde (behalve de constructor) De ; na de klasse declaratie is noodzakelijk. Subclassing in C++ gaat (in eenvoudige vorm) vrijwel hetzelfde als in JavaScript:\nclass Lamp { private: bool _pin bool _isAan; public: Lamp(int newPin) { _isAan = false; pinMode(_pin, OUTPUT); } void zetAan() { _isAan = true; } void zetUit() { _isAan = false; } // voer in elke loop deze methode uit void update() { digitalWrite(_pin, _isAan); } }; class KnipperLamp : public Lamp { private: int _wachtTijd; unsigned long _veranderTimer; public: KnipperLamp(int newPin, int newWachtTijd) : Lamp(newPin) { _wachtTijd = newWachtTijd; _veranderTimer = millis() + _wachtTijd; } void update() { if (millis() \u003e _veranderTimer) { _isAan = !_isAan; _veranderTimer = millis() + _wachtTijd; } Lamp :: update(); } int getWachtTijd() { return _wachtTijd; } } Polymorfisme Stel, we hebben een aantal lampobjecten en knipperlampobjecten waarop we met behulp van een for-loop update willen aanroepen. De inhoud van een array moet in C++ van hetzelfde soort zijn, dus alleen ints, floats, of objecten van dezelfde klasse. Moeten we voor lampen en knipperlampen dan misschien twee afzonderlijke arrays maken? Nee, dat is niet noodzakelijk. Omdat Knipperlamp een subklasse is van Lamp, voldoet deze daarmee ook aan alle eigenschappen van Lamp. De volgende code is dus geldig:\n// een array met zowel lamp- als knipperlampobjecten Lamp lampen[] = { Lamp(3), KnipperLamp(9, 500), Lamp(5) } void setup() { lampen[0].zetAan(); lampen[1].zetAan(); // de laatste lamp laten we uit } void loop() { for (int i = 0; i \u003c lampen.length(); i++\u003e) { Lamp l = lampen[i]; l.update(); } } Laten we stap voor stap de for-loop hierboven doorlopen: We weten zeker dat er objecten in de array lampen objecten zitten die Lamp als klasse of superklasse hebben. We kunnen kunnen er dus vanuit gaan dat deze objecten de objecten en methoden hebben zoals die in Lamp staan.\ni = 0 l wordt behandeld als lampobject en is dat ook (het eerste element van de array lampen). De aanroep l.update() laat de methode update van de klasse Lamp uitvoeren.\ni = 1 l wordt behandeld als lampobject, maar is eigenlijk een knipperlampobject (het tweede element van de array lampen). De aanroep van l.update() laat de methode update van de klasse KnipperLamp uitvoeren.\ni = 2 Gaat net zoals bij i=0, maar dan voor het laatste object van lampen.\nDe aanroep van update kan, omdat we zeker weten dat de objecten in de array lampen die methode hebben. Omdat één van die objecten echter een subklasse van Lamp is, (namelijk KnipperLamp) die een eigen implementatie van update heeft, wordt in dat geval die code uitgevoerd. In principe hoeven we hier echter helemaal geen rekening mee te houden. In de for-loop mag je uitgaan van lamp-objecten.\nWanneer een object / functie / methode in verschillende scenario’s zich anders gedraagt, spreken we in de informatica van polymorfisme. Je komt dit ook op andere manieren tegen. De operator + kan in C++ zowel gebruikt worden om integers bij elkaar op te tellen, maar ook om strings aan elkaar vast te plakken.\nVoor- en nadelen van objectgeoriënteerd programmeren Objectgeoriënteerd programmeren is al tientallen jaren een populaire programmeerparadigma. Dit komt omdat deze manier van programmeren een aantal voordelen heeft die het erg aantrekkelijk maken.\nVoordelen Modulariteit Objectgeoriënteerd programmeren vereist dat een programma in modules wordt opgebouwd. Dit al handig bij kleine programma’s, maar werkt geweldig bij grote systemen die door hun omvang door uit verschillende deelsystemen bestaat die elk door andere personen of teams worden ontwikkeld. Bij objectgeoriënteerd programmeren kun je, als eenmaal is vastgelegd welke methode een klasse heeft, deze onafhankelijk van andere klassen implementeren.\nInkapseling In eerdere vormen van programmeren was het deels mogelijk om een programma in modules te ontwikkelen, maar data was dan gemakkelijk toegankelijk voor allerlei delen van de programmacode, ook delen die de data niet zouden mogen veranderen.\nDoor inkapseling van gegevens binnen klasse is het gemakkelijker om deze gegevens te ‘beschermen’. Ze zijn ontoegankelijk voor andere stukken programmeercode en daardoor is het gemakkelijker om regels over de data (zoals dat een waarde nooit kleiner mag zijn van 0) af te dwingen.\nFlexibel hergebruik Het is met behulp van objectgeoriënteerd programmeren erg gemakkelijk om code opnieuw te gebruiken in een andere context. Het principe van overerving speelt hierbij een belangrijke rol. Algemene eigenschappen van een klasse definieer je in een superklasse, specifieke eigenschappen in een subklasse. De subklassen gebruik je dan op verschillende plekken in je programma, of zelfs over meerdere programma’s. Hierdoor hoef je de algemene code maar één keer te schrijven en hergebruik je deze code dus telkens als je een subklasse gebruikt.\nNadelen Objectgeoriënteerd programmeren heeft echter ook een aantal nadelen. Of, beter gezegd: Er is ook wel wat af te dingen van dit mooie programmeerparadigma:\nObjectgeoriënteerd programmeren is moeilijk en kost veel tijd om een goed objectgeoriënteerd ontwerp te maken Het uitvoeren van een objectgeoriënteerd programma kost meer computerkracht en -geheugen dan de oudere manieren van programmeren. Er is sprake van meer overhead. Andere vormen van programmeren (zoals procedureel, functioneel of logisch programmeren) bieden voor bepaalde problemen een veel betere oplossing dan objectgeorienteerd programmeren. ","description":"","tags":null,"title":"T8 Theorie objectgeoriënteerd programmeren","uri":"/theorie/objectoriented_theorie/"},{"content":"Inleiding Om de overstap naar objectgeoriënteerd programmeren te maken, beginnen we met een puur imperatief programma en werken we dit stap voor stap uit naar een objectgeoriënteerd programma. We maken hiervoor een epidemiesimulator die visueel maakt hoe organismen elkaar kunnen besmetten met een ziekteverwekker. Tussen de opdrachten door vind je theorie over objectgeoriënteerd programmeren.\nIs het programmeren een beetje weggezakt? Kijk dan eerst nog eens op Khan Academy en gebruik gerust het syntaxblad .\nOpdracht 0 - Klaar voor de start Start een eigen repo en begrijp de code: Ga naar het GitHub-repository ‘ OOP-template ’. Log in bij GitHub en gebruik de knop Use Template om een kopie hiervan te maken in je eigen GitHub account. Maak van jouw repo een workspace in GitPod. Pin deze workspace in je GitPod Dashboard als je dat handig vindt, zo wordt deze niet automatisch door GitPod verwijderd. De code doet nog niet veel: het laat een vierkantje bewegen en stuiteren tegen de randen van het scherm. In de code zie je globale variabelen die de positie en de horizontale en verticale snelheid bevatten. Ook zie je de constante BREEDTE, die de waarde van de grootte van het vierkantje bevat.\nvar x; var y; var speedX; var speedY; const BREEDTE = 20; In setup krijgen deze variabelen hun initiële waarde. De positie is in het midden van het canvas. (Het midden van het vierkant is overigens niet exact in het midden. De waarden x en y worden gebruikt voor de linkerbovenhoek…) De horizontale en verticale snelheid krijgen bij de start een random waarde tussen -5 en 5.\nx = width / 2; y = heigth / 2; speedX = random(-5, 5); speedY = random(-5, 5); In draw wordt netjes een wit vierkantje getekend met behulp van de waarden van x, y en BREEDTE. Herinner je je nog dat de functie rect een vierkant tekent met de linkerbovenhoek op de meegeven positie?\nrect(x, y, BREEDTE, BREEDTE); Opdracht 1 – Meerdere mensen Je simulatie-omgeving bestaat nu uit één mens. Er zijn er natuurlijk meer nodig. Hiervoor hebben we niet één x, y, speedX en speedY nodig, maar meerdere. Je kunt dit in je programma voor elkaar krijgen door te werken met arrays. Voor ieder mens staat er in de verschillende arrays een waarde. Dezelfde mens heeft z’n waarde steeds op dezelfde plek / index van de arrays. Dus voor de x- en y posities van 3 mensen zou je deze code kunnen gebruiken:\nxPosities = [130, 60, 470]; yPosities = [700, 1010, 40]; Ondersteuning Zie je niet helemaal voor je hoe bovenstaande techniek werkt? Maak eerst weer eens de opdracht Make it rain van KhanAcademy. Daar gebruiken ze deze techniek voor de x- en y-waarde van de regendruppels.\nProgrammeren Verander de namen van de globale variabelen zo, dat je ze herkent als een array. Dus bijv. xPosities in plaats van x, etc. Verander in setup de initiële waarden in arrays met ieder 5 waarden, zodat er vijf mensen getekend kunnen worden. Je mag voor nu zelf beslissen of je de waarden zelf bedenkt of ze random laat zijn. Hoe meer waarden je random laat zijn, hoe verrassender je simulator wordt. Verander in draw de code zo, dat je voor iedere mens: de positie verandert met de bijbehorende snelheden checkt of deze moet stuiteren Hint 1 Check nogmaals Make it rain als je hier niet uitkomt. Als je niet 100% begrijpt wat er in die opdracht wordt gedaan, kun je beter daar eerst aandacht aan besteden, anders blijft wat hieronder komt abracadabra.\nHint 2 Verander var x; in var xPosities;, en verzin voor de andere drie globale variabelen ook namen die je laten vermoeden dat het om een array met meerdere waarden gaat.\nVervolgens moet je in de setup die variabele niet één waarde meegeven, maar een array met vijf waarden, bijvoorbeeld xPosities = [192, 450, 800, 120, 75]. Doe dit ook voor de andere drie globale variabelen.\nJe hebt nu 4 arrays, met waarden die bij elkaar horen. Dus de waarden van element 0 uit alle vier de arrays vormen samen de waarden voor één mens. De informatie staat dus als het ware ‘verticaal’ in je code.\nHint 3 Je moet op de plek waar je de mensen tekent, update en laat stuiteren een for-loop gebruiken die dit nu op alle waarden van de arrays toepast:\nfor (var i = 0; i \u003c xPosities.length; i++) { // hier moet de code komen voor het tekenen, updaten en stuiteren // bedenk dat deze waarden in arrays staan. De variabele `i` kun je // gebruiken om steeds het volgende element te 'kiezen' } Hint 4 Deze tekencode in de for-loop werkt niet:\nfor (var i = 0; i \u003c xPosities.length; i++) { rect(xPosities, yPosities, BREEDTE, BREEDTE); // hieronder zou de update- en stuitercode moeten staan } Dat komt omdat rect een enkele waarde nodig heeft, en geen array met waarden. Dus bijvoorbeeld rect(xPosities[0], yPosities[0], BREEDTE, BREEDTE);\nMet deze code worden echter 5 keer dezelfde waarden gebruikt, namelijk die van element nul. Je zou willen dat iedere keer het volgende element uit de arrays gebruikt wordt. Toevallig hebben we in de for-loop een variabele die precies van 0 tot en met 4 gaat: i.\nDeze code werkt wel:\nfor (var i = 0; i \u003c xPosities.length; i++) { rect(xPosities[i], yPosities[i], BREEDTE, BREEDTE); // hieronder zou de update- en stuitercode moeten staan } Deze hint kun je ook toepassen op de update- en stuitercode.\nControleer je code Opdracht 2 – objecten De manier waarop je bij opdracht 1 de gegevens in arrays hebt gestopt werkt prima, maar is niet in overeenstemming met welke gegevens er volgens je gevoel bij elkaar horen: niet alle x-posities, y-posities, etc. horen bij elkaar, maar alle gegevens van 1 bepaald mens. Je zou eigenlijk willen dat je die gegevens bij elkaar zou kunnen zetten. Dat kan met behulp van objecten.\nProgrammeren Maak het gehele onderdeel Objects van Khan Academy. Dus van ‘Intro’ tot en met ‘Bookshelf’). Gebruik je opgedane kennis om in je Simulator in plaats van 4 arrays met losse waarden, 1 array genaamd mensen met objecten te maken: 5 objecten – voor iedere mens één. Zorg ervoor dat alles blijft werken. Hint 1 Verwijder boven de setup de declaratie van de vier globale variabelen en schrijf daar var mensen; Vervang in de setup de code waar je arrays met waarden aan die globale variabelen gaf en schrijf in plaats daarvan: mensen = [ {x: 320, y: 100, speedX : 2 speedY : -4}, {x: 500, y: 490, speedX : -3 speedY : 1}, // voeg hier ZELF nog 3 extra mensobjecten toe. // na het laatste object GEEN komma ]; Mensen wordt met deze code een array van objecten. Verander je teken-, update- en stuitercode ook zo dat deze past bij deze nieuwe vorm.\nHint 2 Voor de tekencode ziet de aanpassing er zo uit:\nfor (var i = 0; i \u003c mensen.length; i++) { rect(mensen[i].x, mensen[i].y, BREEDTE, BREEDTE); // hieronder zou de update- en stuitercode moeten staan } mensen[i].x betekent: van de array mensen het i-de element, en van het object dat je daarmee krijgt, attribuut x.\nProbeer zelf de code voor het updaten en stuiteren te maken.\nControleer je code Lees nu hoofdstuk 1 van de theorie Opdracht 3 – 25 random mensen maken. En wat doen die katten daar? 😼 In de theorie van hoofdstuk 1 is een heel groot deel van de klasse Mens gegeven. Je maakt deze klasse verder af en gebruikt deze om 25 mensobjecten te maken die zich in onze simulatie bewegen:\nProgrammeren a) 25 random mensen Neem de code van de class Mens uit de theorie over en plaats deze code nog boven je globale variabele(n).\nDe klasse Mens bevat alle code die nodig is om de positie van een mensobject te updaten. Verwijder deze code uit draw en roep in plaats daarvan update aan op het betreffende object. Hint 1 De code die speedX bij x optelt en speedY bij y hebben we verhuisd naar de class Mens. Die hebben we in draw niet meer nodig.\nHint 2 De code staat in de for-loop:\nmensen[i].x = mensen[i].x + mensen[i].speedX; mensen[i].y = mensen[i].y + mensen[i].speedY; Deze updatecode zit nu in de class Mens en mag dus weg.\nDe code die controleert of een mens tegen de rand van de simulatiewereld botst, moet ook verhuizen naar de klasse Mens. Breidt de methode update uit. Gebruik hiervoor de betreffende code die je in draw vindt en pas deze aan. Je kunt nu op de oude plek van de code de methode update() aanroepen. Hint 3 Bij de updatecode hoort niet alleen het geven van een nieuwe positie, maar ook het stuiteren. Haal deze code uit de for-loop en plaats deze in de methode update van de class Mens. Je moet het hiervoor nog wel even omvormen naar this enz.\nDe code die een mens tekent, is ook typisch iets wat bij de klasse Mens hoort. Maak een nieuwe methode show en teken hierin het vierkantje. Haal ook de constante BREEDTE weg. Maak hiervan een attribuut (gebruik dan breedte) en zet de waarde hiervan in de constructor op 50. Je hoeft hiervoor dus niet een argument aan de constructor toe te voegen. Verwijder de code die het vierkant tekent uit draw en roep in plaats daarvan show op de objecten aan.\nWe gaan nu de array mensen vullen met 25 random mens-objecten. Verwijder de code die je bij opdracht 2 in setup hebt gezet om handmatig 5 mens-objecten te maken. Schrijf in plaats daarvan deze code:\n// maak 25 random mensen for (var teller = 0; teller \u003c 25; teller++) { // we moeten ze niet te dicht bij de rand tekenen // om geen problemen met stuiteren te krijgen var ruimteTotRand = 50; // creëer random positie en snelheid var randomX = random(ruimteTotRand, width - ruimteTotRand); var randomY = random(ruimteTotRand, height - ruimteTotRand); var randomSpeedX = random(-5, 5); var randomSpeedY = random(-5, 5); // maak nieuw mensobject var nieuwMens = new Mens(randomX, randomY, randomSpeedX, randomSpeedY); // voeg mensobject toe aan array mensen.push(nieuwMens); } Deze code maakt 25 keer een nieuw mens-object met random waarden aan en voegt deze toe aan de array mensen. Zorg ervoor dat je deze regels begrijpt. Uitleg over push vind je onder andere op de shite van w3schools Bekijk het resultaat. Als het goed is, heb je nu 25 vierkantjes die door elkaar heen vliegen en tegen de randen stuiteren.\nControleer je code b) besmettingen Het wordt tijd dat deze mensen elkaar kunnen besmetten. Het idee is dat mensen elkaar besmetten als ze elkaar in hun beweging overlappen.\nGeef de klasse Mens een nieuw attribuut isBesmet. Dit attribuut initialiseer je in de constructor op false. Je hoeft hiervoor dus geen argument aan je constructor toe te voegen. Hint Bovenin de class Mens, onder speedY, schrijf je isBesmet; In de constructor typ je onder de regel this.speedY = speedY: this.isBesmet = false;\nDaar heb je dus geen extra informatie voor nodig die meegegeven zou moeten worden aan de constructor. Het is gewoon altijd false als een mens-object wordt aangemaakt.\nVoeg in setup, na de for-loop die de 25 mensen aanmaakt, deze regel code toe:\nmensen[0].besmet = true; Hierdoor wordt alvast één mens besmet.\nVerander de code in de methode show zo, dat een mens als rood vierkant wordt getekend als deze besmet is. Als het goed is, wordt één vierkant nu rood getekend. Hint Als isBesmet waar is, moet er iets anders getekend worden dan wanneer isBesmet onwaar is. Gebruik hiervoor een if-statement.\nVervolgens maken we een methode die kan controleren of een ander mens-object overlap heeft met het object dat de methode uitvoert. Ga voor jezelf na of je de volgende zin begrijpt: Omdat een mens getekend wordt als een vierkant, overlappen twee mensen elkaar als één van de hoeken van het ene vierkant zich binnen de randen van het andere vierkant bevindt. Onderstaande code bevat het begin van de methode isOverlappend. De methode controleert nog alleen voor de linkerbovenhoek. Voeg deze code toe aan de klasse Mens en voeg zelf de code toe die de andere drie hoeken van this controleert. Als je merkt dat het controleren van overlap moeilijk is, maak dan eerst de oefening Smarter Button van Khan Academy weer eens.\nisOverlappend(andereMens) { // zet teruggeefwaarde standaard op false var overlappend = false; // zet teruggeefwaarde op true als er een overlap is if ( (this.x \u003e= andereMens.x \u0026\u0026 this.x \u003c= andereMens.x + andereMens.breedte \u0026\u0026 this.y \u003e= andereMens.y \u0026\u0026 this.y \u003c= andereMens.y + andereMens.breedte) /* VUL HIER ZELF LATER AAN VOOR DE ANDERE HOEKEN*/ ) { overlappend = true; } // stuur de teruggeefwaarde terug return overlappend; } Hint Pak een vel papier en teken twee vierkantjes: één voor ’this’, één voor ‘andereMens’. Schrijf bij de randen van de vierkanten welke waarden daarbij horen. De bovenrand van ‘andereMens’ hoort bijvoorbeeld bij andereMens.y.\nAls je dit voor alle 8 zijden hebt gedaan, teken de vierkantjes dan eens zo, dat het vierkant van ’this’ met de linkerbovenhoek in het vierkant van ‘andereMens’ zit. Probeer nu te kijken of je de code in het if-statement hierboven kunt begrijpen.\nNu moeten we in draw code toevoegen die alle mogelijke paren van mensobjecten controleert of ze overlappen. Indien ze overlappen, controleren we of een van die objecten besmet is. Als dat zo is wordt het andere ook besmet (als het dat nog niet is). Een simpele manier om dit te controleren is in een for-loop ieder object te controleren met ieder ander object, behalve zichzelf. Dit ziet er zo uit: // ga alle mensen langs for (var i = 0; i \u003c mensen.length; i++) { var mensA = mensen[i]; // ga met mensA opnieuw alle mensen langs om te checken op overlap, behalve met zichzelf for (var j = 0; j \u003c mensen.length; j++) { var mensB = mensen[j]; if (mensA != mensB) { // check overlap var mensenOverlappen = mensA.isOverlappend(mensB); if (mensenOverlappen) { // check of er een besmetting optreedt if (mensA.isBesmet || mensB.isBesmet) { // als er één besmet is, wordt ze allebei besmet // als ze allebei besmet zijn, verandert deze code niets. mensA.isBesmet = true; mensB.isBesmet = true; } } } } } Ga de code eens regel voor regel af en leg aan jezelf (of je buur) uit wat hier gebeurt.\nControleer je code c) katten… 🐈 Helaas komen de gezondheidsinstanties erachter dat ook katten een rol spelen in de verspreiding van de ziekte. We zullen ook deze moeten opnemen in onze simulatie.\nDe array mensen gaat ook dieren bevatten. Het is raar als deze naam hetzelfde blijft. Alle ‘dingen’ die iets in onze simulatie doen, heten ‘actoren. Verander door je hele code de naam van de array mensen in actoren. Hint Zoek de regel waar je de mensen als globale variabele declareert. Waarschijnlijk staat er var mensen;. Klik met de rechtermuisknop op mensen en kies in het menu dat verschijnt ‘Rename Symbol’. Wanneer je op deze manier de naam wijzigt, wordt de naam van deze variabele overal gewijzigd. Wel moet je nog even door de comments gaan om te zien of je ook daar misschien ‘mensen’ moet wijzigen in ‘actoren’\nMaak onder de klasse Mens een nieuwe klasse met de naam Kat. Laat deze precies hetzelfde doen als Mens, maar met deze verschillen:\nde breedte van een kat is 10 pixels een niet-besmette kat is blauw in plaats van wit een besmette kat is oranje in plaats van rood Voeg in setup na de 25 mensen ook 10 katten toe aan de simulatie. Geef de katten een random snelheid tussen -2 en 2. Hint Je kunt hiervoor even snel de for-loop die je voor de 25 mensen gebruikt, kopiëren en direct daaronder plakken en aanpassen naar 10 katten.\nControleer je code Lees nu hoofdstuk 2 van de theorie Opdracht 4 In de theorie van hoofdstuk 2 heb je de gezien hoe de code van de superklasse Actor eruit ziet. Je gaat nu de code van Mens en Kat aanpassen.\nProgrammeren a)\nVoeg, zoals in de theorie voorgedaan, de klasse Dokter toe aan je code en voeg 1 dokterobject toe aan de actoren. Controleer of de dokter verschijnt en anderen geneest. Controleer je code b)\nMaak Mens en Kat subklassen van Actor. Bedenk goed welke code weg mag en welke code veranderd moet worden. Eén methode blijft onveranderd. Weet je welke? Hint De methode show van Actor moet leeg blijven, omdat we Actor abstract maken. Dus de tekencode van show moet in subklassen staan.\nHint Het is raar om in een abstracte klasse als Actor wel een breedte mee te geven. We definiëren breedte daarom wel in Actor, maar geven er geen waarde aan. Dat moet in de constructor van Mens en Kat gebeuren.\nControleer je code c)\nVervolgens gaan we de ‘statistieken’ van onze simulatie laten zien. De verantwoordelijkheid voor deze code ligt niet bij een van de actoren, maar bij het ‘raamwerk’ van de simulatie. Deze code schrijven we daarom in dit geval onder draw. Zorg dat je op die plek met behulp van de p5js-functie text twee regels in de linkerbovenhoek plaatst: een met het aantal onbesmette actoren en een met het aantal besmette actoren. Hint Tip: hiervoor moet je de array actoren doorlopen met een for-loop. Er is overigens al een for-loop die hier prima geschikt voor is.\nHint Je hebt variabelen nodig om de telling tijdelijk in op te slaan. Zou je kieen voor globale of lokale variabelen?\nControleer je code d)\nIedere actor die eenmaal besmet is, wordt in onze simulatie nooit meer beter, tenzij de dokter langskomt. Dat moet veranderen. Actoren moeten ook uit zichzelf weer beter kunnen worden. We gaan daarvoor een teller maken die bij besmetting voor een Mens begint bij 400 en voor een Kat begint op 200. Bij iedere aanroep van de methode update wordt de afteltimer 1 kleiner. Als de afteltimer 0 is, wordt het attribuut isBesmet weer op false gezet. Vraag jezelf hiervoor het volgende af: in welke klasse definieer je besmettelijkheidsTeller? hoe zorg je dat besmettelijkheidsTeller wordt ingesteld wanneer er een besmetting plaatsvindt? Tip: maak een methode besmet() die isBesmet op true zet EN de besmettelijkheidsTeller instelt. hoe maak je het verschil in gedrag tussen Mens en Kat? Als je het in kleine stapjes wilt doen: Maak het eerst werkend voor één klasse. Maak het daarna werkend voor de andere klasse. Verplaats waar mogelijk dubbele code naar Actor. wat gebeurt er met de besmettelijkheidsTeller als update wordt aangeroepen en de actor is niet besmet? wat gebeurt er met de besmettelijkheidsTeller als deze aan het aflopen is en er opnieuw contact is met een andere, besmette, actor? Controleer je code Speel gerust eens met de waarden van de besmettelijkheidsTeller of het aantal dokters om te zien wat er in je simulatie gebeurt.\nLees nu hoofdstuk 3 van de theorie opdracht 5 Programmeren In de theorie van hoofdstuk 3 is een heel aantal veranderingen genoemd. Verander je code zo, dat de genoemde attributen private worden en ze de juiste getters en setters hebben. Alle code staat nog in één bestand: script.js. Dit is niet handig als je code gemakkelijk herbruikbaar wilt maken. Daarom doen we het volgende: we maken voor iedere klasse een apart bestand aan, zoals actor.js, mens.js etc. je javascript wordt uitgevoerd binnen de HTML-pagina index.html. Het JavaScript-bestand wordt hierin netjes geladen. Nu we de code hebben verdeeld over meerdere bestanden, moeten we ook aangeven dat deze worden geladen. Voeg boven de regel: \u003cscript id=\"canvas\" href=\"script.js\"\u003e\u003c/script\u003e voor ieder bestand nieuwe regel toe zoals: \u003cscript href=\"actor.js\"\u003e\u003c/script\u003e Maak zelf een heel nieuwe actor voor de simulatie. Je mag zelf weten of het een directe subklasse van Actor, Mens, Kat of Dokter is, zolang je maar geen code in (één van de) superklassen gaat veranderen om jouw nieuwe klasse te laten werken. Zet deze code in een los bestand. Maak een volledig UML klassendiagram van de vijf klassen die in jouw simulatie voorkomen. Wissel met een klasgenoot jullie zelfbedachte actorklassen uit en neem deze op in je eigen simulatie. Als het goed is, heb je niet veel code nodig om dit voor elkaar te krijgen. Hint Wissel uit door:\nde bijbehorende bestanden elkaar te sturen. in je HTML bestand ook dit nieuwe bestand te laden. in je setup een zelfbedacht aantal van deze nieuwe klasse actoren op te nemen. Lees nu hoofdstuk 4 van de theorie Opdracht 6 In deze opdracht maak je een eigen klasse in C++. Kies uit de volgende twee klassen:\nEen klasse die twee LEDs om en om laat knipperen, dus als de waarschuwingslichten bij een spoorwegovergang. Deze lichten kunnen ook in zijn geheel uit staan. Een klasse die een knop uitleest. Bij het indrukken van de knop wisselt de status van het bebehorende object van aan naar uit en andersom. a) uitdenken Maak, met theorie van het hoofdstuk 4 in je achterhoofd, een beschrijving (d.w.z. een UML-schets en informele beschrijving van methoden) van de nieuwe klasse. Probeer uit hoever je kan bedenken wat er allemaal in de klasse moet komen.\nb) programmeren Maak in C++ de klasse zoals je die hebt bedacht. Test de klasse uit en pas aan waar nodig, totdat deze werkt zoals gevraagd. c) uitbreiden Heb je gekozen voor de waarschuwingslichten? Kun je het zo maken dat je de knippersnelheid kunt aanpassen? Op welke manier maak je deze eigenschap toegankelijk voor andere programmeurs? Heb je gekozen voor de knop. Kun je het zo maken dat de lichte storing die optreedt rond het indrukken van de knop weggefilterd wordt? Je noemt dit debouncen. Check deze voorbeeldcode voor een idee. ","description":"","tags":null,"title":"T8 Verwerkingsopdrachten","uri":"/theorie/objectoriented_verwerkingsopdrachten/"},{"content":"Je leert objectgeoriënteerd programmeren. Dat is een manier van programmeren waarbij data en logica gebundeld zijn in objecten. We leren dit voor zowel JavaScript als C++.\nTheorie Theorie objectgeoriënteerd programmeren Lespresentatie Opdrachten Verwerkingsopdrachten Naslagmateriaal (ook beschikbaar bij toets) Naslagmateriaal objectgeoriënteerd programmeren Naslagmateriaal JavaScript en p5js Naslagmateriaal C++ en Arduino Leerdoelen Je weet wat het verschil is tussen een klasse en object. Je weet wat attributen en methodes van objecten zijn. Je weet wat inkapseling is. Je kunt uitleggen wat het verschil is tussen private en public attributen en methodes en dit principe toepassen. Je kunt op basis van een beschrijving in combinatie met stukje code beslissen welke attributen je private en welke je public zou maken. Je weet wat getter- en setter-methodes zijn. Je kunt een beargumenteerde keuze maken om voor een attribuut wel / niet gebruik te maken van getter en / of setter. Je kunt zelf code voor getter- en settermethodes maken. Je kunt uitleggen wat ‘overerving’ betekent en dit principe toepassen. Je begrijpt de termen superklasse en subklasse. Je begrijpt wat een abstracte klasse is. Je kunt in JavaScript objectgeoriënteerde code lezen en schrijven (eerdere kennis wordt verondersteld). Je kunt in C++ (Arduino-code) objectgeoriënteerde code lezen. Je kunt zelfstandig objectdiagrammen en (ontwerp)klassendiagrammen maken. Je kunt een ontwerpklassendiagram maken met behulp van een beschrijving van systeem. Je kunt een (ontwerp)klassendiagram omzetten naar JavaScript en andersom. Je bent hierbij in staat om relaties tussen klassen om te zetten naar code. Je kunt C++ (Arduino-code) omzetten naar (ontwerp)klassendiagram. Je kent drie voordelen en drie nadelen van objectgeoriënteerd programmeren. Oefentoets Oefentoets Antwoordwoorden oefentoets ","description":"","tags":null,"title":"T8. Objectgeoriënteerd Programmeren","uri":"/theorie/objectoriented/"},{"content":"Over de beveiliging van computers en data.\nTheorie Informatica Actief - Security en Privacy , theorie 1 t/m 3 Reader security , hoofdstuk 2 t/m 6 Handout lespresentaties Overig materiaal op deze pagina Naslagmateriaal toets Klik om te downloaden Uitlegvideo’s Onderstaande video’s horen niet bij de verplichte stof, maar kunnen wel helpen de stof te begrijpen of extra informatie geven als je meer wilt weten.\nAES-encryptie: de details Diffie Hellman m.b.v. verf Uitleg en mogelijkheden van public key cryptography Extra uitleg asymmetrische encryptie De wiskundige kant van RSA-encryptie Leerdoelen Behorende bij reader Security met toegevoegd [paginanummer]: H2: Je kunt uitleggen wat authenticatie is. [44] Je kunt uitleggen wat two factor authentication (2FA) is. [44] Je kunt uitleggen hoe een botnet wordt opgezet en wat er mee wordt gedaan. [45] Je kunt de sterkte van wachtwoorden kunnen bepalen of vergelijken. [46] Je kun aan de hand van een wachtwoordformaat uitrekenen hoeveel mogelijkheden maximaal moeten worden gecontroleerd in een brute force attack, zowel met als zonder gebruik van een dictionary. [46 + overig materiaal] Je kunt uitleggen wat phishing is. [52] H3: Je kunt uitleggen wat social engineering is [55] Je kunt drie methoden om te hacken beschrijven. [59] Je kent in de context van security de principes confidentiality, integrity, availability, kunt deze uitleggen en toepassen op een casus. [61] Je kunt werken met de analogie van Alice, Bob en Eve (of Chris). [63] H4: Je begrijpt hoe de versleuteling met behulp van (Caesar)substitutie werkt en je kunt er een boodschap mee versleutelen en ontcijferen [65] Je begrijpt hoe de versleuteling met behulp van transpositie werkt en je kunt met behulp van een gegeven transpositiemethode een boodschap versleutelen en ontcijferen [66] Je begrijpt hoe de versleuteling met behulp van Vigenèresubstitutie werkt en je kunt er met een uitgeprinte hulptabel een boodschap mee versleutelen en ontcijferen. [72] H5 Je kunt uitleggen wat versleuteling met m.b.v. een one time pad (of: eenmalig blokcijfer) inhoudt en waarom deze manier van versleutelen, onder de juiste voorwaarden, niet te kraken is. Je kent deze voorwaarden. [76] Je weet wat de (binaire) XOR-operatie is, op welke wijze deze een rol kan vervullen bij versleuteling en kunt deze operatie toepassen [78] Je kunt in grote lijnen uitleggen via welke vier stappen AES-encryptie werkt. [80 + overig materiaal] H6 Je kunt het verschil tussen HTTP en HTTPS uitleggen. [86] Je kunt uitleggen wat het verschil is tussen symmetrische en asymmetrische cryptografie en herkennen of een vorm van encryptie symmetrisch of asymmetrisch is. [89] Je weet hoe sleuteluitwisseling m.b.v. Diffie-Hellman plaatsvindt en kunt dit voordoen met gegeven getallen p en g. [92] Je kunt uitleggen welke stappen in de communicatie tussen browser en webserver plaatsvindt om een versleutelde verbinding tot stand te brengen. [93] Je kunt aan de hand van de inhoud van een website beredeneren of het onverantwoord is om deze met behulp van HTTP te benaderen. [93] Je begrijpt hoe de versleuteling met behulp van RSA werkt en je kunt er met gegeven eenvoudige sleutels m.b.v. je grafische rekenmachine een boodschap mee versleutelen en ontcijferen. [94 + overig materiaal] Je kunt met een gegeven getal p en q m.b.v. je grafische rekenmachine zelf een publiek en privé sleutelpaar genereren. [overig materiaal] Je kunt uitleggen welke twee functies encryptie met een public en private sleutelpaar heeft. [94 + overig materiaal] Je kunt uitleggen wat een ‘man-in-the-middle-attack’ is. [96] Je kan uitleggen welke de functies van een webcertificaat heeft en welke informatie het daarvoor bevat. [97] Je weet welke stappen een browser uitvoert om een webcertificaat te controleren. [97] Je weet wat een stamcertificaat / rootcertificate is. [98] Je kunt de rol van certificaat-autoriteiten beschrijven. [100] Behorend bij Informatica Actief of overig materiaal: Je kunt uitleggen wat een cookie is en welke functie een cookie heeft. Je kent de kenmerken van verschillende soorten malware (virussen, wormen, Trojaans paard, ransomware). Je weet onder andere hoe ze zich verspreiden, en wat hun typische doel of effect is. Je kunt uitleggen wat een dictionary attack is. Je kent de algemene kenmerken van een hash(functie). Je kunt een paar voorbeelden geven van populaire hash-algoritmen Je kent in de context van hashing de begrippen salting en collision Je kunt verschillende toepassingen van hashing uitleggen, zoals wachtwoordverificatie, het controleren van de authenticiteit van data of het identificeren van bestanden. Oefenopgaven Oefenopgaven Uitwerkingen ","description":"","tags":null,"title":"T9. Security","uri":"/theorie/security/"},{"content":"GitHub is een website waar je code kunt opslaan.\nWat is GitHub? GitHub is een website waar je code kunt opslaan\nHeel veel goede programmeurs gebruiken GitHub Heel veel programmeeromgevingen kunnen samenwerken met GitHub GitHub bewaart alle oude versies van je code Code op GitHub kun je gemakkelijk delen met anderen GitHub biedt heel veel speciale mogelijkheden om in groepen aan dezelfde code te werken GitHub kun je zien als een soort cloudopslag voor je code. Github slaat code op in repositories. Een repository (kortweg: repo) bevat de code voor één project of opdracht. De kern van een repository zijn de bestanden.\nEen account aanmaken Ga naar https://www.github.com/ (gebruikt Chrome of Firefox, in 21/22 werkt dit niet in Safari) Klik op sign-up Gebruik je email adres van school ( 1xxxxx@emmauscollege.nl ) Zorg dat je het wachtwoord dat je kiest terug kunt vinden Kies als username je voornaam met een letter van je achternaam, als die al bezet is voeg je een nummer toe. Bijvoorbeeld jamesb007 Bevestig je account door te klikken op de link in de mail die je ontvangt van GitHub Hoe werkt code wijzigen in Github? Er zijn veel manieren om code die je in GitHub bewaard te wijzigen. Bijna altijd maak je eerst een kopie van GitHub in je eigen ontwikkelomgeving (je computer of een online ontwikkelomgeving zoals Gitpod of Replit). Dit heet clonen (spreek uit als “kloonen”). Vervolgens wijzig en test je code die in je clone zit. Als een wijziging goed is, dan zet je die terug op GitHub. Dit wijzigen gaat in de volgende stappen:\nPull : Haal alle updates van GitHub binnen in je lokale repository. Codeer : Maak / verander je programmeercode en test of het werkt. Save : Sla je veranderingen op. Probeer : Test uit of het werkt. Stage : Zet de gewijzigde bestanden klaar voor de commit. Message : Typ een korte maar begrijpelijke commitboodschap. Commit : Maak een nieuw punt in je tijdlijn. Pull : Kijk of er intussen geen nieuwe wijzigingen in GitHub zijn gemaakt door een team-genoot. Push : Duw je commit van je ’lokale’ repository naar je (cloud) repository op GitHub. Hoe werkt versiebeheer in GitHub? Je kunt je git het gemakkelijkst voorstellen als een tijdlijn. De punten op de tijdlijn zijn alle versies die jij vanaf het begin hebt ‘opgeslagen’:\nHoe werkt dit? Tijdens het programmeren werk je vaak zo:\nMaak / verander je programmeercode. Sla je veranderingen op. Test uit of het werkt. Het maakt eigenlijk niet uit of je hierbij gebruik maakt van GitPod, Repl.it, Arduino of een andere programmeeromgeving.\nMet het gebruik van git komt daar nog een stap bij: de commit. Een commit doen betekent dat je een nieuw punt aan je tijdlijn toevoegt. Dit doe je als volgt:\nZet de bestanden klaar voor de commit Typ een korte maar begrijpelijke commitboodschap Commit Hoe werkt samenwerken in GitHub? GitHub functioneert als de centrale cloudopslag waar iedereen mee synchroniseert. Het is belangrijk om te beseffen dat je code in je programmeeromgeving en GitHub wel aan elkaar verbonden, maar niet automatisch gesynchroniseerd zijn. Je zult dit handmatig moeten doen. Maak je gebruik van GitHub, dan voer je na je commit een synchronisatie uit:\nDuw je commit van je ’lokale’ repository naar je repository op GitHub. Wanneer je samenwerkt met anderen, wil je als je later verdergaat eerst eventuele aanpassingen van je teamgenoten binnenhalen. Als zij die netjes hebben geduwd naar de repository op GitHub, kun jij die eenvoudig binnenhalen. Bij samenwerken in een team wordt stap 1 dus:\nHaal eventuele nieuwe commits van je GitHub repository binnen. Gitpod en Replit gebruiken Gitpod en Replit (of andere online ontwikkelomgevingen) hebben een koppeling met GitHub. Dat betekent dat je vanuit Gitpod en Replit wijzigingen in GitHub kunt opslaan. Zie de handleiding van Gitpod en de handleiding van Replit op deze deze website voor meer informatie.\nDe Github dev omgeving gebruiken In de Github dev-omgeving kun je meerdere bestanden tegelijk wijzigen, verplaatsen of toevoegen. Het lijkt erg op Gitpod, maar in tegenstelling tot Gitpod kan de Github dev-omgeving je code niet uitvoeren.\nJe komt in de Github dev-omgeving door de punt (\".\") op je toetsenbord in te drukken op het moment dat je een repo ziet in GitHub.\nLinks in het scherm zie je al je bestanden. Enkele mogelijkheden zijn:\nDownloaden van een bestand: Klik met de rechtermuisknop op een bestand en kies “download” in het menu dat verschijnt. Toevoegen van nieuwe bestanden kan door bestanden van je bureaublad naar de dev-omgeving te slepen. Bestanden kopieren, een andere naam geven, verplaatsen of verwijderen. Een map maken, een andere naam geven, verplaatsen of verwijderen (letop: Github kan niet goed overweg met mappen waar geen bestanden in staan) Als je klaar bent met wijzigen, dan commit je de wijzigingen en push je ze naar GitHub. Druk daarvoor links op het versiebeheer icoon (drie rondjes met 2 lijntjes ertussen) en gebruik het menu onder de drie puntjes dat verschijnt op de plek waar je bestanden stonden. LETOP: Als je vergeet te committen en pushen dan worden je wijzigingen niet opgeslagen!!!\nDe Github website gebruiken De Github website werkt niet handig voor het aanbrengen van wijzigingen in je code, maar er zijn een aantal functies die je hier wel handig kunt doen.\nRepo’s zoeken Links in het scherm staan de repo’s die je recent en vaak gebruikt hebt. Door op een repo te klikken wordt deze geladen. De link van de repo staat bovenin je browser, deze heb je bijvoorbeeld nodig als je de repo in Gitpod of replit wilt gebruiken.\nBekijken wat er in een repo zit Je kunt snel zien wat er in een repo zit door op de bestanden of mappen in de repo te klikken.\nBekijken wat er gewijzigd is Je kunt alle wijzigingen in een repo terugzien. Een lijst met de laatste wijzigingen krijg je door te klikken op het aantal commits, onder de groene knop met “Code”. Van elke commit kun je zien wat er is gewijzigd, klik daarvoor op het nummer van de commit aan het einde van de regel.\nAlle bestanden uit een repo downloaden Je kunt alle bestanden in een repo downloaden in een zip-bestand. klik op de groene knop “Code” en kies in het menu dat verschijnt voor “Download ZIP”.\nGit gebruiken Veel programmeurs gebruiken git op hun computer om code op de slaan in repo’s. Git is een programma waarin alle commando’s zitten die nodig zijn om met repo’s te werken. Als je hier dagelijks mee werkt en veel commando’s uit je hoofd kent, dan werkt dit heel snel. Voor leerlingen is dit niet zo een handige methode, wij gebruiken hem daarom niet.\nVeelgestelde vragen GitHub 404 fout Ik heb via email een link ontvangen om toegang te krijgen tot een repo, maar als ik op de link druk dan krijg ik een 404 fout. Wat moet ik doen?\nLogin op GitHub en druk daarna nogmaals op de link.\n","description":"","tags":null,"title":"GitHub","uri":"/tools/github/"},{"content":"Replit is een online ontwikkelomgeving waarin je code kunt wijzigen en uitvoeren. We gebruiken dit op de havo.\nWat is Replit? Replit is een online editor Replit werkt op elk apparaat met internettoegang en een moderne webbrowser, er is geen installatie van apps of programma’s nodig Je code wordt direct bewaard op de replit servers, inclusief oude versies Syntax checks door middel van kleuren van code voorkomt fouten Ondersteuning van heel veel talen: html/css/javascript, python, sqlite, php enzovoort Je kunt code die je gemaakt hebt uitvoeren in Replit Snel zien wat je code doet in een preview-venster Bekijk en test je websites uitgebreid in je browser dankzij de ingebouwde webserver Gebruik de ingebouwde shell access voor gevorderde functies Je kunt code die je in Replit gemaakt hebt bewaren op GitHub Heel veel goede programmeurs gebruiken GitHub Bewaar de laatste versie van je code op veilig GitHub (minimaal 1x per week, liefst elke les) De docent kan helpen als je code op GitHub staat Je kunt efficiënt samenwerken in groepjes als je code op GitHub bewaart De eerste keer Replit starten Replit is gratis, sommige functies zoals het wijzigen van private repo’s is afgeschermd in de gratis versie. Je hoeft voor het gebruik van Replit niets te installeren, alles werkt vanuit de browser Gebruik bij voorkeur Chrome of anders Firefox. Ga naar https://replit.com/ Druk op de knop “inloggen met Github” om in te loggen. Geef Replit rechten in Github om wijzigingen aan te brengen in jouw repo’s door op de groene knop te drukken. Ga door vanaf stap 2 onder “De volgende keren Replit starten” De volgende keren Replit starten Ga naar https://replit.com/ en druk op de knop “inloggen met Github” om in te loggen. Klik op de blauwe knop “+Create” en klik in de popup die verschijnt op “Import from Github”. Knip en plak de link naar de repo op github waar je je code hebt staan. Deze kun je vinden in Github. De link lijkt op https://github.com/emmaus-4h/website-piet/ . Kies de juiste taal (“HTML/CSS/Javascript” voor de website en game, “Bash” voor de webshop) Klik op de knop “Import from Github”. Replit haalt nu de laatste versie van je code uit GitHub Wijzig je code. Test of je code werkt, je kunt op de groene RUN knop drukken om een nieuw voorbeeld te zien. Klik op het “version control” icoontje (een gesplitst lijntje met twee bolletjes) links in het scherm. Type een korte beschrijving van de wijziging, druk op de knop “Commit en Push”. Check in op https://github.com/ dat je codewijzigingen zijn opgeslagen Als je nog verder wilt werken, gaan dan terug naar stap 4. Veelgestelde vragen Mijn code springt niet goed in, hoe los ik dat op? Klik op het icoontje met de drie streepjes rechtsboven het bestand dat je aan het bewerken bent. Replit auto-format het bestand dat je aan het bewerken bent.\nMijn voorbeeld laat alleen het bovenste stukje zien, hoe los ik dat op? Klik op het icoontje met het vierkantje en het pijltje erdoor, rechtsboven het voorbeeldvenster. Het voorbeeld wordt nu in apart venster geopend. Druk op reload als je het wilt verversen.\nBewaren op Replit lukt niet, er is een foutmelding met access Vraag docent om hulp\nBewaren op Replit lukt niet, er is een foutmelding met conflict Vraag docent om hulp\nHoe update ik het voorbeeldvenster? Druk op reload in je voorbeeldvenster\nHoe kan ik terug naar de laatste versie op GitHub? Ga naar https://repl.io/ en log in met je Github account. Klik op de blauwe knop “+Create” klik in de pop-up die verschijnt op de knop “import from Github” Knip en plak de link naar de repo op github waar je je code hebt staan. Deze kun je vinden in Github. De link lijkt op https://github.com/emmaus-4h/website-piet/ ","description":"","tags":null,"title":"Replit","uri":"/tools/replit/"},{"content":"Gitpod is een online ontwikkelomgeving waarin je code kunt wijzigen en uitvoeren (en veel meer). We gebruiken dit op het vwo.\nWat is Gitpod? Gitpod is een online editor (en veel meer) De Gitpod editor is gebaseerd op VS Code. VS Code is een heel populaire editor onder professionele programmeurs. Gitpod werkt op elk apparaat met internettoegang en een moderne webbrowser, er is geen installatie van apps of programma’s nodig Je code wordt direct bewaard op de Gitpod servers, inclusief oude versies\u000bLETOP: In de gratis versie van Gitpod wordt je code van Gitpod verwijderd als je twee weken niets doet. Syntax checks door middel van kleuren van code voorkomt fouten Ondersteuning van heel veel talen: html/css/javascript, python, sqlite, php enzovoort Je kunt code die je gemaakt hebt uitvoeren in Gitpod Snel zien wat je code doet in een preview-venster Bekijk en test je websites uitgebreid in je browser door webserver te starten Gebruik de ingebouwde shell access voor gevorderde functies Je kunt code die je in Gitpod gemaakt hebt bewaren op GitHub Heel veel goede programmeurs gebruiken GitHub Bewaar de laatste versie van je code op veilig GitHub (minimaal 1x per week, liefst elke les) De docent kan helpen als je code op GitHub staat Je kunt efficiënt samenwerken in groepjes als je code op GitHub bewaart De eerste keer Gitpod starten Gitpod is gratis, tot maximaal 50 uur per maand. Je hoeft voor het gebruik van Gitpod niets te installeren, alles werkt vanuit de browser Gebruik Chrome of anders Firefox, in 21/22 zijn er problemen met een wit-scherm geconstateerd bij gebruik in Safari. Ga naar https://gitpod.io/ Gebruik je Github-account om in te loggen Geef Gitpod rechten in Github om wijzigingen aan te brengen in jouw repo’s (deze stap is verder uitgewerkt onder Q\u0026A “Bewaren op Github lukt niet, er is een foutmelding met access”) Code maken in Gitpod Ga naar https://gitpod.io/ en log in met je Github account. Klik op de groene knop “New workspace” Knip en plak de link naar de repo op github waar je je code hebt staan. Deze kun je vinden in Github. De link lijkt op https://github.com/emmaus-4h/website-piet/ Wijzig je code Test je code Commit je wijzigingen Synchroniseer je code in Gitpod met Github Check in Github dat je codewijzigingen zijn opgeslagen Veelgestelde vragen Bewaren op Github lukt niet, er is een foutmelding met access Zet de permissies van Gitpod goed, zodat hij op jouw account in Github wijzigingen kan maken\nklik op het icoontje van een poppetje linksonderin, een menu verschijnt klik op “Gitpod: Open Acces Control”, een nieuw scherm verschijnt nadat je “Open” hebt geklikt in de popup klik op de drie puntjes op de regel “Gitpod” en kies “Edit Permissons” in het menu dat verschijnt Zet alle vinkjes aan in de popup die verschijnt en klik op “update permissions” geef toestemming in github als github daarom vraagt (groene knop). Bewaren op Github lukt niet, er is een foutmelding met conflict Er zijn conflicten tussen jouw wijzigingen in Gitpod en de wijzigingen die gelijktijdig, meestal door een teamgenoot, gemaakt zijn in een repo. Je moet handmatig kiezen welke wijzigingen je wilt bewaren.\nCommit je wijzigingen Pull alle wijzigingen uit Github naar Gitpod Kies in de editor welke van de wijzigingen met een conflict je wilt bewaren Test je programma Commit Push je wijzigingen naar Github Hoe open ik een voorbeeldvenster met mijn website? Klik rechtsonder op “Ports: xxxx”, linksboven verschijnt een menu Klik linksboven op de regel met de poort Klik op het wereldbolletje achteraan op de regel met de poort, een popup verschijnt Klik op “Open” in de popup. Hoe update ik het voorbeeldvenster? Druk op reload in je voorbeeldvenster\nHoe kan ik terug naar de laatste versie op GitHub? Ga naar https://gitpod.io/ en log in met je Github account. Klik op de groene knop “New workspace” Knip en plak de link naar de repo op github waar je je code hebt staan. Deze kun je vinden in Github. De link lijkt op https://github.com/emmaus-4h/website-piet/ Mijn code springt niet goed in, hoe los ik dat op? Klik op [option]+[shift]+f. Gitpod auto-format het bestand dat je aan het bewerken bent.\nIk kan mijn workspace in gitpod nergens meer vinden Als je een workspace twee weken niet gebruikt, dan wordt hij door gitpod verwijderd. Je kunt dan een nieuwe workspace maken van de laatste versie van je code die je in github hebt gecommit.\nHoe kan ik zien hoeveel gitpod gebruik ik deze maand nog over heb? Klik linkonder op het icoontje van een poppetje (je account) Kies “Gitpod: Upgrade subscription”, een nieuw scherm verschijnt nadat je in de popup die verschijnt op “Open” hebt geklikt Je ziet midden boven het aantal gebruikte en resterende uren. Beweeg met je muis over de tijd, er verschijnt een kleine popup die aangeeft van welke tot welke datum de huidige maand loopt Mijn 50 uur gratis gitpod gebruik zijn op Bijna alle leerlingen hebben genoeg aan 50 uur per maand. Als dit bij jouw een keer niet zo is, dan kun je dit als volgt oplossen.\nBewaar al je werk op Github vlak voordat je tijd op is. Maak met een ander e-email adres een nieuwe Github account aan. Vraag de docent je Github account toe te voegen aan de repo waarin je werkt. Login bij Gitpod met je nieuwe Github-account en maak een nieuwe workspace aan met de repo waarin je werkte. Je hebt nu weer 50 uur.\nWaar vind ik documentatie over Gitpod? https://www.gitpod.io/docs/ ","description":"","tags":null,"title":"Gitpod","uri":"/tools/gitpod/"},{"content":"Arduino IDE is een programma waarin je code kunt schrijven en downloaden in je Arduino.\nWat is de Arduino IDE? De Arduino IDE is een programma waarmee je je Arduino kunt programmeren. De Arduino IDE is beschikbaar voor computers met Windows, Linux en MacOS. Het programma is niet beschikbaar voor iPads en Chromebooks. Functies van de Arduino IDE:\ncode-editor compileren gecompileerde code uploaden naar een Arduino microcontroller (via een USB-kabel) Installeren van het programma Op de schoolcomputers is de Arduino-IDE al geïnstalleerd. Als je Arduino thuis wilt gebruiken, dan moet je het zelf installeren. Dat gaat als volgt.\nDe Arduino IDE is gratis. Je hoeft geen account aan te maken. Download de Arduino IDE van https://www.arduino.cc/en/software Installeer het programma zoals je gewend bent om andere programma’s te installeren op je computer. Je eerste Arduino schets Start de Arduino IDE Sluit de Arduino met een USB-kabel aan op de laptop Stel de juiste Arduino in. Klik in het menu op “Hulpmiddelen”-\u003e“Board”-\u003ede_Arduino_die_je_hebt. De rode Arduino’s op school zijn “Aduino Nano”. Stel de USB-poort in waarop je de Arduino hebt aangesloten. Klik in het menu op “Hulpmiddelen”-\u003e“Poort”-\u003ekies_de_juiste_poort. Meestal is de juiste poort iets met “arduino” of “mega” en iets zonder “bluetooth”. Maak een schets. Een programma voor je Arduino microcontroller wordt vaak een schets (Engels: sketch) genoemd. Je kunt beginnen met een voorbeeld-schets. Klik in het menu op “Bestand”-\u003e“Voorbeelden”-\u003e“Basics”-\u003e“Blink” Compileer de schets (vertaal je code naar machinetaal die de Arduino gebruikt). Klik in het menu op “Schets”-\u003e“Verifeer/Compileer”. Upload (verstuur naar je Arduino via de USB-kabel). Klik in het menu op “Schets”-\u003e“Upload”. Je ziet nu een klein ledje op je Arduino die knippert. Verander de code, bijvoorbeeld delay(1000) aanpassen in delay(200). Herhaal stap 7. Je zult zien dat de Arduino stap 6 (compileren) vanzelf opnieuw doet, omdat je de code hebt aangepast. Het ledje knippert nu sneller. Nu je stap 9 gedaan hebt, weet je zeker dat het jouw programma is dat in de Arduino zit. De Arduino onthoudt namelijk het laatste programma, ook als de stroom eraf is geweest, dus het kan zijn dat het knipperend-led programma er al door een vorige leerling in is gezet. Extra libraries installeren De ingewikkeldere sensoren en actuatoren die je kunt aansluiten op je Arduino, zoals displays, hebben libraries nodig om ze te kunnen programmeren. Er zijn twee manieren om libraries te installeren\nlibraries die meegeleverd zijn met Arduino IDE\nHet installeren van libraries die meegeleverd zijn met de Arduino IDE kan via het menu “Schets” -\u003e “Bibliotheek gebruiken” -\u003e “Bibliotheken beheren”. Het vinden van de juiste bibliotheek kan wel eens lastig zijn, vraag het de docent als je twijfelt. libraries uit een zip-bestand\nHet installeren van libraries waarvan je een .zip bestand hebt kan via het menu “Schets” -\u003e “Bibliotheken gebruiken” -\u003e “Voeg .ZIP bibliotheek toe”. De .zip bestanden vind je vaak terug bij startcode die je van je docent krijgt of op de site van leveranciers van Arduino-hardware. Goede biblitheken bevatten voorbeeld-code die na installatie van de bibliotheek in de Arduino IDE terug te vinden is in het menu onder “Bestand” -\u003e “Voorbeelden”\nMeer informatie Meer informatie over de Arduino-taal vind je op https://www.arduino.cc/ klik op “documentation” -\u003e “reference” Meer informatie over de pinnen van je Arduino vind je op https://www.arduino.cc/ klik op “hardware” -\u003e kies jouw Arduino -\u003e kies het tabblad “FAQ” Veelgestelde vragen Hij doet het niet Kijk of de USB-kabel goed in de Arduino zit (je voelt een kleine klik) Kijk of je de juiste Arduino hebt aangeven in de IDE (Arduino Nano) Kijk of je de juiste USB-poort het aangegeven in de IDE Kijk of er foutmeldingen zijn bij uploaden en lees die aandachtig Bij het uploaden krijg ik de melding “avrdude: ser_open(): can’t open device”… Je hebt waarschijnlijk vergeten de juiste USB-poort te kiezen. Kies de juiste USB-poort in het menu onder “Hulpmiddelen”-\u003e“Poort”\nIk krijg één of meerdere foutmelding(en) tijdens het compileren Je hebt fout gemaakt in de code. Bekijk de bovenste foutmelding. Kijk of je de melding begrijpt. Er staat bij op welke regel de fout gevonden is. Probeer de fout in je code op te lossen. Compileer de code daarna opnieuw.\nIk krijg een foutmelding met “undefined” tijdens het compileren Je hebt waarschijnlijk een variabele gebruikt zonder deze te declareren of een typefout gemaakt in de naam van de variabele.\nCompileren en uploaden gaat goed, maar mijn programma doet niet wat ik wil Laat je programma berichten op de Seriële monitor zetten, zodat kunt meekijken wat er gebeurt en de fout kunt vinden. De seriële monitor van Arduino is een soort console, die je misschien kent van eerdere opdrachten.\nZet in de setup() functie de opdracht Serial.begin(115200); Zet aan het begin van loop() functie de opdracht Serial.println(\"Start\"); Voeg op meer nuttige plaatsen berichten toe, zodat je weet welke code wel en niet wordt uitgevoerd. Je kunt ook de inhoud van variabelen of de uitkomst van functies afdrukken, bijvoorbeeld met Serial.println(\"Milliseconde na opstarten\" + millis()); Open voordat je programma upload de seriele monitor door in de Arduino-IDE te klikken op het menu “Hulpmiddelen” -\u003e “Seriële monitor”, let op dat de snelheid staat ingesteld op 115200. Ik heb een kleine rode arduino en op de video van arduino-lessen.nl zie ik een grote blauwe arduino Op school gebruiken wij een Arduino Nano van het merk Suideeeno . Deze heeft dezelfde mogelijkheden als de grote blauwe of groene Arduino Uno . Bij de Nano sluit je draadjes aan via het breadboard, terwijl je de draadjes bij de Uno direct in de Arduino prikt. De pinnen op beide Arduino’s werken hetzelfde, je kunt aan de namen die erbij staan zien welke je moet hebben.\nMijn display heeft andere stekkers dan het display op de video van arduino-lessen.nl Op school gebruiken we een display van het merk Seeeduino . Dit display kun je met een grove kabeltje aansluiten op de rode Arduino Nano. Het grove kabeltje is het kabeltje met vier draadjes in de kleuren geel-wit-rood-zwart draadjes en twee witte plastic stekkers aan de uiteinden.\nHoe sla ik een sketch op? Kies in het menu “Bestand” -\u003e “Opslaan als”, kies een map en geef je schets een naam. Een schets wordt altijd opgeslagen in een map met dezelfde naam als de schets. ","description":"","tags":null,"title":"Arduino IDE","uri":"/tools/arduino-ide/"},{"content":"Filius is een programma waarmee je netwerken kunt namaken en simuleren.\nWat is Filius? Filius is een programma waarmee je netwerken kunt bouwen en simuleren.\nInstalleren van het programma Filius is gratis en je hoeft geen account aan te maken. Je kunt Filius op twee manieren starten.\nStart Filius in je browser en volg de stappen uit de Readme.md. Dit werkt op (bijna) elk apparaat met een moderne webbrowser. Je browser opent GitPod en op de servers van GitPod wordt een Linux-omgeving met Filius geopend. Je kunt in GitPod inloggen met je (gratis) GitHub account. Installeer Filius op je eigen apparaat. Filius is beschikbaar voor Windows, MacOS en Linux. Veelgestelde vragen Filius verdwijnt van het scherm en ik krijg de melding “noVNC”. Als je in de workspace in gitpod een half uur niets aanpast dan wordt de workspace afgesloten. Klikken in Filius telt niet als een aanpassing. Er is geen echte oplossing, maar wel een work-around. Om te voorkomen dat de workspace wordt afgesloten terwijl je in Filius werkt kun je elk half uur een kleine wijziging maken in je workspace, bijvoorbeeld door een puntje aan het einde van je README.md toe te voegen.\nMeer informatie Meer informatie over Filius kun je vinden op de website van de maker: https://www.lernsoftware-filius.de De help over het gebruik van Filius zit in het programma: druk op het vraagteken. ","description":"","tags":null,"title":"Filius","uri":"/tools/filius/"},{"content":"","description":"","tags":null,"title":"1","uri":"/yours/1/"},{"content":"","description":"","tags":null,"title":"10","uri":"/yours/10/"},{"content":"","description":"","tags":null,"title":"2","uri":"/yours/2/"},{"content":"","description":"","tags":null,"title":"3","uri":"/yours/3/"},{"content":"","description":"","tags":null,"title":"4","uri":"/yours/4/"},{"content":"","description":"","tags":null,"title":"5","uri":"/yours/5/"},{"content":"","description":"","tags":null,"title":"6","uri":"/yours/6/"},{"content":"","description":"","tags":null,"title":"7","uri":"/yours/7/"},{"content":"","description":"","tags":null,"title":"8","uri":"/yours/8/"},{"content":"","description":"","tags":null,"title":"9","uri":"/yours/9/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/categories/"},{"content":"Some testing for different styles used in syntax highlightning and preformatted blocks.\nInline Code This is some very long inline code. Where does it wrap?\nWhat about wrapping short inline code if multiple sections are written side by side?\nWhat about wrapping short inline code if multiple sections are written side/by/side?\nWhat about wrapping long inline code if multiple sections are written side567 by34567 side567?\nWhat about wrapping long inline code if multiple sections are written side567/by34567/side567?\nCan we just use a simple HTML element ?\nBlock Code Code fences without any selected language { \"well\": \"some JSON in codefences in here\" } { \"well\": \"some JSON in HTML elements here\" } Block Preformatted Some preformatted stuff with markdown indention Some preformatted stuff in HTML elements ","description":"Some testing for different styles used in syntax highlightning and preformatted blocks","tags":null,"title":"Code","uri":"/tests/code/"},{"content":"Contributors Special thanks to everyone who has contributed to this project.\nMany thanks to Mathieu Cornic for his work on porting the Learn theme to Hugo.\nMany thanks to Andy Miller for initially creating the Learn theme for Grav.\nPackages and libraries autoComplete - A lightweight and powerful vanilla JavaScript completion suggester clipboard.js - A modern approach to copy text to clipboard Featherlight - A lightweight jQuery lightbox plugin Font Awesome - The internet’s icon library and toolkit jQuery - The “Write less, do more” JavaScript library jquery-svg-zoom-pan - A jQuery plugin to enable pan and zoom in SVG images Lunr - Enables a great search experience without the need for external, server-side, search services Mermaid - Generation of diagram and flowchart from text in a similar manner as markdown Perfect Scrollbar - A minimalistic but perfect custom scrollbar plugin RapiDoc - Create beautiful, customizable, interactive API documentation from OpenAPI Specifications Tooling GitHub - Continuous deployement, testing and hosting of this project’s sources and its documentation gren - A releasenotes generator for GitHub Hugo - The static site generator of your choice ","description":"","tags":null,"title":"Credits","uri":"/more/credits/"},{"content":"Some testing for different styles of image links.\nMarkdown Relative to page Relative to page up level Static External fully qualified External without scheme External without scheme and scheme separator HTML Relative to page Relative to page up level Static External fully qualified External without scheme External without scheme and scheme separator ","description":"Some testing for different styles of image links","tags":null,"title":"Images","uri":"/tests/images/"},{"content":"Informatica Actueel Chemical Tempest Profielwerkstuk informatica 2022/2023\nInhoud Planning Hier vind je de lesplanner, geplande toetsen en inlevermomenten, vakoverzicht en PTA’s per jaarlaag.\nTheorie Hier vind je alle theorie per module.\nOpdrachten Hier vind je de praktische opdrachten. Praktische opdrachten zijn meestal tussen de vier en acht weken werk. Je hebt veel vrijheid en kunt er echt iets moois van maken.\nHulpmiddelen Hulpmiddelen zijn programma’s die we gebruiken om dingen te maken. Hulpmiddelen zijn dus gereedschap (Engels: tools) dat je gebruikt bij informatica.\n","description":"","tags":null,"title":"Informatica","uri":"/"},{"content":"Some testing for different styles of links.\nMarkdown Relative to page: Relative to page up level: Static: ","description":"Some testing for different styles of links","tags":null,"title":"Links","uri":"/tests/links/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/tags/"},{"content":"Placeholder…\n","description":"","tags":null,"title":"The one and only hidden child","uri":"/yours/children-1/"}]