[{"content":"Je gaat je eigen website maken!\nOpdrachtbeschrijving De opdracht in het kort is: Maak je eigen informatieve website over een zelfgekozen onderwerp. Je gebruikt de startcode met HTML en CSS.\nInschrijven Je schrijft je in via het onderstaande formulier dat de docent aanlevert.\n4hin1, link naar formulier volgt 4hin2, link naar formulier volgt 4vin1, link naar formulier volgt 4vin2, link naar formulier volgt Onderwerp kiezen Je bent vrij om zelf een onderwerp voor je website te bedenken. Je docent moet het onderwerp goedkeuren. Je kunt denken aan een hobby, sport, jouw favoriete lifestyle enzovoort. Misschien is het wel mogelijk om de website te gebruiken voor een schrijfopdracht voor een ander vak.\nWerkwijze Je maakt deze opdracht in je eentje. Je krijgt van de docent startcode voor deze opdracht. Deze staat klaar in een repo op GitHub. Je maakt code in Replit (havo) of Gitpod (vwo). Elke week (liefst vaker) sla je je tussentijdse werk op in de repo op GitHub. Zo zorg je ervoor dat de laatste werkende versie van je opdracht steeds op GitHub staat. Deze opdracht maak je alsof het een echt project is. De stappen uit README.md in de starterscode zijn de basis van je planning. De voortgang hou je wekelijks bij in README.md. Als het niet volgens je plan gaat, dan stuur je bij. In de les kun je hulp vragen, maar uiteindelijk moet jij zorgen dat je op tijd klaar bent en een goed project oplevert. Beoordeling Het cijfer dat je voor je PO krijgt wordt vanuit verschillende invalshoeken bepaald:\nMinimale eisen\nVoordat je een cijfer krijgt voor je PO, wordt gekeken of je werk voldoet aan de minimale eisen. Werk dat niet voldoet aan de minimale eisen krijgt het cijfer 1,0. De minimale eisen zijn:\nDe inhoud van je webshop is moreel verantwoord: het is niet beledigend, visueel gewelddadig of op andere manieren onfatsoenlijk. Natuurlijk mag je overleggen met klasgenoten en mag je op internet kijken hoe je bepaalde dingen kunt maken. Let wel op dat je geen plagiaat pleegt. Je mag maximaal 5 regels code overnemen van andere leerlingen of internet en je schrijft in het commentaar erbij waar je het voorbeeld vandaan hebt. Dat geldt ook voor code die je zelf vertaalt naar het Nederlands. Overtypen van code uit een Youtube-video of een tutorial van internet volgen en dat resultaat inleveren is niet toegestaan. Je gebruikt de startcode die je krijgt. Je gebruikt het stappenplan dat in README.md van het template staat. Een download in zip-formaat van je opdracht mag maximaal 50 MB groot zijn. Vormgeving en inhoud Enkele punten waarop gelet kan worden bij de beoordeling van vormgeving en inhoud zijn\nDe website bestaat uit mimimaal 4 pagina’s. Uit de home-page (index.html) blijkt duidelijk wat er op je website te vinden is. De vormgeving ziet er aantrekkelijk uit en nodigt uit om verder te kijken op je website. De inhoud is compleet en informatief, de teksten heb je niet klakkeloos gekopieerd van een andere website. De website is goed te bekijken op gangbare browsers en computers met verschillende schermresoluties. Het is een pre als je website er op een telefoon ook goed uitziet. De uitlijning van de verschillende onderdelen op je website is netjes. Je respecteert auteursrecht, daar waar je voorbeelden of plaatjes van anderen gebruikt geef je tenminste in commentaar de bron aan. … Techniek Enkele punten waarop gelet kan worden bij de beoordeling van techniek zijn\nJe laat zien dat je de in de les aangereikte technieken begrijpt en op een nette manier kan toepassen, hierbij hoort zeker het gebruik van floats om een nette layout te maken. Je laat zien dat je in staat bent om zelf nieuwe dingen kunt toevoegen die voortbouwen op wat je al geleerd hebt. Alle code (HTML / CSS / JavaScript / …) is goed leesbaar en overzichtelijk. Je springt netjes in waar dat verwacht wordt. Je gebruikt duidelijk commentaar in HTML en CSS. CSS-klassen en ID’s hebben duidelijke en begrijpelijke namen. Er is geen ongebruikte code aanwezig. Je maakt gebruik van een nette mappen structuur, met logische bestandsnamen. Ongebruikte of oude bestanden zijn verwijderd. CSS bevindt zich niet in de HTML-pagina, maar in een los CSS-bestand. Je gebruikt één CSS-bestand voor je hele website. Met commentaar geef je aan welke delen eventueel paginaspecifiek zijn. Je linkt niet naar afbeeldingen op andere websites, alle afbeeldingen die je gebruikt heb je lokaal opgeslagen. Je afbeeldingen hebben een passende resolutie, zodat ze niet blokkerig zijn (te lage resolutie) of langzaam laden (te hoge resolutie). … Inzet en planning\nJe toont inzet tijdens de lessen De planning is vooraf gemaakt, gevolgd en als nodig bijgesteld. Het werk is verdeeld over de weken waarin aan de opdracht kon worden gewerkt, dit blijkt onder andere uit de commits in Github. Inleveren De deadline voor inleveren vind je in de lesplanner. Je kunt vragen stellen tot de laatste les voor de deadline. Je zorgt dat alle bestanden in die nodig zijn om je spel te spelen in GitHub staan, dit zijn ten minste: index.html, 3 .html bestanden voor de subpagina’s en style.css. Als je plaatjes gebruikt, dan staan die er ook bij. Je zorgt dat het README.md bestand met je planning aanwezig is. Je hebt aangegeven welke onderdelen gereed zijn. Uit de versie historie in GitHub blijkt hoe je je planning tussentijds hebt gevolgd en bijgesteld. De laatste versie van je PO die op het moment van de deadline in GitHub staat, wordt gebruikt voor de beoordeling. Startcode Uitlegvideo’s ","description":"","tags":null,"title":"O1. Website","uri":"/opdrachten/website/"},{"content":"Hier vind je de lesplanner, geplande toetsen en inlevermomenten, vakoverzicht en PTA’s per jaarlaag.\nLesplanners Het is vandaag .\n4H 5H 4V 5V 6V Week Theorieles (enkel uur) Praktijkles (blokuur) 34 intro 35 T1 Uitleg HTML tags T1 Khan t/m 2 intro to CSS 36 T1 Uitleg CSS selectors en properties T1 Khan t/m 4 CSS text properties 37 T1 Uitleg boxmodel T1 Khan t/m 6 CSS layout 38 T1 Uitleg floats T1 Khan t/m 9 Further learning 39 T1 Uitleg wireframes O1 Website stap 1 eerste wijziging gemaakt 40 T1 Uitleg client-server O1 Website stap 2 menu + vier lege pagina’s 41 T1 Uitleg intro security O1 Website stap 3 layout hoofdpagina 42 T1 Uitleg intellectueel eigendom O1 Website stap 3 layout hoofdpagina 43 Herfstvakantie 44 T2 Uitleg bits \u0026 IA gestart O1 Website stap 4 inhoud en plaatjes hoofdpagina 45 T2 Uitleg BIN \u0026 IA t/m 1 O1 Website stap 5 layout subpagina’s 46 TW1: Toets 4H-IN-S01 over T1 Web Design 47 TW1 48 T2 Uitleg HEX \u0026 IA t/m 2 O1 Website stap 6 inhoud en plaatjes subpagina’s 49 T2 Uitleg kleuren + plaatjes \u0026 IA t/m 3 O1 Website stap 7 kleuren 50 T2 Uitle tekst + geluid + video \u0026 IA t/m 6 O1 Website stap 8 perfectioneren 51 T2 Uitleg compressie + bestanden \u0026 IA t/m 8 O1 Website stap 9 eyecathers 52 Kerstvakantie 1 Kerstvakantie 2 Beeldbewerking O1 Website stap 9 eyecathers 3 Beeldbewerking PO 4H-IN-S04 website inleveren 4 T3 Uitleg programmeertalen T3 Khan t/m 5 Animation basics 5 T3 Uitleg P5js T3 Khan t/m 10 Functions 6 T3 Uitleg variabelen T3 Khan t/m 13 Loopings 7 T3 Uitleg functies T3 Khan t/m 15 Arrays 8 T3 Uitleg logica en if O2 Game: eerste wijziging gemaakt 9 Voorjaarsvakantie 10 T3 Uitleg loops O2 Game: speler beweegt 11 TW2: Toets 4H-IN-S01 over T2 Informatie 12 TW2 13 T3 Uitleg lijsten O2 Game: vijand 14 T3 Uitleg nesten O2 Game: botsingdetectie + afgaan 15 T4 Uitleg stroomdiagrammen O2 Game: punten + gameoverscherm 16 T4 Oefenen eenvoudige algoritmen 1/m 2 O2 Game: uitlegscherm (je hebt nu een speelbaar spel) 17 **Meivakantie ** 18 **Meivakantie ** 19 T4 Oefenen eenvoudige algoritmen t/m 6 O2 Game: werk aan uitbreiding 1 20 T4 oefenen eenvoudige algoritmen t/m 8 O2 Game: werk aan uitbreiding 1 21 T4 oefenen eenvoudige algoritmen t/m 10 O2 Game: uitbreiding 1 af 22 T4 Uitleg: bubble sort (geen leerdoel) O2 Game: werk aan uitbreiding 2 23 Algoritmen, nader te bepalen O2 Game: werk aan uitbreiding 2 24 Algoritmen, nader te bepalen PO 4H-IN-S05 game inleveren 25 TW3: Toets 4H-IN-S03 over T3 Programmeren + T4 Algoritmen 26 TW3 27 Zomervakantie Week Theorieles (enkel uur) Praktijkles (blokuur) 34 intro 35 T6 Arduinolessen gestart T6 Arduinolessen 1 36 T6 Uitleg microcontrollers deel 1 T6 Arduinolessen 2 37 T6 Uitleg microcontrollers deel 2 T6 Arduinolessen 3 38 T6 Uitleg toestandsdiagrammen deel 1 T6 Arduinolessen 4 39 T6 Uitleg toestandsdiagrammen deel 2 T6 Arduinolessen 5 40 T6 Toestandsdiagrammen opdracht 1 T6 Toestandsdiagrammen opdracht 2 41 O4-Robot O4-Robot 42 O4-Robot O4-Robot 43 Herfstvakantie 44 O4-Robot O4-Robot 45 O4-Robot O4-Robot 46 TW1: Toets 5H-IN-S06 over T6 Robotica 47 TW1 48 O4-Robot O4-Robot 49 O4-Robot PO 5H-IN-S08 robot inleveren 50 T5 Khan t/m 1 SQL Basics T5 Khan t/m halverwege 2 More advanced SQL-queries 51 T5 uitleg SELECT WHERE T5 Khan t/m halverwege eind 2 More advanced SQL-queries 52 Kerstvakantie 1 Kerstvakantie 2 T5 uitleg GROUP BY T5 Khan t/m halverwege 3 Relational Queries 3 T5 uitleg JOIN T5 Khan t/m eind 3 Relational Queries 4 T5 uitleg nader te bepalen T5 Khan t/m 4 Modifying Databases 5 T5 Oefentoets eerste helft T5 Oefentoets tweede helft 6 O3 Webshop O3 Webshop 7 O3 Webshop O3 Webshop 8 O3 Webshop O3 Webshop 9 Voorjaarsvakantie 10 O3 Webshop O3 Webshop 11 TW2: Toets 5H-IN-S07 over T5 Databases 12 TW2 13 O3 Webshop O3 Webshop 14 O3 Webshop PO 5H-IN-S08 webshop inleveren 15 nader te bepalen nader te bepalen 16 nader te bepalen informatica afgerond 17 **Meivakantie ** 18 **Meivakantie ** examencijfer informatica bekend 19 CE geen CE voor informatica Week Theorieles (enkel uur) Praktijkles (blokuur) Week Les 1 theorie Les 2+3 praktijk 34 intro 35 T1 Uitleg HTML tags T1 Khan t/m 2 intro to CSS 36 T1 Uitleg CSS selectors en properties T1 Khan t/m 4 CSS text properties 37 T1 Uitleg boxmodel T1 Khan t/m 6 CSS layout 38 T1 Uitleg floats T1 Khan t/m 9 Further learning 39 T1 Uitleg wireframes O1 Website stap 1 eerste wijziging gemaakt 40 T1 Uitleg client-server O1 Website stap 2 menu + vier lege pagina’s 41 T1 Uitleg intro security O1 Website stap 3 layout hoofdpagina 42 T1 Uitleg intellectueel eigendom O1 Website stap 3 layout hoofdpagina 43 Herfstvakantie 44 T2 Uitleg bits \u0026 IA gestart O1 Website stap 4 inhoud en plaatjes hoofdpagina 45 T2 Uitleg BIN \u0026 IA t/m 1 O1 Website stap 5 layout subpagina’s 46 TW1: Toets 4V-IN-S01 over T1 Web Design 47 TW1 48 T2 Uitleg HEX \u0026 IA t/m 2 O1 Website stap 6 inhoud en plaatjes subpagina’s 49 T2 Uitleg kleuren + plaatjes \u0026 IA t/m 3 O1 Website stap 7 kleuren 50 T2 Uitle tekst + geluid + video \u0026 IA t/m 6 O1 Website stap 8 perfectioneren 51 T2 Uitleg compressie + bestanden \u0026 IA t/m 8 O1 Website stap 9 eyecathers 52 Kerstvakantie 1 Kerstvakantie 2 Beeldbewerking O1 Website stap 9 eyecathers 3 Beeldbewerking PO 4V-IN-S04 website inleveren 4 T3 Uitleg programmeertalen T3 Khan t/m 5 Animation basics 5 T3 Uitleg P5js T3 Khan t/m 10 Functions 6 T3 Uitleg variabelen T3 Khan t/m 13 Loopings 7 T3 Uitleg functies T3 Khan t/m 15 Arrays 8 T3 Uitleg logica en if O2 Game: eerste wijziging gemaakt 9 Voorjaarsvakantie 10 T3 Uitleg loops O2 Game: speler beweegt 11 TW2: Toets 4V-IN-S01 over T2 Informatie 12 TW2 13 T3 Uitleg lijsten O2 Game: vijand 14 T3 Uitleg nesten O2 Game: botsingdetectie + afgaan 15 T4 Uitleg stroomdiagrammen O2 Game: punten + gameoverscherm 16 T4 Oefenen eenvoudige algoritmen 1/m 2 O2 Game: uitlegscherm (je hebt nu een speelbaar spel) 17 **Meivakantie ** 18 **Meivakantie ** 19 T4 Oefenen eenvoudige algoritmen t/m 6 O2 Game: werk aan uitbreiding 1 20 T4 oefenen eenvoudige algoritmen t/m 8 O2 Game: werk aan uitbreiding 1 21 T4 oefenen eenvoudige algoritmen t/m 10 O2 Game: uitbreiding 1 af 22 T4 Uitleg: bubble sort (geen leerdoel) O2 Game: werk aan uitbreiding 2 23 Algoritmen, nader te bepalen O2 Game: werk aan uitbreiding 2 24 Algoritmen, nader te bepalen PO 4V-IN-S05 game inleveren 25 TW3: Toets 4V-IN-S03 over T3 Programmeren + T4 Algoritmen 26 TW3 27 Zomervakantie Week Theorieles (enkel uur) Praktijkles (blokuur) 34 intro 35 T7 netwerken T7 netwerken 36 T7 uitleg netwerken T7 netwerken 37 T7 uitleg netwerken T7 netwerken 38 T7 uitleg netwerken T7 netwerken 39 T7 uitleg netwerken T7 netwerken 40 T7 netwerken T7 netwerken 41 T5 Khan t/m 1 SQL Basics T5 Khan t/m halverwege 2 More advanced SQL-queries 42 T5 uitleg SELECT WHERE T5 Khan t/m halverwege eind 2 More advanced SQL-queries 43 Herfstvakantie 44 T5 uitleg GROUP BY T5 Khan t/m halverwege 3 Relational Queries 45 T5 uitleg JOIN T5 Khan t/m eind 3 Relational Queries 46 TW1: Toets 5V-IN-S06 over T7 Netwerken 47 TW1 48 T5 uitleg multipliciteiten- en strokendiagram T5 Khan t/m 4 Modifying Databases 49 T5 Ruimtedatabase eerste helft T5 Ruimtedatabase tweede helft 50 O3 Webshop O3 Webshop 51 O3 Webshop O3 Webshop 52 Kerstvakantie 1 Kerstvakantie 2 O3 Webshop O3 Webshop 3 O3 Webshop O3 Webshop 4 O3 Webshop O3 Webshop 5 O3 Webshop O3 Webshop 6 O3 Webshop O3 Webshop 7 O3 Webshop ** 5V-IN-S09 webshop inleveren ** 8 T6 Arduinolessen gestart T6 Arduinolessen 1 9 Voorjaarsvakantie 10 T6 Uitleg microcontrollers deel 1 T6 Arduinolessen 2 11 TW2: Toets 5V-IN-S07 over T5 Databases 12 TW2 13 T6 Uitleg microcontrollers deel 2 T6 Arduinolessen 3 14 T6 Uitleg toestandsdiagrammen deel 1 T6 Arduinolessen 4 15 T6 Uitleg toestandsdiagrammen deel 2 T6 Arduinolessen 5 16 T6 Toestandsdiagrammen opdracht 1 T6 Toestandsdiagrammen opdracht 2 17 **Meivakantie ** 18 **Meivakantie ** 19 O4-Robot O4-Robot 20 O4-Robot O4-Robot 21 O4-Robot O4-Robot 22 O4-Robot O4-Robot 23 O4-Robot O4-Robot 24 O4-Robot ** 5V-IN-S10 robot inleveren ** 25 TW3: Toets 5V-IN-S08 over T6 Robotica 26 TW3 27 Zomervakantie Week Theorieles (enkel uur) Praktijkles (blokuur) 34 intro 35 T8 Object Oriented Programming T8 Object Oriented Programming 36 T8 Object Oriented Programming T8 Object Oriented Programming 37 T8 Object Oriented Programming T8 Object Oriented Programming 38 T8 Object Oriented Programming T8 Object Oriented Programming 39 T8 Object Oriented Programming T8 Object Oriented Programming 40 T8 Object Oriented Programming T8 Object Oriented Programming 41 O5 Marble Mania deel 1 O5 Marble Mania deel 1 42 O5 Marble Mania deel 1 O5 Marble Mania deel 1 43 Herfstvakantie 44 O5 Marble Mania deel 1 O5 Marble Mania deel 1 45 O5 Marble Mania deel 1 O5 Marble Mania deel 1 46 TW1: Toets 6V-IN-S11 over T8 Object Oriented Programming 47 TW1 48 O5 Marble Mania deel 1 O5 Marble Mania deel 1 49 O5 Marble Mania deel 1 PO 5H-IN-S13 marble mania deel 1 inleveren 50 T9 Security T9 Security 51 T9 Security T9 Security 52 Kerstvakantie 1 Kerstvakantie 2 T9 Security T9 Security 3 T9 Security T9 Security 4 T9 Security T9 Security 5 T9 Security T9 Security 6 O5 Marble Mania deel 2 O5 Marble Mania deel 2 7 O5 Marble Mania deel 2 O5 Marble Mania deel 2 8 O5 Marble Mania deel 2 O5 Marble Mania deel 2 9 Voorjaarsvakantie 10 O5 Marble Mania deel 2 O5 Marble Mania deel 2 11 TW2: Toets 5H-IN-S12 over T5 Databases 12 TW2 13 O5 Marble Mania deel 2 O5 Marble Mania deel 2 14 O5 Marble Mania deel 2 PO 5H-IN-S14 marble mania deel 2 inleveren 15 nader te bepalen nader te bepalen 16 nader te bepalen informatica afgerond 17 **Meivakantie ** 18 **Meivakantie ** examencijfer informatica bekend 19 CE geen CE voor informatica Toetsen en inlevermomenten 4H 5H 4V 5V 6V Datum Code Toestvorm. Stof Toetsweek 1 4H-IN-S01 Digitale toets 2.1 Web Design Zondag 22 jan 23:59 4H-IN-S04 Praktische Opdracht 3.1 Website Toetsweek 2 4H-IN-S02 Digitale toets 2.2 Digitale Informatie Zondag 18 jun 23:59 4H-IN-S05 Praktische Opdracht 3.2 Game Toetsweek 3 4H-IN-S03 Digitale Toets 2.3 Programmeren + 2.4 Algoritmen Datum Code Toestvorm. Stof Toetsweek 1 5H-IN-S06 Digitale toets T6 Robotica Zondag 11 dec 23:59 5H-IN-S08 Praktische Opdracht O4 Robot Zondag 9 apr 23:59 5H-IN-S09 Praktische Opdracht O3 Webshop Toetsweek 2 5H-IN-S07 Digitale toets T5 Databases Datum Code Toestvorm. Stof Toetsweek 1 4V-IN-S01 Digitale toets 2.1 Web Design Zondag 22 jan 23:59 4V-IN-S04 Praktische Opdracht 3.1 Website Toetsweek 2 4V-IN-S02 Digitale toets 2.2 Digitale Informatie Zondag 18 jun 23:59 4V-IN-S05 Praktische Opdracht 3.2 Game Toetsweek 3 4V-IN-S03 Digitale Toets 2.3 Programmeren + 2.4 Algoritmen Datum Code Toestvorm. Stof Toetsweek 1 5V-IN-S06 Digitale toets T7 Netwerken Zondag 19 feb 23:59 5V-IN-S09 Praktische Opdracht O3 Webshop Toetsweek 2 5V-IN-S07 Digitale toets T5 Databases Zondag 18 juni 23:59 5V-IN-S10 Praktische Opdracht O4 Robot Toetsweek 3 5V-IN-S08 Digitale Toets T6 Robotica Datum Code Toestvorm. Stof Toetsweek 1 6V-IN-S11 Digitale toets T8 Object Oriented Programming Zondag 11 dec 23:59 6V-IN-S13 Praktische Opdracht O5 Marble Mania deel 1 Zondag 9 apr 23:59 6V-IN-S14 Praktische Opdracht O5 Marble Mania deel 2 Toetsweek 2 6V-IN-S12 Digitale toets T9 security Advies voor inleveren van Praktische Opdrachten: Lever een bijna af concept in vóór de laatste les voor de deadline, als er dan iets misgaat dan kun je nog een vraag stellen in de laatste les!\nVakoverzicht PTA De leerlingen raden we aan om vooral te kijken naar het vakoverzicht en de toets- en inlevermomenten hierboven op deze web-pagina. Voor wie het echt wil weten, is hier een linkje naar ons PTA in Excel, zoals we dat jaarlijks aanleveren aan de school.\n","description":"","tags":null,"title":"Planning","uri":"/planning/"},{"content":"Je leert hoe je informatie op een website zet met de programmeertalen HTML en CSS.\nLesstof Khanacademy, module Intro to HTML/CSS\nIntro to html Intro to css More html tags Css text properties Web development tools (geen toetsstof) CSS layout More css selectors Other ways to embed css (geen toetsstof) Further learning (geen toetsstof) Intellectueel eigendom\nIntellectueel eigendom (online reader) Uitlegvideo’s Er zijn (nog) geen uitlegvideo’s bij deze theorie\nLeerdoelen HTML\nJe kunt uitleggen wat een URL is en waarvoor een webbrowser deze gebruikt en je kent de volgende vier onderdelen van een URL: protocol, server, map, bestand Je kent het principe van tags zoals die in HTML gebruikt worden. Je kent de basisstructuur van een HTML-pagina. Je weet wat de begrippen parent, child en sibling betekenen en kunt de betekenis van deze begrippen toelichten. Je kunt deze begrippen toepassen op HTML. Je kent de volgende tags: \u003chtml\u003e, \u003chead\u003e, \u003cbody\u003e, \u003cp\u003e, \u003col\u003e, \u003cul\u003e, \u003cli\u003e, \u003ch1\u003e t/m \u003ch6\u003e, \u003cbr/\u003e, \u003cimg /\u003e, \u003cdiv\u003e. Je kunt uitleggen wat deze tags doen en hoe je kunt ze gebruiken. Je kunt eenvoudige stukken HTML interpreteren, dat wil zeggen dat je kunt uitleggen hoe een webbrowser omgaat met een eenvoudig stuk HTML. Je kunt wijzigingen aanbrengen in een eenvoudig stuk HTML, de syntax van de HTML tags die daarvoor nodig zijn wordt daarbij gegeven in de vraag. CSS\nJe kunt uitleggen wat er binnen de informatica met Separation of Concern wordt bedoeld en hoe dat op HTML en CSS van toepassing is. Je kunt uitleggen wat selectors, properties en values in CSS zijn en je kunt ermee werken. Dat wil zeggen dat je eenvoudige stukken CSS met selectors, properties en values kunt maken en de werking ervan kunt uitleggen. Je kunt CSS selectors maken die bestaan uit een tag, class of id of een combinatie daarvan. Je kent het verschil in selectiviteit tussen tags, classes en id’s, je kunt daarbij aangeven welke selectors meer of minder specifiek zijn. Je kent van de volgende properties de betekenis en kunt deze toepassen in CSS: font-size, width, height, color, background-color. Je kunt werken met kleuren en doorzichtigheid in CSS, door gebruik te maken van kleurnamen en rgba(). Je kunt de werking van boxen in CSS toelichten. Je kunt daarbij uitleggen wat de content, padding, border en margin van een box zijn. Je kunt eenvoudige stukken CSS interpreteren, dat wil zeggen dat je kunt uitleggen hoe een webbrowser omgaat met een eenvoudig stuk CSS en hoe het eruit ziet in een webbrowser. Je kunt wijzigingen aanbrengen in een eenvoudig stuk CSS, de properties die daarvoor nodig zijn worden beschreven in de vraag. Intellectueel eigendom\nje weet kunt kort en bondig formuleren wat het auteursrecht in Nederland inhoudt. je weet wat een thuiskopie is. je weet wat het downloadverbod inhoudt. je kent de regels rondom portretrecht (al dan niet in opdracht). je kent de verschillen tussen deze software licenties: commercieel, shareware, freeware, open source. Daarnaast kun je uitleggen op welke punten open source licenties van elkaar kunnen verschillen. je kunt uitleggen waar Creative Commons vandaan komt en kunt uitleggen uit welke licenties met verschillende bouwstenen kunnen worden gevormd. je bent in staat om je kennis van intellectueel eigendom toe te passen op een beschreven situatie. Oefentoets Een oefentoets voor deze module staat in Woots.\n","description":"","tags":null,"title":"T1. Web Design met HTML en CSS","uri":"/theorie/webdesign/"},{"content":"Inleiding Tijdens het maken van je website zul je ongetwijfeld gemerkt hebben hoe gemakkelijk het is om informatie van andere webpagina’s over te nemen in die van jezelf. Het was vooraf bekend dat je voor de opdracht geen tekst mocht kopiëren zonder te citeren, maar wellicht heb je wel gebruik gemaakt van afbeeldingen, muziek, of HTML / javascript code.\nMaar mag dit eigenlijk wel? Dat hangt er vanaf. Hieronder zullen we een aantal aspecten van intellectueel eigendom behandelen die je zullen helpen met het beantwoorden van de vraag of je de informatie op je website rechtmatig hebt gebruikt. Daarnaast krijg je ook informatie over het gebruiken van afbeeldingen van mensen en (software)licenties.\nWat is intellectueel eigendom Intellectueel eigendom is eigenlijk iets vreemds. In de Nederlandse wet is eigendom beschermd. De spullen die jij in bezit hebt, mag een ander niet zomaar afnemen. Het is niet de bedoeling dat een medeleerling zomaar je mobiele telefoon uit je tas haalt omdat hij die wel kan gebruiken. Dan spreken we van diefstal. Maar hoe zit dit bij creatieve uitingen, of “voortbrengselen van de geest”? Mag iemand een leuk muzikaal thema uit een recent hiphop nummer gebruiken voor een eigen nummer? Mag iemand anders een werkstuk dat identiek is aan het jouwe uploaden op scholieren.com? De wetten voor de bescherming van intellectueel eigendom proberen ook dit te beschermen. Er zijn hiervoor talrijke nationale en internationale wetten.\nGeen auteursrecht voor dieren na uitspraak rechter VS in zaak selfie-aap “Dieren kunnen onder de Amerikaanse wet definitief geen aanspraak maken op het auteursrecht. Dat heeft een federale rechtbank van de Verenigde Staten bepaald in een uitspraak rond de ‘selfie-aap’.\nDe wilde kuifmakaak Naruto maakte in 2011 meerdere foto’s van zichzelf met een camera die was achtergelaten door fotograaf David Slater. Die beelden werden drie jaar later gepubliceerd in een boek, waarbij Slater zich het auteursrecht toe-eigende.\nDat leidde in 2015 tot een rechtszaak, die namens Naruto werd aangespannen door dierenrechtenorganisatie People for the Ethical Treatment of Animals (PETA). De organisatie beweerde dat de aap het auteursrecht op de selfies had. Een rechter ging daar echter niet in mee en stelde dat dieren geen auteursrecht kunnen bezitten. PETA ging vervolgens in beroep.”\nLees verder op nu.nl\nAuteursrecht In 1883 kwamen België, Duitsland, Frankrijk, Italië, Spanje, Tunesië, het Verenigd Koninkrijk en Zwitserland in Bern bij elkaar (Berner Conventie) om tot een eenduidig verdrag te komen om ook over grenzen heen het auteursrecht te beschermen. Tot dan toe waren er talloze verdragen tussen verschillende landen gesloten, maar dit werd onwerkbaar. Na verschillende conferenties kwam men in 1886 tot een verdrag dat op 5 december 1887 voor alle acht staten in werking zou treden. Deze landen vormden de Berner Unie. Een auteur uit de Berner Unie heeft in al deze landen automatisch het auteursrecht. Daar hoeven geen extra handelingen of claims voor worden gedaan. De verschillende landen zijn gebonden aan een minimum bescherming, maar mogen zelf hun wetgeving anders formuleren. Zo is in het verdrag opgenomen dat het auteursrecht pas na minimaal 50 jaare na de dood van de auteur (voor filmwerken na de publicatie) vervalt. In veel landen is dit echter langer. In Nederland wordt een periode van 70 jaar gehanteerd.\nOuders Nederlandse top-dj's willen dj-talenten beschermen “Managers die veel aan je verdienen en promotors die vooral zélf beter worden van succes van een ander: de dancewereld is een miljoenenbusiness en daar willen veel mensen een graantje van meepikken. Daar gaat het vaak mis, merken ouders van dj’s die op jonge leeftijd doorbraken.\nZij komen nu met de Dutch DJ Foundation (DDJF). Zo willen ze de belangen behartigen van Nederlandse dj’s en producers.”\nLees verder op nos.nl\nSteeds meer landen werden lid van deze Unie, waaronder Nederland in 1912. Opvallend is dat bijvoorbeeld de Verenigde Staten pas in 1989 lid werden. Dat verklaart ook (deels) waarom in de V.S. vaak zulke uitvoerige copyright claims in publicaties staan.\nHet auteursrecht is in Nederland zo geformuleerd:\n“Het auteursrecht is het uitsluitend recht van den maker van een werk van letterkunde, wetenschap of kunst, of van diens rechtverkrijgenden, om dit openbaar te maken en te verveelvoudigen, behoudens de beperkingen, bij de wet gesteld.”\nEr zijn echter situaties waarin anderen wel of gedeeltelijk zo’n werk mogen verveelvoudigen of publiceren. Zo mag berichtgeving van nieuws en actualiteiten door andere nieuwsmedia vrij worden gebruikt, mits men de bron vermeldt. Een ander geval is het citeren. Voor een citaat geldt dat het een ondergeschikte rol vervult in het werk waarin het geciteerd wordt en dat de bron vermeld moet worden. Interessant is de zogenaamde thuiskopie. Een kopie maken voor jezelf van een werk om te kunnen oefenen, studeren of gebruiken is in Nederland toegestaan. Nederlandse auteurs krijgen hiervoor een kleine compensatie via de zogenoemde thuiskopieheffing: een klein bedrag dat geheven wordt op gegevensdragers, zoals harddisks, lege DVD’s, USB sticks, etc. Zo’n kopie is uitsluitend voor eigen gebruik. Je mag deze niet aan anderen geven. Tot voor kort viel het illegaal downloaden van software, muziek, films, etc. onder dit artikel. Het uploaden (=verspreiden onder derden) was wel strafbaar, het downloaden (=maken van een kopie) echter niet. Sinds een uitspraak van het Europees Hof op 10 april 2014 is dit illegaal downloaden ook in Nederland strafbaar geworden. Het hof vond de thuiskopieheffing niet toereikend voor compensatie.\nHet is mogelijk om de auteursrechten over de dragen. Dit wordt vaak gedaan in de muziek- en boekenbranche. De auteurs verleent bijvoorbeeld aan de producer of uitgever de exclusieve rechten om het boek te verspreiden. De auteurs krijgen hiervoor een vergoeding. Ook dan mag een producer of uitgever niet met het werk doen wat men maar wil. Er blijft sprake van ‘persoonlijkheidsrechten’. Een auteur mag dan bijvoorbeeld bezwaar maken tegen een publicatie omdat zijn / haar naam niet wordt vermeld, het gebruikt wordt in een context waarvoor de auteur het niet heeft bedoeld of omdat er door de betreffende publicatie niet het nodige respect wordt getoond voor het werk.\nPortretrecht Naast auteursrecht kennen we ook het portretrecht. Dit portretrecht houdt in dat men niet zomaar beeldmateriaal mag verspreiden indien hierop anderen op te herkennen zijn. In bepaalde gevallen is hiervoor toestemming nodig van de geportretteerde(n).\nIn het portretrecht is een ‘portret’ breder dan wat men er in bijvoorbeeld de schilderkunst of fotografie mee bedoelt. Van een portret is sprake wanneer men iemand kan herkennen. Dit kan zijn door middel van het gezicht, maar ook gelaatstrekken, een specifieke lichaamshouding, attributen of de omgeving spelen hierbij mee. Als je de identiteit van iemand uit het afgebeelde kunt achterhalen, is er in de wetgeving sprake van een portret.\nHet maakt uit of een portret wel of niet in opdracht is gemaakt. Een fotograaf kan een reportage van iemand maken. Dan is er sprake van een opdracht. Een journalist kan een foto maken van een winkelstraat. Daarop staan mogelijk ook mensen afgebeeld die op dat moment in die straat liepen. In het portretrecht wordt verschil gemaakt voor deze twee verschillende redenen.\nEen portret in opdracht Als een portret in opdracht is gemaakt, geldt het volgende. De maker van het portret bezit het auteursrecht van zijn / haar creatie. Publicatie mag echter alleen indien de maker hiervoor toestemming van de geportretteerde heeft. Degene die afgebeeld is, mag voor zichzelf en vrienden / familie een aantal kopieën maken. Ook mag hij / zij het portret beperkt in publicaties opnemen (zoals een portfolio van een model), zolang er maar bij vermeld wordt wie de maker ervan is. Commerciële publicatie mag alleen als ook de auteur hiervoor toestemming geeft.\nSamengevat: de geportretteerde mag heel beperkt en onder voorwaarden kopieën maken of publiceren. Voor breder gebruik door de auteur, de geportretteerde of anderen is altijd toestemming van zowel de auteur als de geportretteerde nodig.\nEen portret niet in opdracht Een portret dat niet in opdracht is gemaakt, mag in principe vrij worden gepubliceerd. Het kan echter zo zijn dat een afgebeeld persoon een ‘redelijk belang’ heeft om dit niet gepubliceerd te willen hebben. Dit kan bijvoorbeeld gaan om schending van privacy of omdat het beeldmateriaal iets suggereert wat niet het geval is. Ook kan het gaan om een financieel belang. Een popster verdient vaak aan producten waar zijn of haar portret op staat. Je kunt je voorstellen dat het niet is toestaan om zelf tijdens een concert een mooie foto te maken en zelf bijvoorbeeld t-shirts mee laat bedrukken.\nHet wordt anders wanneer het niet om een incidentele foto of video in de openbare ruimte gaat, maar om een foto of video gemaakt met een ‘aangebrachte’ camera. Je mag dus niet zomaar videocamera’s in de openbare ruimte ophangen. In dat geval moet je dit duidelijk vooraf aankondigen. Evenzo is iedere vorm van filmen of fotograferen in huizen of andere niet-publieke ruimtes verboden, tenzij dit vooraf duidelijk is aangekondigd.\nSoftware licenties De rechten voor software vallen voor een deel samen met het auteursrecht. Je mag dit niet zomaar vermenigvuldigen, verspreiden of openbaar maken. Je moet hiervoor een vergunning hebben, een licentie. Je kunt software niet gebruiken zonder (stilzwijgend) akkoord te zijn met de licentie. Er zijn verschillende soorten licenties om software te mogen gebruiken. Hieronder worden de meest gebruikte kort behandeld:\nCommercieel Voor commerciële software moet vooraf worden betaald. Met deze betaling krijg je het recht om de software op een vooraf bepaald aantal apparaten te installeren. Soms geldt deze licentie voor een bepaalde tijd en zul je na het verstrijken van deze periode opnieuw een licentie moeten kopen. Voorbeelden van software met deze licenties zijn Microsoft Office en Adobe Creative Cloud. Ook de meeste betaalde apps uit de app stores van Apple en Google maken gebruik van deze licentie.\nShareware Shareware mag je kopiëren en verspreiden zonder dat je er zelf iets aan verdient. Je mag het programma proberen, vaak voor een vaststaande tijd. Gebruik je deze software echter vaker, dan dien je hiervoor te betalen. Vaak zie je dat bepaalde functies niet werken totdat er een licentie is aangeschaft. Vóór de jaren ’90 was shareware software een aparte categorie. Langzaamaan zijn de verschillen met commerciële software steeds verder vervaagd. Veel apps die je nu in de app stores tegenkomt, zouden vroeger waarschijnlijk shareware zijn geweest.\nFreeware Software waarvoor de auteur een licentie verleent voor gebruik en verspreiding, heet freeware. Het is wel belangrijk om te beseffen dat de software alleen ongewijzigd mag worden verspreid. Anderen mogen er dus geen aanpassingen aan doen en vervolgens verspreiden. Een voorbeeld van freeware is Skype.\nOpen Source Open Source software heeft een licentie die ook de mogelijkheid geeft om de software aan te passen. De broncode van open source software is vrij beschikbaar en voor iedereen aan te passen. Men mag bijvoorbeeld een eigen ‘versie’ of smaak maken (dit heet een fork) en publiek maken. Er zijn heel veel open source licenties. De grootste verschillen zijn: Sommige licenties vereisen dat de aangepaste software ook de broncode openbaar moet maken Sommige licenties vereisen dat aangepaste software exact dezelfde licentie moet hanteren als de broncode waar vanaf de fork gemaakt is. Sommige licenties staan toe dat er verdient mag worden met aangepast software, andere niet. Sommige licenties staan toe dat er een tweede andere licentie aan de fork wordt verbonden, andere niet.\nTegenbewegingen Open source software is in sommige gevallen ontstaan vanuit onvrede met de beperkingen uit het auteursrecht. In bepaalde gevallen kunnen deze vooruitgang hinderen, wat sommige mensen erg vervelend vinden.\nVoor andere werken, zoals tekst, muziek en afbeeldingen is er vanuit een Amerikaans project een aantal licenties geformuleerd om meer meer duidelijkheid te geven over waarvoor materiaal gebruikt mag worden. Dit project heet Creative Commons. Bij een foto die je publiceert kun je aangeven welke CC licentie hierop van toepassing is. Ook is het gemakkelijk om zo te weten te komen of je een foto met een bepaalde CC licentie kunt gebruiken voor je website.\nEen CC-licentie wordt opgebouwd uit vier bouwstenen. Dit zijn de voorwaarden waaronder anderen gebruik mogen maken van jouw werk. De bouwstenen zijn:\nNaamsvermelding - Je staat anderen toe om het werk waar jij auteursrecht op hebt te kopiëren, distribueren, vertonen, en op te voeren, en om afgeleid materiaal te maken dat op jouw werk gebaseerd is – maar uitsluitend als jij vermeld wordt als maker.\nNiet-commercieel - Anderen mogen je werk kopiëren, vertonen, distribueren en opvoeren, alsmede materiaal wat op jouw werk gebaseerd is, mits niet voor commerciële doeleinden.\nGeenAfgeleideWerken - Anderen mogen je werk kopiëren, distribueren, vertonen en opvoeren mits het werk in de originele staat blijft. Het is niet toegestaan dat anderen jouw werk gebruiken als basis voor nieuw materiaal.\nGelijkDelen - Je staat anderen toe om van jouw werk afgeleid materiaal te maken onder de voorwaarde dat zij het onder dezelfde licentie vrijgeven als het originele werk.\nMet deze vier bouwstenen heeft men zes verschillende licenties gemaakt, waarbij het uitgangspunt is dat je altijd de naam van de originele auteur vermeldt:\nNaamsvermelding Naamsvermelding-GelijkDelen Naamsvermelding-NietCommercieel Naamsvermelding-NietCommercieel-GelijkDelen Naamsvermelding-GeenAfgeleideWerken Naamsvermelding-NietCommercieel-GeenAfgeleideWerken En mijn website? Of je materiaal legaal hebt gebruikt op je website hangt dus van heel veel factoren af. Wil je andermans materiaal gebruiken, dan zul je moeten achterhalen op welke manier de auteur het beschikbaar stelt. Soms is dat via een voor iedereen te gebruiken licentie. Het kan ook zijn dat je een auteur expliciet om toestemming zult moeten vragen of een licentie moeten kopen. In een aantal gevallen is de wetgeving zo geregeld dat je materiaal mag publiceren, zoals bij een zelf genomen foto van een winkelstraat of shots van een fotoshoot waar jij op staat. Er zijn hiervoor ook meteen beperkingen geformuleerd, waardoor je goed moet beseffen of je binnen de regels handelt.\n","description":"","tags":null,"title":"T1a. Intellectueel eigendom","uri":"/theorie/webdesign_auteursrecht/"},{"content":"Je gaat je eigen game programmeren!\nOpdrachtbeschrijving De opdracht in het kort is: Maak in groepjes van twee je eigen spel in JavaScript. Je gebruikt de startcode en maakt gebruik van de p5js-library.\nInschrijven Je schrijft je in via het onderstaande formulier dat de docent aanlevert.\n4hin1, link naar formulier volgt 4hin2, link naar formulier volgt 4vin1, link naar formulier volgt 4vin2, link naar formulier volgt Game kiezen Je bent vrij om zelf te kiezen welke game je gaat maken. Je docent moet de game die je kiest goedkeuren. Enkele voorbeelden van een game die je kunt maken zijn: Tennis, Flappy Bird, Snake (voorganger van Slither.io), een Break Out Game (zoals Arkanoid), een race spelletje, een eenvoudige platform game (zoals pacman), een puzzelspel enzovoort.\nWerkwijze Je maakt deze opdracht in een team van twee personen. De docent geeft aan hoe de teams gemaakt worden. Je bepaalt zelf hoe je het werk binnen je team verdeelt, zolang iedereen een gelijkwaardige bijdrage levert. Je krijgt één cijfer per team, maar de docent kan hiervan afwijken als teamleden geen gelijkwaardige bijdrage hebben geleverd. Je krijgt van de docent startcode voor deze opdracht. Deze staat klaar in een repo op GitHub. Er is één repo per team. Je maakt code in Replit (havo) of Gitpod (vwo). Elk teamlid heeft zijn eigen Replit of Gitpod omgeving. Elke week (liefst vaker) slaan alle teamleden hun tussentijdse werk op in de repo op GitHub. Zo zorgen jullie ervoor dat de laatste werkende versie van jullie game steeds op GitHub staat. Deze opdracht maak je alsof het een echt project is. Je maakt eerst een planning. Daarna kijk je wekelijks of je nog volgens plan loopt. Als je niet volgens plan loopt, dan stuur je bij. In de les word je hiermee geholpen, maar uiteindelijk moet jij zorgen dat je op tijd klaar bent en een goed resultaat oplevert. Beoordeling Het cijfer dat je voor je PO krijgt wordt vanuit verschillende invalshoeken bepaald:\nMinimale eisen\nVoordat je een cijfer krijgt voor je PO, wordt gekeken of je werk voldoet aan de minimale eisen. Werk dat niet voldoet aan de minimale eisen krijgt het cijfer 1,0. De minimale eisen zijn:\nDe inhoud van je webshop is moreel verantwoord: het is niet beledigend, visueel gewelddadig of op andere manieren onfatsoenlijk. Natuurlijk mag je overleggen met klasgenoten en mag je op internet kijken hoe je bepaalde dingen kunt maken. Let wel op dat je geen plagiaat pleegt. Je mag maximaal 5 regels code overnemen van andere leerlingen of internet en je schrijft in het commentaar erbij waar je het voorbeeld vandaan hebt. Dat geldt ook voor code die je zelf vertaalt naar het Nederlands. Overtypen van code uit een Youtube-video of een tutorial van internet volgen en dat resultaat inleveren is niet toegestaan. Je gebruikt de startcode die je krijgt. Je gebruikt het stappenplan dat in README.md van het template staat. Een download in zip-formaat van je opdracht mag maximaal 50 MB groot zijn. Werking en aantrekkelijkheid\nSpel start op Het spel werkt (hoe klein ook) Behaalde punten zijn zichtbaar bij game-over Het doel en de bediening van het spel is duidelijk Aantrekkelijk uiterlijk Prettige bediening Eenvoudig om mee te beginnen en moeilijker als je verder komt Afwisselend Techniek\nDe code volgt de lijn van het template De code is netjes en duidelijk leesbaar De code bevat geen dubbele stukken code Je hebt de technieken gebruikt die in de programmeerlessen zijn aangeboden. Je hebt dingen toegevoegd waarvan je zelf hebt uitgezocht hoe ze werken Inzet, planning en samenwerking\nJe toont inzet tijdens de lessen De planning is vooraf gemaakt, gevolgd en als nodig bijgesteld. De taakverdeling is duidelijk en alle teamleden dragen in gelijke mate bij. Het werk is verdeeld over de weken waarin aan de opdracht kon worden gewerkt, dit blijkt onder andere uit de commits in Github. Inleveren De deadline voor inleveren vind je in de lesplanner. Je kunt vragen stellen tot de laatste les voor de deadline. Je zorgt dat alle bestanden in die nodig zijn om je spel te spelen in GitHub staan, dit zijn ten minste: index.html, style.css en script.js. Als je plaatjes gebruikt, dan staan die er ook bij. Je zorgt dat het README.md bestand met je planning aanwezig is. Je hebt aangegeven welke onderdelen gereed zijn. Uit de versie historie in GitHub blijkt hoe je je planning tussentijds hebt gevolgd en bijgesteld. De laatste versie van je PO die op het moment van de deadline in GitHub staat, wordt gebruikt voor de beoordeling. Startcode Uitlegvideo’s - algemene gitpod en rpelit link - stappenplan en uitleg van de repo en gebruikte technieken zet je in de readme - rijkere uitleg zoals video's of code voorbeelden zetten we op de website - zet in de description van de repo een link naar informatica.emmauscollege.nl - hoe verspreiden we de link naar het google-docs document waarin leerlingen zich opgeven voor de groepjes en hun github account opgeven? =\u003e op de pagina van de opdracht en dan bovenaan bij de opdracht een kopje \"inschrijven voor deze opdracht\" toevoegen. ","description":"","tags":null,"title":"O2. Game","uri":"/opdrachten/game/"},{"content":"Je leert hoe een computer allerlei soorten informatie opslaat.\nLesstof Informatica Actief, module informatie digitaal\nDigitale afbeeldingen, pixels met kleur (alleen theorie 1 t/m 7) Bits en Bytes (alleen theorie 1 t/m 5) Talstelsels: decimale en binaire getallen (alleen theorie 1 t/m 9) Rekenen met binaire getallen (overslaan) Digitale tekst (alleen theorie 1 t/m 9) Verschillende soorten afbeeldingen (alleen theorie 1 t/m 12) Bewegend beeld en geluid (alleen theorie 1 t/m 7) Digitale informatie in bestanden (alleen theorie 1 t/m 5) Diagnostische toets (overslaan) Beeldbewerking\nBeeldbewerking oefeningen (powerpoint presentatie) met photopea.com Uitlegvideo’s Leerdoelen Informatie digitaal\nJe kunt binaire getallen omzet naar decimale getallen en andersom. Je kunt binaire getallen omzet naar hexadecimale getallen en andersom. Je kunt decimale getallen omzet naar hexadecimale getallen en andersom. Je kunt uitrekenen uit hoeveel bits of bytes een kilobyte, megabyte, gigabyte of terabyte bestaat. Je kunt uitleggen waarin de klassieke maten van kilo-, mega, gigabyte etc. afwijken van de SI-maten. Je weet wat het verschil is tussen ASCII en Unicode en kunt uitleggen hoe ze tekst digitaliseren. Je kunt uitleggen hoe het RGB-kleurenmodel en het CMYK-kleurenmodel werken, je kunt de verschillen tussen beide kleurenmodellen benoemen en je kunt de modellen gebruiken om kleuren te maken en kleuren te veranderen. Je kent de betekenis van het begrip resolutie Je kunt uitleggen hoe plaatjes worden opgeslagen door een computer Je kent verschillende bestandsformaten voor plaatjes, zoals bmp,gif,jpg en png en de eigenschappen waarin ze van elkaar verschillen Je kunt aangeven welk bestandformast voor plaatjes het best geschikt is voor een beschreven situatie Je kunt uitleggen hoe muziek wordt opgeslagen door een computer Je kunt uitleggen hoe video wordt opgeslagen door een computer Je kunt uitleggen wat een extensie is en waar deze voor dient Je kunt uitleggen wat compressie is aan de hand van voorbeelden (tekst, geluid, plaatjes en video) en je kent het verschil tussen lossless en niet-lossless compressie. Alleen vwo: Je kunt op basis van een beschrijving van een compressie algortime een klein voorbeeld comprimeren en decomprimeren. Beeldbewerking\nJe kunt het aantal pixels van een plaatje aanpassen Je kunt een plaatje bijsnijden (Engels: crop) Je kunt een plaatje in diverse bestand-formaten omzetten (bijvoorbeeld .jpg, .png, .gif) Je kunt basisinstellingen van de kleuren in een plaatje aanpassen (bijvoorbeeld contrast) Je kunt de achtergrond van een plaatje transparant maken, een vast kleur maken, vervangen door een ander plaatje. Je begrijpt wat je kunt doen met lagen en je kunt dat uitleggen aan de hand van een gegeven situatie. Oefentoets Een oefentoets voor deze module staat in Woots.\n","description":"","tags":null,"title":"T2. Digitale informatie","uri":"/theorie/informatie/"},{"content":"Hier vind je alle theorie per module.\nTheorie modules T1. Web Design met HTML en CSS Je leert hoe je informatie op een website zet met de programmeertalen HTML en CSS.\nT2. Digitale informatie Je leert hoe een computer allerlei soorten informatie opslaat.\nT3. Programmeren met Javascript Je leert hoe je eenvoudige programma’s kunt maken met de programmeertaal Javascript en de p5js library.\nT4. Algoritmen in Javascript Je leert hoe je problemen kunt oplossen met algoritmen, je gebruikt daarbij stroomdiagrammen en de programmeertaal Javascript.\nT5. Databases met SQL Je leert hoe je heel veel informatie kunt bekijken en bewaren in databases met de programmeertaal SQL.\nT6. Robotica met Arduino Je leert hoe je met behulp van toestandsgrammen kunt programmeren. Je gebruikt daarbij het Arduino platform.\nT7. Netwerken met IP Je leert hoe het internet van binnen werkt.\nT8. Objectgeoriënteerd Programmeren Je leert object georienteerd programmeren. Dat is een manier van programmeren waarbij data en logica gebundeld zijn in objecten. We leren dit voor zowel JavaScript als C++.\nT9. Security Je leert hoe hackers werken en hoe je kunt zorgen dat jij niet gehackt wordt.\n","description":"","tags":null,"title":"Theorie","uri":"/theorie/"},{"content":"Je gaat je eigen webshop maken!\nOpdrachtbeschrijving De opdracht in het kort is: Maak in groepjes van twee of drie je eigen webshop. Je gebruikt de startcode en breidt de database uit met jouw producten. De api en het website deel pas je aan waar dat nodig is.\nInschrijven Je schrijft je in via het onderstaande formulier dat de docent aanlevert.\n4hin1, link naar formulier volgt 4hin2, link naar formulier volgt 4vin1, link naar formulier volgt 4vin2, link naar formulier volgt Kies wat je gaat verkopen Je bent vrij om zelf te kiezen wat je in je webshop gaat verkopen. Je docent moet goedkeuren wat je verkoopt. Je kunt denken aan kleding, producten die te maken hebben met je idool, zelfgemaakte sieraden, tweedehandsspullen enzovoort. Het hoeven niet persé bestaande producten te zijn.\nWerkwijze Je maakt deze opdracht in een team van twee personen. De docent geeft aan hoe de teams gemaakt worden. Je bepaalt zelf hoe je het werk binnen je team verdeelt, zolang iedereen een gelijkwaardige bijdrage levert. Je krijgt één cijfer per team, maar de docent kan hiervan afwijken als teamleden geen gelijkwaardige bijdrage hebben geleverd. Je krijgt van de docent startcode voor deze opdracht. Deze staat klaar in een repo op GitHub. Er is één repo per team. Je maakt code in Replit (havo) of Gitpod (vwo). Elk teamlid heeft zijn eigen Replit of Gitpod omgeving. Elke week (liefst vaker) slaan alle teamleden hun tussentijdse werk op in de repo op GitHub. Zo zorgen jullie ervoor dat de laatste werkende versie van jullie game steeds op GitHub staat. Deze opdracht maak je alsof het een echt project is. Je maakt eerst een planning. Daarna kijk je wekelijks of je nog volgens plan loopt. Als je niet volgens plan loopt, dan stuur je bij. In de les word je hiermee geholpen, maar uiteindelijk moet jij zorgen dat je op tijd klaar bent en een goed resultaat oplevert. Beoordeling Het cijfer dat je voor je PO krijgt wordt vanuit verschillende invalshoeken bepaald:\nDe technische kwaliteit van de database (vwo 40%, havo 60%) De technische kwaliteit van de aanpassingen in de api en het website-deel (vwo 20%, havo 10%) Wat je extra hebt toegevoegd (vwo 20%, havo 10%) Inzet, planning en samenwerking (20%) Minimale eisen\nVoordat je een cijfer krijgt voor je PO, wordt gekeken of je werk voldoet aan de minimale eisen. Werk dat niet voldoet aan de minimale eisen krijgt het cijfer 1,0. De minimale eisen zijn:\nDe inhoud van je webshop is moreel verantwoord: het is niet beledigend, visueel gewelddadig of op andere manieren onfatsoenlijk. Natuurlijk mag je overleggen met klasgenoten en mag je op internet kijken hoe je bepaalde dingen kunt maken. Let wel op dat je geen plagiaat pleegt. Je mag maximaal 5 regels code overnemen van andere leerlingen of internet en je schrijft in het commentaar erbij waar je het voorbeeld vandaan hebt. Dat geldt ook voor code die je zelf vertaalt naar het Nederlands. Overtypen van code uit een Youtube-video of een tutorial van internet volgen en dat resultaat inleveren is niet toegestaan. Je gebruikt de startcode die je krijgt. Je gebruikt het stappenplan dat in README.md van het template staat. Een download in zip-formaat van je opdracht mag maximaal 50 MB groot zijn. Database Enkele punten waarop gelet kan worden bij de beoordeling zijn\nJe database is genormaliseerd, dat betekent dat je redundante gegevens hebt voorkomen door het gebruik van meerdere tabellen. Je database bevat minimaal tien producten Je neemt ten minste vier eigenschappen van producten op. Je database bevat minimaal vijf tabellen. Je database bevat minimaal één relatie van de vorm 1:n en minimaal één relatie van de vorm n:m. Je SQL-code is toegankelijk, dat wil zeggen niet complexer dan nodig, logisch georganiseerd en waar nodig voorzien van commentaar. API en web Enkele punten waarop gelet kan worden bij de beoordeling zijn.\nDe API is aangepast, zodat hij alle informatie uit de database kan doorgeven aan je website. De html en scripts in je website zijn aangepast, zodat ze alle data die de api levert netjes laten zien. Extra’s Enkele punten waarop gelet kan worden bij de beoordeling zijn.\nJe hebt functies toegevoegd waaruit blijkt dat je heel goed begrijpt hoe de database, api en website samenwerken. Je kunt bijvoorbeeld denken aan het aanbrengen van filters waarmee je snel producten kunt zoeken, of een zoekfunctie. Je hebt substantiële (grote) toevoegingen gedaan aan de html/css van het web-site gedeelte, zowel wat betreft de layout als de functionaliteit. Je kunt bijvoorbeeld denken aan een uitbreiding van meerdere pagina’s met nuttige informatie voor kopers. … Inzet, planning en samenwerking\nJe toont inzet tijdens de lessen De planning is vooraf gemaakt, gevolgd en als nodig bijgesteld. De taakverdeling is duidelijk en alle teamleden dragen in gelijke mate bij. Het werk is verdeeld over de weken waarin aan de opdracht kon worden gewerkt, dit blijkt onder andere uit de commits in Github. Inleveren De deadline voor inleveren vind je in de lesplanner. Je kunt vragen stellen tot de laatste les voor de deadline. Je zorgt dat alle bestanden in die nodig zijn om je spel te spelen in GitHub staan, dit zijn ten minste: index.html, style.css en script.js. Als je plaatjes gebruikt, dan staan die er ook bij. Je zorgt dat het README.md bestand met je planning aanwezig is. Je hebt aangegeven welke onderdelen gereed zijn. Uit de versie historie in GitHub blijkt hoe je je planning tussentijds hebt gevolgd en bijgesteld. De laatste versie van je PO die op het moment van de deadline in GitHub staat, wordt gebruikt voor de beoordeling. Startcode Uitlegvideo’s (havo) Uitlegvideo’s (vwo) ","description":"","tags":null,"title":"O3. Webshop","uri":"/opdrachten/webshop/"},{"content":"Hier vind je de praktische opdrachten. Praktische opdrachten zijn meestal tussen de vier en acht weken werk. Je hebt veel vrijheid en kunt er echt iets moois van maken.\nVoorbeelden Dit zijn voorbeelden van werkstukken die andere leerlingen hebben gemaakt.\nO1. Website Je gaat je eigen website maken!\nO2. Game Je gaat je eigen game programmeren!\nO3. Webshop Je gaat je eigen webshop maken!\nO4. Robot Je gaat je eigen website maken!\nO5. Marble Mania Knikkerbaan Je gaat je eigen website maken!\n","description":"","tags":null,"title":"Opdrachten","uri":"/opdrachten/"},{"content":"Je leert hoe je eenvoudige programma’s kunt maken met de programmeertaal Javascript en de p5js library.\nLesstof Khanacademy, module Intro to JS\nIntro to programming Drawing basics Coloring Variables Animation basics Interactive programs Becoming a community coder (overslaan) Bonus: Resizing with variables Text and strings Functions (lang) Logic and if Statements (lang) Debugging programs (kort) Looping (lang) Writing clean code (kort) Arrays (lang) Objects (overslaan) Object-Oriented Design (overslaan) Becoming a better programmer (overslaan) Lespresentatie of reader volgt.\nUitlegvideo’s Leerdoelen Programmeertalen\nJe kunt uitleggen wat machinetaal is. Je kunt uitleggen wat een compiler is. Je kunt uitleggen wat een library is. Je kunt drie hogere programmeertalen opnoemen. Je kunt uitleggen wat er binnen de informatica bedoeld wordt met het begrip grammatica. Je kunt uitleggen wat een variabele is. Je kunt uitleggen wat declareren en definiëren van een variabele is. Je kunt uitleggen wat een datatype is Je kent de datatypen boolean, number en string en begrijpt welke waarden erin opgeslagen worden Je kunt uitleggen wat controlestructuren zijn en je kent de volgende voorbeelden: if-statement, for-loop, while-loop. Je kunt uitleggen waar abstractie voor dient. Je kunt uitleggen wat een functie is. Je kunt uitleggen wat declareren, definiëren en aanroepen van een functie is. Je kunt uitleggen wat een parameter van een functie is. Je kunt uitleggen wat het resultaat van een functie is. Je kunt uitleggen wat het verschil is tussen globale en lokale variabelen. Je kunt de leesbaarheid van code verbeteren door gebruik te maken van commentaar, lay-out en structuur. Javascript\nje kunt commentaarregels gebruiken. je kunt aangeven welke waarden bepaalde variabelen hebben aan het einde van een stukje computercode. je kunt op basis van een stukje code zelf de bijbehorende schermuitvoer tekenen. je kunt met behulp van naslagmateriaal zelf computercode schrijven om een vraag te beantwoorden. je weet hoe je in een tekening animatie aanbrengt. je begrijpt wat variabelen zijn en hoe je deze kunt gebruiken. je begrijpt wat een logische expressie is en hoe je deze kunt gebruiken. je begrijpt hoe de logische operatoren “en”, “of” en “niet” werken en je kunt deze gebruiken. je begrijpt hoe de vergelijkingsoperatoren “groter dan”, “kleiner dan”, “groter-gelijk dan”, “kleiner-gelijk dan”, “gelijk aan” en “ongelijk aan” werken en je kunt deze gebruiken. je weet wat de datatypen boolean, number en string zijn en kunt deze gebruiken. je begrijpt hoe een if-statement werkt en hoe je deze kunt gebruiken. je begrijpt hoe een while-loop en een for-loop werken en hoe je deze kunt gebruiken. je kunt een while-loop omzetten naar een for-loop en andersom. je begrijpt hoe een for-loop in een for-loop werkt en hoe je dit kunt gebruiken. je begrijpt wat arrays zijn en hoe je deze kunt gebruiken. je kunt een array doorlopen met een for-loop. Alleen vwo: je kunt een twee-dimensionale array doorlopen met een for-loop in een for-loop je begrijpt hoe een functie werkt en hoe je deze kunt gebruiken. je begrijpt wat parameters van een functie zijn en hoe je deze gebruikt. je begrijpt wat het resultaat van een functie is en hoe je dit gebruikt. je begrijpt wat er op het syntaxblad Javascript staat en dit kunt toelichten en gebruiken. Oefentoets Een oefentoets voor deze module staat in Woots.\n","description":"","tags":null,"title":"T3. Programmeren met Javascript","uri":"/theorie/programmeren/"},{"content":"Hulpmiddelen zijn programma’s die we gebruiken om dingen te maken. Hulpmiddelen zijn dus gereedschap (Engels: tools) dat je gebruikt bij informatica.\nDe hulpmiddelen die we bij informatica gebruiken:\nGitHub GitHub is een website waar je code kunt opslaan.\nGitHub (2122 versie) TL;DR Git en GitHub zijn superhandig bij het programmeren, zowel alleen als in een team. Ga naar het stappenplan hieronder om te zien hoe je dit bij het programmeren gebruikt. Wat is GitHub? GitHub is een website waarop je gemakkelijk je programmeercode kunt opslaan. Je moet het zien als een soort cloudopslag voor je code. Heb je eenmaal een account in GitHub aangemaakt, dan kun je repositories maken. Een repository bevat de code voor één project of opdracht.\nReplit Replit is een online ontwikkelomgeving waarin je code kunt wijzigen en uitvoeren. We gebruiken dit op de havo.\nGitpod Gitpod is een online ontwikkelomgeving waarin je code kunt wijzigen en uitvoeren (en veel meer). We gebruiken dit op het vwo.\nArduino IDE Arduino IDE is een programma waarin je code kunt schrijven en downloaden in je Arduino.\nFilius Filius is een programma waarmee je netwerken kunt namaken en simuleren.\n","description":"","tags":null,"title":"Hulpmiddelen","uri":"/tools/"},{"content":"Je gaat je eigen website maken!\nOpdrachtbeschrijving De opdracht in het kort is: …\nDEZE PAGINA BEVAT NOG NIET DE GOEDE INFO Inschrijven Je schrijft je in via het onderstaande formulier dat de docent aanlevert.\n4hin1, link naar formulier volgt 4hin2, link naar formulier volgt 4vin1, link naar formulier volgt 4vin2, link naar formulier volgt Game kiezen Je bent vrij om zelf te kiezen welke game je gaat maken. Je docent moet de game die je kiest goedkeuren. Enkele voorbeelden van een game die je kunt maken zijn: Tennis, Flappy Bird, Snake (voorganger van Slither.io), een Break Out Game (zoals Arkanoid), een race spelletje, een eenvoudige platform game (zoals pacman), een puzzelspel enzovoort.\nWerkwijze Je maakt deze opdracht in een team van twee personen. De docent geeft aan hoe de teams gemaakt worden. Je bepaalt zelf hoe je het werk binnen je team verdeelt, zolang iedereen een gelijkwaardige bijdrage levert. Je krijgt één cijfer per team, maar de docent kan hiervan afwijken als teamleden geen gelijkwaardige bijdrage hebben geleverd. Je krijgt van de docent startcode voor deze opdracht. Deze staat klaar in een repo op GitHub. Er is één repo per team. Je maakt code in Replit (havo) of Gitpod (vwo). Elk teamlid heeft zijn eigen Replit of Gitpod omgeving. Elke week (liefst vaker) slaan alle teamleden hun tussentijdse werk op in de repo op GitHub. Zo zorgen jullie ervoor dat de laatste werkende versie van jullie game steeds op GitHub staat. Deze opdracht maak je alsof het een echt project is. Je maakt eerst een planning. Daarna kijk je wekelijks of je nog volgens plan loopt. Als je niet volgens plan loopt, dan stuur je bij. In de les word je hiermee geholpen, maar uiteindelijk moet jij zorgen dat je op tijd klaar bent en een goed resultaat oplevert. Beoordeling Het cijfer dat je voor je PO krijgt wordt vanuit vier invalshoeken bepaald:\nbasiswerking uiterlijk techniek inzet, planning en samenwerking Minimale eisen\nVoordat je een cijfer krijgt voor je PO, wordt gekeken of je werk voldoet aan de minimale eisen. Werk dat niet voldoet aan de minimale eisen krijgt het cijfer 1,0. De minimale eisen zijn:\nDe inhoud van je webshop is moreel verantwoord: het is niet beledigend, visueel gewelddadig of op andere manieren onfatsoenlijk. Natuurlijk mag je overleggen met klasgenoten en mag je op internet kijken hoe je bepaalde dingen kunt maken. Let wel op dat je geen plagiaat pleegt. Je mag maximaal 5 regels code overnemen van andere leerlingen of internet en je schrijft in het commentaar erbij waar je het voorbeeld vandaan hebt. Dat geldt ook voor code die je zelf vertaalt naar het Nederlands. Overtypen van code uit een Youtube-video of een tutorial van internet volgen en dat resultaat inleveren is niet toegestaan. Je gebruikt de startcode die je krijgt. Je gebruikt het stappenplan dat in README.md van het template staat. Een download in zip-formaat van je opdracht mag maximaal 50 MB groot zijn. Werking en aantrekkelijkheid\nSpel start op Het spel werkt (hoe klein ook) Behaalde punten zijn zichtbaar bij game-over Het doel en de bediening van het spel is duidelijk Aantrekkelijk uiterlijk Prettige bediening Eenvoudig om mee te beginnen en moeilijker als je verder komt Afwisselend Techniek\nDe code volgt de lijn van het template De code is netjes en duidelijk leesbaar De code bevat geen dubbele stukken code Je hebt de technieken gebruikt die in de programmeerlessen zijn aangeboden. Je hebt dingen toegevoegd waarvan je zelf hebt uitgezocht hoe ze werken Inzet, planning en samenwerking\nJe toont inzet tijdens de lessen De planning is vooraf gemaakt, gevolgd en als nodig bijgesteld. De taakverdeling is duidelijk en alle teamleden dragen in gelijke mate bij. Het werk is verdeeld over de weken waarin aan de opdracht kon worden gewerkt. Inleveren De deadline voor inleveren vind je in de lesplanner. Je kunt vragen stellen tot de laatste les voor de deadline. Je zorgt dat alle bestanden in die nodig zijn om je spel te spelen in GitHub staan, dit zijn ten minste: index.html, style.css en script.js. Als je plaatjes gebruikt, dan staan die er ook bij. Je zorgt dat het README.md bestand met je planning aanwezig is. Je hebt aangegeven welke onderdelen gereed zijn. Uit de versie historie in GitHub blijkt hoe je je planning tussentijds hebt gevolgd en bijgesteld. De laatste versie van je PO die op het moment van de deadline in GitHub staat, wordt gebruikt voor de beoordeling. Startcode Uitlegvideo’s - algemene gitpod en rpelit link - stappenplan en uitleg van de repo en gebruikte technieken zet je in de readme - rijkere uitleg zoals video's of code voorbeelden zetten we op de website - zet in de description van de repo een link naar informatica.emmauscollege.nl - hoe verspreiden we de link naar het google-docs document waarin leerlingen zich opgeven voor de groepjes en hun github account opgeven? =\u003e op de pagina van de opdracht en dan bovenaan bij de opdracht een kopje \"inschrijven voor deze opdracht\" toevoegen. ","description":"","tags":null,"title":"O4. Robot","uri":"/opdrachten/robot/"},{"content":"Je leert hoe je problemen kunt oplossen met algoritmen, je gebruikt daarbij stroomdiagrammen en de programmeertaal Javascript.\nLesstof Eenvoudige algoritmen\nStroomdiagrammen lespresentatie, met codevoorbeelden in replit (wordt misschien herzien) Programmeeropdrachten in Github (wordt misschien overgezet naar Woots) Complexe algoritmen (vwo)\nVolgt nog, we denken aan sorteren, kortste pad, efficiency Uitlegvideo’s Er zijn (nog) geen uitlegvideo’s bij deze theorie\nLeerdoelen Eenvoudige algoritmen\nje kunt uitleggen wat een algoritme is je kunt uitleggen wat een flowchart is en waarvoor je deze gebruikt je kunt flowcharts lezen, dat betekent dat je de output van een flowchart kunt bepalen als de input en de flowchart gegeven worden je kunt een flowchart maken van een eenvoudig algoritme waarvan je een korte beschrijving en een voorbeeld van de input en de output krijgt. Een eenvoudig algoritme is een algoritme waarbij een rij wordt doorlopen, zoals bijvoorbeeld: zoek het grootste getal in een rij, bereken het gemiddelde van alle getallen in een rij, tel het aantal keer dat een bepaalde letter voorkomt in een tekst. je kunt een flowcharts omzetten naar JavaScript code en JavaScript code kunnen omzetten naar een flowchart. Complexe algoritmen\nvolgt nog Oefentoets Een oefentoets voor deze module staat in Woots.\n","description":"","tags":null,"title":"T4. Algoritmen in Javascript","uri":"/theorie/algoritmen/"},{"content":"Chapter 4 This could be yours Start your success story. Now!\n","description":"","tags":null,"title":"This could be yours","uri":"/yours/"},{"content":"Hier vind je informatie voor docenten. Geen geheimen natuurlijk, want leerlingen kunnen deze pagina ook bekijken.\nOnze filosofie We zijn in juni 2022 begonnen met deze site, vanuit de behoefte om alle verschillende stukken lesmateriaal die we de afgelopen jaren verzameld hebben overzichtelijk en laagdrempelig voor leerlingen bij elkaar te brengen. Bij het maken van de site hebben we ons laten leiden door de volgende uitgangspunten:\ninformatica als praktisch vak (leuk voor leerlingen, relevantie van theorie door koppeling met praktijk) laagdrempelig voor leerlingen (zo min mogelijk drempels: weinig kliks, ook op mobiel, geen inlog, snel vinden wat je zoekt, eenvoudige structuur) modulair programma (eenvoudig te onderhouden, onderdelen eenvoudig te vernieuwen) we maken geen lesmethode, maar een programma. Dat betekent dat we zoveel mogelijk verwijzen naar bestaand (Nederlandstalig of Engelstalig) lesmateriaal. Gebruiken in je klas Geef de link aan je leerlingen en gebruik de delen die je aanstaan. Zolang je doel is om leerlingen te helpen met informatica, vinden wij het geweldig.\nZelf aanpassen Wil je aanpassingen doen? Dat doe je zo:\nFork onze repo op github Maak de juiste instellingen (vraag CAM@emmaus) Pas de site naar je eigen behoeften aan Probeer schoolspecifieke informatie zoveel mogelijk te scheiden van de rest, dat is handig als je updates van ons wilt overnemen Meer informatie over de gebruike technieken\nHugo Documentation Theme Relearn Documentation Bijdragen We vinden het tof als je het programma gebruikt en nog toffer als je mee wilt werken om het verder te verbeteren. Als we kennis delen dan wordt het voor iedereen beter en kost het ons met zijn allen minder tijd om een mooi programma te onderhouden. Bijdragen kan als volgt:\nVoor kleine wijzigingen (binnen 1 pagina) kun je klikken op het potlood rechtsboven elke pagina. De aanpassing kun je vervolgens in github maken. Na goedkeuring worden ze automatisch verwerkt. (@we moeten dit nog testen) Voor substantielere wijzigingen, zoals toevoegen van een nieuwe (keuze)module. Contact ons via mail. We staan altijd open voor het uitwisselen van ervaring, contact ons Contact Arie Pieter Cammeraat CAM@emmaus\nSander van Geest GEE@emmaus Beide docent informatica op het Emmauscollege Rotterdam (volledige mailadres niet opgenomen ter bescherming tegen spam, tip: het mailadres eindigt op emmauscollege.nl 😉)\nMeer inspiratie Kijk voor meer inspiratie ook eens op de informatica site van deze scholen:\nMetis Montessori Lyceum Amsterdam License This site is licensed under the MIT License.\nCredits Wil jij je naam hier? Help ons dan om de site beter te maken.\n","description":"","tags":null,"title":"Docentenpagina","uri":"/docenten/"},{"content":"Je gaat je eigen website maken!\nOpdrachtbeschrijving De opdracht in het kort is: …\nDEZE PAGINA BEVAT NOG NIET DE GOEDE INFO Inschrijven Je schrijft je in via het onderstaande formulier dat de docent aanlevert.\n4hin1, link naar formulier volgt 4hin2, link naar formulier volgt 4vin1, link naar formulier volgt 4vin2, link naar formulier volgt Game kiezen Je bent vrij om zelf te kiezen welke game je gaat maken. Je docent moet de game die je kiest goedkeuren. Enkele voorbeelden van een game die je kunt maken zijn: Tennis, Flappy Bird, Snake (voorganger van Slither.io), een Break Out Game (zoals Arkanoid), een race spelletje, een eenvoudige platform game (zoals pacman), een puzzelspel enzovoort.\nWerkwijze Je maakt deze opdracht in een team van twee personen. De docent geeft aan hoe de teams gemaakt worden. Je bepaalt zelf hoe je het werk binnen je team verdeelt, zolang iedereen een gelijkwaardige bijdrage levert. Je krijgt één cijfer per team, maar de docent kan hiervan afwijken als teamleden geen gelijkwaardige bijdrage hebben geleverd. Je krijgt van de docent startcode voor deze opdracht. Deze staat klaar in een repo op GitHub. Er is één repo per team. Je maakt code in Replit (havo) of Gitpod (vwo). Elk teamlid heeft zijn eigen Replit of Gitpod omgeving. Elke week (liefst vaker) slaan alle teamleden hun tussentijdse werk op in de repo op GitHub. Zo zorgen jullie ervoor dat de laatste werkende versie van jullie game steeds op GitHub staat. Deze opdracht maak je alsof het een echt project is. Je maakt eerst een planning. Daarna kijk je wekelijks of je nog volgens plan loopt. Als je niet volgens plan loopt, dan stuur je bij. In de les word je hiermee geholpen, maar uiteindelijk moet jij zorgen dat je op tijd klaar bent en een goed resultaat oplevert. Beoordeling Het cijfer dat je voor je PO krijgt wordt vanuit vier invalshoeken bepaald:\nbasiswerking uiterlijk techniek inzet, planning en samenwerking Minimale eisen\nVoordat je een cijfer krijgt voor je PO, wordt gekeken of je werk voldoet aan de minimale eisen. Werk dat niet voldoet aan de minimale eisen krijgt het cijfer 1,0. De minimale eisen zijn:\nDe inhoud van je webshop is moreel verantwoord: het is niet beledigend, visueel gewelddadig of op andere manieren onfatsoenlijk. Natuurlijk mag je overleggen met klasgenoten en mag je op internet kijken hoe je bepaalde dingen kunt maken. Let wel op dat je geen plagiaat pleegt. Je mag maximaal 5 regels code overnemen van andere leerlingen of internet en je schrijft in het commentaar erbij waar je het voorbeeld vandaan hebt. Dat geldt ook voor code die je zelf vertaalt naar het Nederlands. Overtypen van code uit een Youtube-video of een tutorial van internet volgen en dat resultaat inleveren is niet toegestaan. Je gebruikt de startcode die je krijgt. Je gebruikt het stappenplan dat in README.md van het template staat. Een download in zip-formaat van je opdracht mag maximaal 50 MB groot zijn. Werking en aantrekkelijkheid\nSpel start op Het spel werkt (hoe klein ook) Behaalde punten zijn zichtbaar bij game-over Het doel en de bediening van het spel is duidelijk Aantrekkelijk uiterlijk Prettige bediening Eenvoudig om mee te beginnen en moeilijker als je verder komt Afwisselend Techniek\nDe code volgt de lijn van het template De code is netjes en duidelijk leesbaar De code bevat geen dubbele stukken code Je hebt de technieken gebruikt die in de programmeerlessen zijn aangeboden. Je hebt dingen toegevoegd waarvan je zelf hebt uitgezocht hoe ze werken Inzet, planning en samenwerking\nJe toont inzet tijdens de lessen De planning is vooraf gemaakt, gevolgd en als nodig bijgesteld. De taakverdeling is duidelijk en alle teamleden dragen in gelijke mate bij. Het werk is verdeeld over de weken waarin aan de opdracht kon worden gewerkt. Inleveren De deadline voor inleveren vind je in de lesplanner. Je kunt vragen stellen tot de laatste les voor de deadline. Je zorgt dat alle bestanden in die nodig zijn om je spel te spelen in GitHub staan, dit zijn ten minste: index.html, style.css en script.js. Als je plaatjes gebruikt, dan staan die er ook bij. Je zorgt dat het README.md bestand met je planning aanwezig is. Je hebt aangegeven welke onderdelen gereed zijn. Uit de versie historie in GitHub blijkt hoe je je planning tussentijds hebt gevolgd en bijgesteld. De laatste versie van je PO die op het moment van de deadline in GitHub staat, wordt gebruikt voor de beoordeling. Startcode Uitlegvideo’s - algemene gitpod en rpelit link - stappenplan en uitleg van de repo en gebruikte technieken zet je in de readme - rijkere uitleg zoals video's of code voorbeelden zetten we op de website - zet in de description van de repo een link naar informatica.emmauscollege.nl - hoe verspreiden we de link naar het google-docs document waarin leerlingen zich opgeven voor de groepjes en hun github account opgeven? =\u003e op de pagina van de opdracht en dan bovenaan bij de opdracht een kopje \"inschrijven voor deze opdracht\" toevoegen. ","description":"","tags":null,"title":"O5. Marble Mania Knikkerbaan","uri":"/opdrachten/knikkerbaan/"},{"content":"Je leert hoe je heel veel informatie kunt bekijken en bewaren in databases met de programmeertaal SQL.\nLesstof Khanacademy, module Intro to SQL\nSQL basics More advanced SQL queries Relational queries in SQL (lang) Modifying databases with SQL Further learning in SQL (overslaan) Ruimtedatabase (alleen vwo)\nOpgaven met antwoorden in Woots Uitlegvideo’s met antwoorden Uitlegvideo’s Leerdoelen Databases theorie\nJe kunt uitleggen wat een relationele database is. alleen vwo: Je kunt gegevens analyseren en structureren en relaties vastleggen in een multipliciteitsdiagram. alleen vwo: Je kunt gegevens analyseren en structureren en vastleggen in een strokendiagram. Je kunt een database voorzien van een voorbeeldpopulatie (dit betekent dat je gegevens in velden kunt invullen). Je kunt het verschil tussen en 1:n, n:1 en n:m relatie uitleggen en je kunt in een gegeven voorbeeld aangeven van welke relatie sprake is. Je kunt uitleggen wat redundantie is. Je kunt uitleggen wat normaliseren is. Je kunt een gegeven, niet volledig genormaliseerde database omzetten naar een database in de 3e normaalvorm (dit betekent dat je de redundante informatie kunt verwijderen door de database te splitsen in meerdere aan elkaar gerelateerde tabellen). Je kunt voor een gegeven situatie een voorstel te doen voor een genormaliseerde database structuur. Je kunt aangegeven welke (combinaties van) velden uniek zijn / als sleutel kunnen dienen. Je weet waarvoor de primaire sleutel dient. Je weet wat een verwijzende sleutel is. Je weet hoe verwijzingen tussen verschillende tabellen met behulp van sleutels werken. Je weet hoe in een database wordt aangegeven dat een veld geen waarde bevat. Databases programmeren in khan:\nJe kunt met CREATE TABLE een gegevensmodel omzetten in een database. Je kunt met INSERT rijen aan een tabel toevoegen. alleen vwo: Je kunt met DELETE rijen verwijderen uit een tabel. Je kunt met SELECT gegevens uit een relationele database opvragen. Je kunt de opgevraagde gegevens uit een relationele database oplopend en aflopend sorteren. Je kunt voorwaarden stellen aan de op te vragen gegevens uit de database (WHERE) en gebruikmaken van operatoren (=, \u003c, \u003e, \u003e=, \u003c=, \u003c\u003e). Je kunt gebruikmaken van LIKE bij het stellen van voorwaarden in de query. alleen vwo: Je kunt gebruik maken van een subquery in combinatie met de voorwaarde IN. Je kunt gebruikmaken van samengestelde voorwaarden (AND, OR) bij het stellen van voorwaarden in de query. Je kunt gebruikmaken van omgedraaide voorwaarden (NOT) bij het stellen van voorwaarden in de query. Je kunt gebruikmaken van NULL bij het stellen van voorwaarden in de query. Je kunt gebruikmaken van aggregatiefuncties (COUNT, SUM, MAX, MIN, AVG) bij het opstellen van query. Je kunt gebruikmaken van GROUP BY bij het groeperen van de resultaten van een query. Je kunt voorwaarden stellen aan op te vragen gegroepeerde gegevens met HAVING alleen havo: Je kunt bij een query over 2 of 3 tabellen de JOIN toepassen alleen vwo: Je kunt bij een query over 2 of meer tabellen de JOIN toepassen Je kunt een query maken met JOIN van een 1-op-n relatie Je kunt een query maken met JOIN van een n-op-m relatie alleen vwo: Je kent het verschil tussen cross join (JOIN zonder ON), inner join (JOIN ON), left outer join (LEFT JOIN ON) en kunt beslissen welke van deze drie je nodig hebt in een query. Oefentoets Een oefentoets voor deze module staat in Woots.\n","description":"","tags":null,"title":"T5. Databases met SQL","uri":"/theorie/databases/"},{"content":"Chapter 5 Tests Some pages for internal testing of differnt styles\nCode Some testing for different styles used in syntax highlightning and preformatted blocks\nImages Some testing for different styles of image links\nLinks Some testing for different styles of links\n","description":"","tags":null,"title":"Tests","uri":"/tests/"},{"content":"Je leert hoe je met behulp van toestandsgrammen kunt programmeren. Je gebruikt daarbij het Arduino platform.\nLesstof Microcontrollers\nMicrocontroller reader (alleen de paragrafen 1.1, 2.1 t/m 2.9, 3.2, 4.1 t/m 4.3, 5.1 t/m 5.6 en 6.4) Arduino-lessen.nl, les 1 t/m 5\nKnipperende led Knipperend led op breadboard Fadende led op breadboard met PWM Knippersnelheid regelen met potmeter LED schakelen met drukknop Toestandsdiagrammen\nLesstof volgt Uitlegvideo’s Er zijn (nog) geen uitlegvideo’s bij deze theorie\nLeerdoelen Arduino\nJe kunt uitleggen wat een microcontroller is. Je weet wat de setup() en loop() functies in een Arduino sketch zijn. Je weet hoe je digitale en analoge poorten aanstuurt of uitleest Je weet hoe je delay() gebruikt en wat de voor- en nadelen van deze functie zijn. Je begrijpt wat de functie millis() doet. Je kunt de functie millis() gebruiken als vervanging van delay(). Je weet hoe je een PWM signaal kunt creëren Je kunt uitleggen wat een PWM signaal is en kunt daarbij de term duty cycle correct gebruiken en uitleggen Je weet hoe een breadboard werkt Je weet hoe je een variabele weerstand aansluit op een analoge poort van Arduino Je weet hoe je een LED aansluit op een digitale poort van Arduino Je weet hoe je een knop aansluit op een digitale input poort van Arduino Je weet wat het verschil is tussen een sensor en een actuator. Je kunt een aansluitschema maken van een systeem dat beschreven is in een stuk tekst. Het aansluitschema bevat een Arduino, actuatoren en sensoren. Je kent de volgende datatypen: string, int, float Je kunt Arduino code aanpassen om tot een gevraagde oplossing te komen. Je kunt korte programma’s maken die een knipperende LED, gedimde LED, knop en potmeter gebruiken. Je hebt voorkennis van programmeren op het niveau van de vierde klas. Toestandsdiagrammen\nJe kunt aan de hand van een gegeven toetstandsdiagram aangeven hoe een systeem zich gedraagt. Je kunt een toestandsdiagram maken van een systeem dat beschreven is in een stuk tekst. Je kunt een toestandsdiagram omzetten in Pseudocode. Je kunt pseudocode omzetten in Arduino-code. ","description":"","tags":null,"title":"T6. Robotica met Arduino","uri":"/theorie/robotica/"},{"content":"Je leert hoe het internet van binnen werkt.\nDeze module wordt misschien herzien.\nLesstof Theorie\nNetwerken lespresentatie (Powerpoint presentatie) Geschiedenis van netwerken (reader) Netwerktopologieën (reader) How the internet works (video’s) Oefeningen Informatica Actief, keuzemodule netwerken\nInformatica Actief, keuzemodule netwerken (1.1, sla 1.2 over) In plaats van Filius te installeren, gebruik je Filius in Gitpod Informatica Actief, keuzemodule netwerken (2.1 t/m 2.17) Informatica Actief, keuzemodule netwerken (3.1 t/m 3.8) Informatica Actief, keuzemodule netwerken (4.1 t/m 4.3) Informatica Actief, keuzemodule netwerken (5.1 t/m 5.5) Uitlegvideo’s Leerdoelen Netwerken\nJe kent een aantal belangrijke feiten uit de geschiedenis van het internet, zodat je: kunt uitleggen waarom het ARPANET de voorvader van het internet is kunt uitleggen wie ethernet heeft bedacht en wat de techniek achter dit protocol is kunt uitleggen wanneer het zogenoemde wereldwijde web ontstond en wat HTTP daarmee te maken had. met behulp van een berekening kunt aantonen wat de hoofdreden is om het IP versie 4 protocol te vervangen door IPv6 Je kunt het verschil uitleggen tussen een LAN en een WAN. Je kent de volgende netwerktopologieën: bus, ring, ster, mesh (of maas, zowel volledig als onvolledig vermaasd). Je kunt uitleggen hoe deze verschillen in betrouwbaarheid en benodigde infrastructuur. Je kent de belangrijkste verschillen tussen communicatie over koperen verbindingen, glasvezelverbindingen en draadloze verbindingen Je weet wat bij computernetwerken de termen lag / latency / latentie en bandbreedte betekenen en hoe ze de snelheid van een netwerkverbinding beïnvloeden. Je kunt uitleggen waarvoor het het OSI-model is ontwikkeld Je begrijpt het OSI-model / IP-stack. Je kunt de applicatielaag, transportlaag, netwerklaag, datalinklaag en fysische laag uitleggen. Je kunt twee voordelen benoemen van het werken met een lagenmodel zoals het OSI-model of de IP-stack. Je weet wat een MAC-adres is, bij welke laag het hoort en waarvoor het wordt gebruikt. Je weet wat ARP is en waarvoor het dient. Je weet wat het MAC broadcast adres is en waarvoor het dient. Je weet wat een IP-adres is, bij welke laag het hoort en waarvoor het wordt gebruikt. Je kunt met behulp van routeringstabellen het gedrag van een router bij een inkomend bericht beschrijven. Je weet wat het IP broadcast adres is en waarvoor het dient. Je weet wat een subnetmasker is en waarvoor dit dient. Je kunt met behulp van het subnetmasker uitrekenen hoeveel apparaten er in een netwerk verbonden kunnen zijn. Je weet wat het nadeel is van een subnetwerk met heel veel apparaten. Je kunt de twee belangrijkste verschillen tussen TCP en UDP benoemen Je weet wat TCP-poorten zijn en waarvoor deze dienen Je kunt beschrijven hoe een pakketje van een apparaat in het ene subnet naar een apparaat in het andere subnet reist. Je kent de functie van de volgende netwerkapparaten: router, modem, switch, wireless access point, repeater, firewall Je kunt beredeneren tot op welk niveau van het OSI-model een netwerkapparaat werkzaam is. Je kunt bij schematische weergave van een netwerk de verschillende netwerkapparaten herkennen en benoemen en IP-adressen en subnetmaskers bepalen of toewijzen. Je weet wat de functie van een firewall is. Je begrijpt wat een DNS is en waarvoor deze dient Je kunt uitleggen wat de functie van een DHCP server is. ","description":"","tags":null,"title":"T7. Netwerken met IP","uri":"/theorie/netwerken/"},{"content":"Je leert object georienteerd programmeren. Dat is een manier van programmeren waarbij data en logica gebundeld zijn in objecten. We leren dit voor zowel JavaScript als C++.\nTheorie Arduino-lessen.nl, les 1 t/m 5 Uitlegvideo’s Uitlegvideo’s bij deze theorie moeten we nog opzoeken\nLeerdoelen Je kunt Alleen vwo: Je kunt ","description":"","tags":null,"title":"T8. Objectgeoriënteerd Programmeren","uri":"/theorie/objectoriented/"},{"content":"Je leert hoe hackers werken en hoe je kunt zorgen dat jij niet gehackt wordt.\nTheorie Arduino-lessen.nl, les 1 t/m 5 Uitlegvideo’s Uitlegvideo’s bij deze theorie moeten we nog opzoeken\nLeerdoelen Je kunt Alleen vwo: Je kunt ","description":"","tags":null,"title":"T9. Security","uri":"/theorie/security/"},{"content":"GitHub is een website waar je code kunt opslaan.\nWat is GitHub? GitHub is een website waar je code kunt opslaan\nHeel veel goede programmeurs gebruiken GitHub Heel veel programmeeromgevingen kunnen samenwerken met GitHub GitHub bewaart alle oude versies van je code Code op GitHub kun je gemakkelijk delen met anderen GitHub biedt heel veel speciale mogelijkheden om in groepen aan dezelfde code te werken GitHub kun je zien als een soort cloudopslag voor je code. Github slaat code op in repositories. Een repository (kortweg: repo) bevat de code voor één project of opdracht. De kern van een repository zijn de bestanden.\nEen account aanmaken Ga naar https://www.github.com/ (gebruikt Chrome of Firefox, in 21/22 werkt dit niet in Safari) Klik op sign-up Gebruik je email adres van school (1xxxxx@emmauscollege.nl) Zorg dat je het wachtwoord dat je kiest terug kunt vinden Kies als username je voornaam met een letter van je achternaam, als die al bezet is voeg je een nummer toe. Bijvoorbeeld jamesb007 Bevestig je account door te klikken op de link in de mail die je ontvangt van GitHub Hoe werkt code wijzigen in Github? Er zijn veel manieren om code die je in GitHub bewaard te wijzigen. Bijna altijd maak je eerst een kopie van GitHub in je eigen ontwikkelomgeving (je computer of een online ontwikkelomgeving zoals Gitpod of Replit). Dit heet clonen (spreek uit als “kloonen”). Vervolgens wijzig en test je code die in je clone zit. Als een wijziging goed is, dan zet je die terug op GitHub. Dit wijzigen gaat in de volgende stappen:\nPull : Haal alle updates van GitHub binnen in je lokale repository. Codeer : Maak / verander je programmeercode. Save : Sla je veranderingen op. Probeer : Test uit of het werkt. Stage : Zet de gewijzigde bestanden klaar voor de commit. Message : Typ een korte maar begrijpelijke commitboodschap. Commit : Maak een nieuw punt in je tijdlijn. Pull : Kijk of er intussen geen nieuwe wijzigingen in GitHub zijn gemaakt door een team-genoot. Push : Duw je commit van je ’lokale’ repository naar je (cloud) repository op GitHub. Hoe werkt versiebeheer in GitHub? Je kunt je git het gemakkelijkst voorstellen als een tijdlijn. De punten op de tijdlijn zijn alle versies die jij vanaf het begin hebt ‘opgeslagen’:\nHoe werkt dit? Tijdens het programmeren werk je vaak zo:\nMaak / verander je programmeercode. Sla je veranderingen op. Test uit of het werkt. Het maakt eigenlijk niet uit of je hierbij gebruik maakt van GitPod, Repl.it, Arduino of een andere programmeeromgeving.\nMet het gebruik van git komt daar nog een stap bij: de commit. Een commit doen betekent dat je een nieuw punt aan je tijdlijn toevoegt. Dit doe je als volgt:\nZet de bestanden klaar voor de commit Typ een korte maar begrijpelijke commitboodschap Commit Hoe werkt samenwerken in GitHub? GitHub functioneert als de centrale cloudopslag waar iedereen mee synchroniseert. Het is belangrijk om te beseffen dat je code in je programmeeromgeving en GitHub wel aan elkaar verbonden, maar niet automatisch gesynchroniseerd zijn. Je zult dit handmatig moeten doen. Maak je gebruik van GitHub, dan voer je na je commit een synchronisatie uit:\nDuw je commit van je ’lokale’ repository naar je repository op GitHub. Wanneer je samenwerkt met anderen, wil je als je later verdergaat eerst eventuele aanpassingen van je teamgenoten binnenhalen. Als zij die netjes hebben geduwd naar de repository op GitHub, kun jij die eenvoudig binnenhalen. Bij samenwerken in een team wordt stap 1 dus:\nHaal eventuele nieuwe commits van je GitHub repository binnen. Gitpod en Replit gebruiken Gitpod en Replit (of andere online ontwikkelomgevingen) hebben een koppeling met GitHub. Dat betekent dat je vanuit Gitpod en Replit wijzigingen in GitHub kunt opslaan. Zie de handleiding van Gitpod en de handleiding van Replit op deze deze website voor meer informatie.\nDe Github dev omgeving gebruiken In de Github dev-omgeving kun je meerdere bestanden tegelijk wijzigen, verplaatsen of toevoegen. Het lijkt erg op Gitpod, maar in tegenstelling tot Gitpod kan de Github dev-omgeving je code niet uitvoeren.\nJe komt in de Github dev-omgeving door de punt (\".\") op je toetsenbord in te drukken op het moment dat je een repo ziet in GitHub.\nLinks in het scherm zie je al je bestanden. Enkele mogelijkheden zijn:\nDownloaden van een bestand: Klik met de rechtermuisknop op een bestand en kies “download” in het menu dat verschijnt. Toevoegen van nieuwe bestanden kan door bestanden van je bureaublad naar de dev-omgeving te slepen. Bestanden kopieren, een andere naam geven, verplaatsen of verwijderen. Een map maken, een andere naam geven, verplaatsen of verwijderen (letop: Github kan niet goed overweg met mappen waar geen bestanden in staan) Als je klaar bent met wijzigen, dan commit je de wijzigingen en push je ze naar GitHub. Druk daarvoor links op het versiebeheer icoon (drie rondjes met 2 lijntjes ertussen) en gebruik het menu onder de drie puntjes dat verschijnt op de plek waar je bestanden stonden. LETOP: Als je vergeet te committen en pushen dan worden je wijzigingen niet opgeslagen!!!\nDe Github website gebruiken De Github website werkt niet handig voor het aanbrengen van wijzigingen in je code, maar er zijn een aantal functies die je hier wel handig kunt doen.\nRepo’s zoeken Links in het scherm staan de repo’s die je recent en vaak gebruikt hebt. Door op een repo te klikken wordt deze geladen. De link van de repo staat bovenin je browser, deze heb je bijvoorbeeld nodig als je de repo in Gitpod of replit wilt gebruiken.\nBekijken wat er in een repo zit Je kunt snel zien wat er in een repo zit door op de bestanden of mappen in de repo te klikken.\nBekijken wat er gewijzigd is Je kunt alle wijzigingen in een repo terugzien. Een lijst met de laatste wijzigingen krijg je door te klikken op het aantal commits, onder de groene knop met “Code”. Van elke commit kun je zien wat er is gewijzigd, klik daarvoor op het nummer van de commit aan het einde van de regel.\nAlle bestanden uit een repo downloaden Je kunt alle bestanden in een repo downloaden in een zip-bestand. klik op de groene knop “Code” en kies in het menu dat verschijnt voor “Download ZIP”.\nGit gebruiken Veel programmeurs gebruiken git op hun computer om code op de slaan in repo’s. Git is een programma waarin alle commando’s zitten die nodig zijn om met repo’s te werken. Als je hier dagelijks mee werkt en veel commando’s uit je hoofd kent, dan werkt dit heel snel. Voor leerlingen is dit niet zo een handige methode, wij gebruiken hem daarom niet.\nQ\u0026A GitHub 404 fout Ik heb via email een link ontvangen om toegang te krijgen tot een repo, maar als ik op de link druk dan krijg ik een 404 fout. Wat moet ik doen?\nLogin op GitHub en druk daarna nogmaals op de link.\n","description":"","tags":null,"title":"GitHub","uri":"/tools/github/"},{"content":"TL;DR Git en GitHub zijn superhandig bij het programmeren, zowel alleen als in een team. Ga naar het stappenplan hieronder om te zien hoe je dit bij het programmeren gebruikt.\nWat is GitHub? GitHub is een website waarop je gemakkelijk je programmeercode kunt opslaan. Je moet het zien als een soort cloudopslag voor je code. Heb je eenmaal een account in GitHub aangemaakt, dan kun je repositories maken. Een repository bevat de code voor één project of opdracht. De kern van een repository zijn de bestanden. GitHub biedt echter nog veel meer functies aan, zoals planborden (projects) en lijsten waarop je taken (issues) kunt bijhouden.\nGit GitHub is genoemd naar git. Git is zgn. versiecontrolesysteem, ontwikkeld door Linus Torvalds, de maker van het besturingssysteem Linux. Git is een prachtig hulpmiddel waarmee je:\ngemakkelijk terugkunt naar eerdere versies van je code. gemakkelijk tegelijk met anderen aan dezelfde code kunt werken zonder dat alles door de war gaat Tijdlijn Je kunt je git het gemakkelijkst voorstellen als een tijdlijn. De punten op de tijdlijn zijn alle versies die jij vanaf het begin hebt ‘opgeslagen’:\nHoe werkt dit? Tijdens het programmeren werk je vaak zo:\nMaak / verander je programmeercode. Sla je veranderingen op. Test uit of het werkt. Het maakt eigenlijk niet uit of je hierbij gebruik maakt van GitPod, Repl.it, Arduino of een andere programmeeromgeving.\nMet het gebruik van git komt daar nog een stap bij: de commit. Een commit doen betekent dat je een nieuw punt aan je tijdlijn toevoegt. Dit doe je als volgt:\nZet de bestanden klaar voor de commit Typ een korte maar begrijpelijke commitboodschap Commit Lokaal en cloud (=\u003eGitHub) Git heeft GitHub niet nodig om goed te kunnen werken. Toch heeft het veel voordelen om gebruik te maken van git in combinatie met GitHub, helemaal als je met anderen wilt samenwerken aan dezelfde code. GitHub functioneert dan als de centrale cloudopslag waar iedereen mee synchroniseert. Het is belangrijk om te beseffen dat je code in je programmeeromgeving en GitHub wel aan elkaar verbonden, maar niet automatisch gesynchroniseerd zijn. Je zult dit handmatig moeten doen. Maak je gebruik van GitHub, dan voer je na je commit een synchronisatie uit:\nDuw je commit van je ’lokale’ repository naar je repository op GitHub. Wanneer je samenwerkt met anderen, wil je als je later verdergaat eerst eventuele aanpassingen van je teamgenoten binnenhalen. Als zij die netjes hebben geduwd naar de repository op GitHub, kun jij die eenvoudig binnenhalen. Bij samenwerken in een team wordt stap 1 dus:\nHaal eventuele nieuwe commits van je GitHub repository binnen. 8 Stappen: Pull : Haal alle updates van GitHub binnen in je lokale repository. Codeer : Maak / verander je programmeercode. Save : Sla je veranderingen op. Probeer : Test uit of het werkt. Stage : Zet de bestanden klaar voor de commit. Message : Typ een korte maar begrijpelijke commitboodschap. Commit : Maak een nieuw punt in je tijdlijn. Push : Duw je commit van je ’lokale’ repository naar je (cloud) repository op GitHub. Q\u0026A GitHub 404 fout Ik heb via email een link ontvangen om toegang te krijgen tot een repo, maar als ik op de link druk dan krijg ik een 404 fout. Wat moet ik doen?\nLogin op GitHub en druk daarna nogmaals op de link.\n","description":"","tags":null,"title":"GitHub (2122 versie)","uri":"/tools/github2021/"},{"content":"Replit is een online ontwikkelomgeving waarin je code kunt wijzigen en uitvoeren. We gebruiken dit op de havo.\nWat is Replit? Replit is een online editor Replit werkt op elk apparaat met internettoegang en een moderne webbrowser, er is geen installatie van apps of programma’s nodig Je code wordt direct bewaard op de replit servers, inclusief oude versies Syntax checks door middel van kleuren van code voorkomt fouten Ondersteuning van heel veel talen: html/css/javascript, python, sqlite, php enzovoort Je kunt code die je gemaakt hebt uitvoeren in Replit Snel zien wat je code doet in een preview-venster Bekijk en test je websites uitgebreid in je browser dankzij de ingebouwde webserver Gebruik de ingebouwde shell access voor gevorderde functies Je kunt code die je in Replit gemaakt hebt bewaren op GitHub Heel veel goede programmeurs gebruiken GitHub Bewaar de laatste versie van je code op veilig GitHub (minimaal 1x per week, liefst elke les) De docent kan helpen als je code op GitHub staat Je kunt efficiënt samenwerken in groepjes als je code op GitHub bewaart De eerste keer Replit starten Replit is gratis, sommige functies zoals het wijzigen van private repo’s is afgeschermd in de gratis versie. Je hoeft voor het gebruik van Replit niets te installeren, alles werkt vanuit de browser Gebruik bij voorkeur Chrome of anders Firefox. Ga naar https://replit.com/ Gebruik je Github-account om in te loggen Geef Replit rechten in Github om wijzigingen aan te brengen in jouw repo’s (deze stap is verder uitgewerkt onder Q\u0026A “Bewaren op Github lukt niet, er is een foutmelding met access”) Code maken in Replit Ga naar https://replit.com/ en log in met je Github account. Klik op de blauwe knop “+Create” en klik in de popup die verschijnt op “Import from Github” Knip en plak de link naar de repo op github waar je je code hebt staan. Deze kun je vinden in Github. De link lijkt op https://github.com/emmaus-4h/website-piet/. Klik op de knop “Import from Github” Wijzig je code Test je code Commit en Push je wijzigingen. Klik daarvoor op het “version control” icoontje (een gesplitst lijntje met twee bolletjes) links in het scherm. Check in Github dat je codewijzigingen zijn opgeslagen Q\u0026A =\u003e DEZE INFO MOET NOG WORDEN AANGEPAST Bewaren op Replit lukt niet, er is een foutmelding met access Zet de permissies van Gitpod goed, zodat hij op jouw account in Github wijzigingen kan maken\nklik op het icoontje van een poppetje linksonderin, een menu verschijnt klik op “Gitpod: Open Acces Control”, een nieuw scherm verschijnt nadat je “Open” hebt geklikt in de popup klik op de drie puntjes op de regel “Gitpod” en kies “Edit Permissons” in het menu dat verschijnt Zet alle vinkjes aan in de popup die verschijnt en klik op “update permissions” geef toestemming in github als github daarom vraagt (groene knop). Bewaren op Replit lukt niet, er is een foutmelding met conflict Er zijn conflicten tussen jouw wijzigingen in Gitpod en de wijzigingen die gelijktijdig, meestal door een teamgenoot, gemaakt zijn in een repo. Je moet handmatig kiezen welke wijzigingen je wilt bewaren.\nCommit je wijzigingen Pull alle wijzigingen uit Github naar Gitpod Kies in de editor welke van de wijzigingen met een conflict je wilt bewaren Test je programma Commit Push je wijzigingen naar Github Hoe open ik een voorbeeldvenster met mijn website? Klik rechtsonder op “Ports: xxxx”, linksboven verschijnt een menu Klik linksboven op de regel met de poort Klik op het wereldbolletje achteraan op de regel met de poort, een popup verschijnt Klik op “Open” in de popup. Hoe update ik het voorbeeldvenster? Druk op reload in je voorbeeldvenster\nHoe kan ik terug naar de laatste versie op GitHub? Ga naar https://gitpod.io/ en log in met je Github account. Klik op de groene knop “New workspace” Knip en plak de link naar de repo op github waar je je code hebt staan. Deze kun je vinden in Github. De link lijkt op https://github.com/emmaus-4h/website-piet/ Mijn code springt niet goed in, hoe los ik dat op? Klik op [option]+[shift]+f. Gitpod auto-format het bestand dat je aan het bewerken bent.\nWaar vind ik documentatie over Gitpod? https://www.gitpod.io/docs/\n","description":"","tags":null,"title":"Replit","uri":"/tools/replit/"},{"content":"Gitpod is een online ontwikkelomgeving waarin je code kunt wijzigen en uitvoeren (en veel meer). We gebruiken dit op het vwo.\nWat is Gitpod? Gitpod is een online editor (en veel meer) De Gitpod editor is gebaseerd op VS Code. VS Code is een heel populaire editor onder professionele programmeurs. Gitpod werkt op elk apparaat met internettoegang en een moderne webbrowser, er is geen installatie van apps of programma’s nodig Je code wordt direct bewaard op de Gitpod servers, inclusief oude versies\u000bLETOP: In de gratis versie van Gitpod wordt je code van Gitpod verwijderd als je twee weken niets doet. Syntax checks door middel van kleuren van code voorkomt fouten Ondersteuning van heel veel talen: html/css/javascript, python, sqlite, php enzovoort Je kunt code die je gemaakt hebt uitvoeren in Gitpod Snel zien wat je code doet in een preview-venster Bekijk en test je websites uitgebreid in je browser door webserver te starten Gebruik de ingebouwde shell access voor gevorderde functies Je kunt code die je in Gitpod gemaakt hebt bewaren op GitHub Heel veel goede programmeurs gebruiken GitHub Bewaar de laatste versie van je code op veilig GitHub (minimaal 1x per week, liefst elke les) De docent kan helpen als je code op GitHub staat Je kunt efficiënt samenwerken in groepjes als je code op GitHub bewaart De eerste keer Gitpod starten Gitpod is gratis, tot maximaal 50 uur per maand. Je hoeft voor het gebruik van Gitpod niets te installeren, alles werkt vanuit de browser Gebruik Chrome of anders Firefox, in 21/22 zijn er problemen met een wit-scherm geconstateerd bij gebruik in Safari. Ga naar https://gitpod.io/ Gebruik je Github-account om in te loggen Geef Gitpod rechten in Github om wijzigingen aan te brengen in jouw repo’s (deze stap is verder uitgewerkt onder Q\u0026A “Bewaren op Github lukt niet, er is een foutmelding met access”) Code maken in Gitpod Ga naar https://gitpod.io/ en log in met je Github account. Klik op de groene knop “New workspace” Knip en plak de link naar de repo op github waar je je code hebt staan. Deze kun je vinden in Github. De link lijkt op https://github.com/emmaus-4h/website-piet/ Wijzig je code Test je code Commit je wijzigingen Synchroniseer je code in Gitpod met Github Check in Github dat je codewijzigingen zijn opgeslagen Q\u0026A Bewaren op Github lukt niet, er is een foutmelding met access Zet de permissies van Gitpod goed, zodat hij op jouw account in Github wijzigingen kan maken\nklik op het icoontje van een poppetje linksonderin, een menu verschijnt klik op “Gitpod: Open Acces Control”, een nieuw scherm verschijnt nadat je “Open” hebt geklikt in de popup klik op de drie puntjes op de regel “Gitpod” en kies “Edit Permissons” in het menu dat verschijnt Zet alle vinkjes aan in de popup die verschijnt en klik op “update permissions” geef toestemming in github als github daarom vraagt (groene knop). Bewaren op Github lukt niet, er is een foutmelding met conflict Er zijn conflicten tussen jouw wijzigingen in Gitpod en de wijzigingen die gelijktijdig, meestal door een teamgenoot, gemaakt zijn in een repo. Je moet handmatig kiezen welke wijzigingen je wilt bewaren.\nCommit je wijzigingen Pull alle wijzigingen uit Github naar Gitpod Kies in de editor welke van de wijzigingen met een conflict je wilt bewaren Test je programma Commit Push je wijzigingen naar Github Hoe open ik een voorbeeldvenster met mijn website? Klik rechtsonder op “Ports: xxxx”, linksboven verschijnt een menu Klik linksboven op de regel met de poort Klik op het wereldbolletje achteraan op de regel met de poort, een popup verschijnt Klik op “Open” in de popup. Hoe update ik het voorbeeldvenster? Druk op reload in je voorbeeldvenster\nHoe kan ik terug naar de laatste versie op GitHub? Ga naar https://gitpod.io/ en log in met je Github account. Klik op de groene knop “New workspace” Knip en plak de link naar de repo op github waar je je code hebt staan. Deze kun je vinden in Github. De link lijkt op https://github.com/emmaus-4h/website-piet/ Mijn code springt niet goed in, hoe los ik dat op? Klik op [option]+[shift]+f. Gitpod auto-format het bestand dat je aan het bewerken bent.\nIk kan mijn workspace in gitpod nergens meer vinden Als je een workspace twee weken niet gebruikt, dan wordt hij door gitpod verwijderd. Je kunt dan een nieuwe workspace maken van de laatste versie van je code die je in github hebt gecommit.\nHoe kan ik zien hoeveel gitpod gebruik ik deze maand nog over heb? Klik linkonder op het icoontje van een poppetje (je account) Kies “Gitpod: Upgrade subscription”, een nieuw scherm verschijnt nadat je in de popup die verschijnt op “Open” hebt geklikt Je ziet midden boven het aantal gebruikte en resterende uren. Beweeg met je muis over de tijd, er verschijnt een kleine popup die aangeeft van welke tot welke datum de huidige maand loopt Mijn 50 uur gratis gitpod gebruik zijn op Bijna alle leerlingen hebben genoeg aan 50 uur per maand. Als dit bij jouw een keer niet zo is, dan kun je dit als volgt oplossen.\nBewaar al je werk op Github vlak voordat je tijd op is. Maak met een ander e-email adres een nieuwe Github account aan. Vraag de docent je Github account toe te voegen aan de repo waarin je werkt. Login bij Gitpod met je nieuwe Github-account en maak een nieuwe workspace aan met de repo waarin je werkte. Je hebt nu weer 50 uur.\nWaar vind ik documentatie over Gitpod? https://www.gitpod.io/docs/\n","description":"","tags":null,"title":"Gitpod","uri":"/tools/gitpod/"},{"content":"Arduino IDE is een programma waarin je code kunt schrijven en downloaden in je Arduino.\nWat is de Arduino IDE? De Arduino IDE is een programma waarmee je je Arduino kunt programmeren. De Arduino IDE is beschikbaar voor computers met Windows, Linux en MacOS. Het programma is niet beschikbaar voor iPads en Chromebooks. Functies van de Arduino IDE:\ncode-editor compileren gecompileerde code uploaden naar een Arduino microcontroller (via een USB-kabel) Installeren van het programma De Arduino IDE is gratis. Je hoeft geen account aan te maken. Download de Arduino IDE van https://www.arduino.cc/en/software Installeer het programma zoals je gewend bent om andere programma’s te installeren op je computer. Je eerste Arduino schets Start de Arduino IDE Sluit de Arduino met een USB-kabel aan op de laptop Stel de juiste Arduino in. Klik in het menu op “Hulpmiddelen”-\u003e“Board”-\u003ede_Arduino_die_je_hebt. De rode Arduino’s op school zijn “Aduino Nano”. Stel de USB-poort in waarop je de Arduino hebt aangesloten. Klik in het menu op “Hulpmiddelen”-\u003e“Poort”-\u003ekies_de_juiste_poort. Meestal is de juiste poort iets met “arduino” of “mega” en iets zonder “bluetooth”. Maak een schets. Een programma voor je Arduino microcontroller wordt vaak een schets (Engels: sketch) genoemd. Je kunt beginnen met een voorbeeld-schets. Klik in het menu op “Bestand”-\u003e“Voorbeelden”-\u003e“Basics”-\u003e“Blink” Compileer de schets (vertaal je code naar machinetaal die de Arduino gebruikt). Klik in het menu op “Schets”-\u003e“Verifeer/Compileer”. Upload (verstuur naar je Arduino via de USB-kabel). Klik in het menu op “Schets”-\u003e“Upload”. Je ziet nu een klein ledje op je Arduino die knippert. Verander de code, bijvoorbeeld delay(1000) aanpassen in delay(200). Herhaal stap 7. Je zult zien dat de Arduino stap 6 (compileren) vanzelf opnieuw doet, omdat je de code hebt aangepast. Het ledje knippert nu sneller. Nu je stap 9 gedaan hebt, weet je zeker dat het jouw programma is dat in de Arduino zit. De Arduino onthoudt namelijk het laatste programma, ook als de stroom eraf is geweest, dus het kan zijn dat het knipperend-led programma er al door een vorige leerling in is gezet. Extra libraries installeren De ingewikkeldere sensoren en actuatoren die je kunt aansluiten op je Arduino, zoals displays, hebben libraries nodig om ze te kunnen programmeren. Het installeren van libraries in de Arduino kan via het menu “Hulpmiddelen” -\u003e “Bibliotheken beheren”. Het vinden van de juiste bibliotheek kan wel eens lastig zijn, vraag het de docent als je twijfelt. Goede biblitheken bevatten voorbeeld-code die na installatie van de bibliotheek in de Arduino IDE terug te vinden is in het menu onder “Bestand” -\u003e “Voorbeelden” Meer informatie Meer informatie over de Arduino-taal vind je op https://www.arduino.cc/ klik op “documentation” -\u003e “reference” Meer informatie over de pinnen van je Arduino vind je op https://www.arduino.cc/ klik op “hardware” -\u003e kies jouw Arduino -\u003e kies het tabblad “FAQ” How-to Schets opslaan Kies in het menu “Bestand” -\u003e “Opslaan als”, kies een map en geef je schets een naam. Een schets wordt altijd opgeslagen in een map met dezelfde naam als de schets. Q\u0026A Hij doet het niet Kijk of de USB-kabel goed in de Arduino zit (je voelt een kleine klik) Kijk of je de juiste Arduino hebt aangeven in de IDE (Arduino Nano) Kijk of je de juiste USB-poort het aangegeven in de IDE Kijk of er foutmeldingen zijn bij uploaden en lees die aandachtig Bij het uploaden krijg ik de melding “avrdude: ser_open(): can’t open device”… Je hebt waarschijnlijk vergeten de juiste USB-poort te kiezen. Kies de juiste USB-poort in het menu onder “Hulpmiddelen”-\u003e“Poort”\nIk krijg één of meerdere foutmelding(en) tijdens het compileren Je hebt fout gemaakt in de code. Bekijk de bovenste foutmelding. Kijk of je de melding begrijpt. Er staat bij op welke regel de fout gevonden is. Probeer de fout in je code op te lossen. Compileer de code daarna opnieuw.\nIk krijg een foutmelding met “undefined” tijdens het compileren Je hebt waarschijnlijk een variabele gebruikt zonder deze te declareren of een typefout gemaakt in de naam van de variabele.\nCompileren en uploaden gaat goed, maar mijn programma doet niet wat ik wil Laat je programma berichten op de Seriële monitor zetten, zodat kunt meekijken wat er gebeurt en de fout kunt vinden. De seriële monitor van Arduino is een soort console, die je misschien kent van eerdere opdrachten.\nZet in de setup() functie de opdracht Serial.begin(115200); Zet aan het begin van loop() functie de opdracht Serial.println(\"Start\"); Voeg op meer nuttige plaatsen berichten toe, zodat je weet welke code wel en niet wordt uitgevoerd. Je kunt ook de inhoud van variabelen of de uitkomst van functies afdrukken, bijvoorbeeld met Serial.println(\"Milliseconde na opstarten\" + millis()); Open voordat je programma upload de seriele monitor door in de Arduino-IDE te klikken op het menu “Hulpmiddelen” -\u003e “Seriële monitor”, let op dat de snelheid staat ingesteld op 115200. ","description":"","tags":null,"title":"Arduino IDE","uri":"/tools/arduino-ide/"},{"content":"Filius is een programma waarmee je netwerken kunt namaken en simuleren.\nWat is Filius? Filius is een programma waarmee je netwerken kunt bouwen en simuleren.\nInstalleren van het programma Filius is gratis en je hoeft geen account aan te maken. Je kunt Filius op twee manieren starten.\nStart Filius in je browser en volg de stappen uit de Readme.md. Dit werkt op (bijna) elk apparaat met een moderne webbrowser. Je hebt een (gratis) account in GitPod nodig. Je browser opent GitPod en op de servers van GitPod wordt een Linux-omgeving met Filius geopend. Installeer Filius op je eigen apparaat. Filius is beschikbaar voor Windows, MacOS en Linux. Meer informatie Meer informatie over Filius kun je vinden op de website van de maker: https://www.lernsoftware-filius.de De help over het gebruik van Filius zit in het programma: druk op het vraagteken. ","description":"","tags":null,"title":"Filius","uri":"/tools/filius/"},{"content":"","description":"","tags":null,"title":"1","uri":"/yours/1/"},{"content":"","description":"","tags":null,"title":"10","uri":"/yours/10/"},{"content":"","description":"","tags":null,"title":"2","uri":"/yours/2/"},{"content":"","description":"","tags":null,"title":"3","uri":"/yours/3/"},{"content":"","description":"","tags":null,"title":"4","uri":"/yours/4/"},{"content":"","description":"","tags":null,"title":"5","uri":"/yours/5/"},{"content":"","description":"","tags":null,"title":"6","uri":"/yours/6/"},{"content":"","description":"","tags":null,"title":"7","uri":"/yours/7/"},{"content":"","description":"","tags":null,"title":"8","uri":"/yours/8/"},{"content":"","description":"","tags":null,"title":"9","uri":"/yours/9/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/categories/"},{"content":"Some testing for different styles used in syntax highlightning and preformatted blocks.\nInline Code This is some very long inline code. Where does it wrap?\nWhat about wrapping short inline code if multiple sections are written side by side?\nWhat about wrapping short inline code if multiple sections are written side/by/side?\nWhat about wrapping long inline code if multiple sections are written side567 by34567 side567?\nWhat about wrapping long inline code if multiple sections are written side567/by34567/side567?\nCan we just use a simple HTML element ?\nBlock Code Code fences without any selected language { \"well\": \"some JSON in codefences in here\" } { \"well\": \"some JSON in HTML elements here\" } Block Preformatted Some preformatted stuff with markdown indention Some preformatted stuff in HTML elements ","description":"Some testing for different styles used in syntax highlightning and preformatted blocks","tags":null,"title":"Code","uri":"/tests/code/"},{"content":"Contributors Special thanks to everyone who has contributed to this project.\nMany thanks to Mathieu Cornic for his work on porting the Learn theme to Hugo.\nMany thanks to Andy Miller for initially creating the Learn theme for Grav.\nPackages and libraries autoComplete - A lightweight and powerful vanilla JavaScript completion suggester clipboard.js - A modern approach to copy text to clipboard Featherlight - A lightweight jQuery lightbox plugin Font Awesome - The internet’s icon library and toolkit jQuery - The “Write less, do more” JavaScript library jquery-svg-zoom-pan - A jQuery plugin to enable pan and zoom in SVG images Lunr - Enables a great search experience without the need for external, server-side, search services Mermaid - Generation of diagram and flowchart from text in a similar manner as markdown Perfect Scrollbar - A minimalistic but perfect custom scrollbar plugin RapiDoc - Create beautiful, customizable, interactive API documentation from OpenAPI Specifications Tooling GitHub - Continuous deployement, testing and hosting of this project’s sources and its documentation gren - A releasenotes generator for GitHub Hugo - The static site generator of your choice ","description":"","tags":null,"title":"Credits","uri":"/more/credits/"},{"content":"Some testing for different styles of image links.\nMarkdown Relative to page Relative to page up level Static External fully qualified External without scheme External without scheme and scheme separator HTML Relative to page Relative to page up level Static External fully qualified External without scheme External without scheme and scheme separator ","description":"Some testing for different styles of image links","tags":null,"title":"Images","uri":"/tests/images/"},{"content":"Informatica Actueel PWS project informatica: Actuele CO2 waarden op het Emmauscollege\nInhoud Planning Hier vind je de lesplanner, geplande toetsen en inlevermomenten, vakoverzicht en PTA’s per jaarlaag.\nTheorie Hier vind je alle theorie per module.\nOpdrachten Hier vind je de praktische opdrachten. Praktische opdrachten zijn meestal tussen de vier en acht weken werk. Je hebt veel vrijheid en kunt er echt iets moois van maken.\nHulpmiddelen Hulpmiddelen zijn programma’s die we gebruiken om dingen te maken. Hulpmiddelen zijn dus gereedschap (Engels: tools) dat je gebruikt bij informatica.\nbezoeken sinds 13 juni 2022\n","description":"","tags":null,"title":"Informatica","uri":"/"},{"content":"Some testing for different styles of links.\nMarkdown Relative to page: Relative to page up level: Static: ","description":"Some testing for different styles of links","tags":null,"title":"Links","uri":"/tests/links/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/tags/"},{"content":"Placeholder…\n","description":"","tags":null,"title":"The one and only hidden child","uri":"/yours/children-1/"}]